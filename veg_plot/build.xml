<?xml version="1.0"?>
<!-- 
  * build.xml
  *
  * Global build script for veg_plot. This simply allows running all the sub 
  * scripts from one place 
  *
  *     '$Author: farrell $'
  *     '$Date: 2003-11-12 22:59:16 $'
  *     '$Revision: 1.42 $'
--> 
<project name="veg_plot" default="compile" basedir=".">

  <target name="init" description="=> Initialize global variables">
    <echo>veg_plot/build.xml:  init</echo>

  	<!-- Set the proper webapp -->
    <condition property="webapp" value="vegbank">
    	<not><isset	property="webapp"/></not>
	</condition>

  	<!-- Load volatile properties from a file -->
	<!-- Load vegbank properties -->
    <condition property="build.props.file" value="${basedir}/build.properties">
    	<equals arg1="${webapp}" arg2="vegbank"/>
	</condition>

	<!-- Else, load other webapp properties -->
    <condition property="build.props.file" value="${basedir}/build.${webapp}.properties">
    	<not><equals arg1="${webapp}" arg2="vegbank"/></not>
	</condition>

    <property file="${build.props.file}"/>
    <echo>veg_plot/build.xml:  loading props file: ${build.props.file}</echo>


	<echo>init webapp '${webapp}'</echo>

    <property environment="env" />
    <property name="top.dir" location="${basedir}/.."/>
    <property name="top.lib.dir" location="${top.dir}/lib"/>
    <property name="top.build.dir" location="${top.dir}/build"/>
    <property name="build.dir" location="${basedir}/build" />
    <property name="src.dir" location="${basedir}/src" />
    <property name="java.src.dir" location="${basedir}/src" />
    <property name="web.src.dir" location="${src.dir}/web" />
    <property name="web.context" location="${env.TOMCAT_HOME}/webapps/${webapp}" /> 
    <property name="web.servlet.lib.dir" location="${web.context}/WEB-INF/lib"/>
    <property name="lib.dir" location="${basedir}/lib" />
    <property name="doc.dir" location="${basedir}/doc"/>
    <property name="build.src.dir" location="${build.dir}/src"/>
    <property name="build.java.src.dir" location="${build.src.dir}/java"/>
    <property name="build.classes.dir" location="${build.dir}/classes"/>
    <property name="build.test.dir" location="${build.dir}/test"/>
    <property name="build.test.integration.dir" location="${build.test.dir}/integration"/>
    <property name="build.lib.dir" location="${build.dir}/lib"/>
    <property name="reports.dir" location="${top.build.dir}/reports"/>
    <property name="reports.test.dir" location="${reports.dir}/testreports"/>
    <property name="dist.dir" location="${basedir}/dist" />
    <property name="test.dir" location="${basedir}/test" />
    <property name="test.unit.src.dir" location="${test.dir}/Unit"/>
    <property name="test.integration.dir" location="${test.dir}/Integration"/>
    <property name="ant.style.dir" location="${env.ANT_HOME}/etc" /> 

    <property name="rmiserver.lib.dir" location="${rmiserver.home.dir}/lib" /> 
    <property name="planttaxonomy" location="${basedir}/../veg_taxa/build/lib/planttaxonomy.jar"/>
    <property name="vegcommunity" location="${basedir}/../veg_community/build/lib/vegcommunity.jar"/>

    <!-- Location of jar files 
    <property name="xmlp" value="${top.lib.dir}/xalan_1_2_2.jar:${top.lib.dir}/xerces_1_3_1.jar:${top.lib.dir}/xml-apis.jar" />
    <property name="jdbc" value="${top.lib.dir}/jdbc7.0-1.2.jar" />
    <property name="vegclass_common" value="${top.lib.dir}/vegclass_common.jar" />
    <property name="cpath" 
      value="${rmidatasource}:${servlet}:${xmlp}:${jdbc}:${build.classes.dir}:${vegclass_common}:${planttaxonomy}:${vegcommunity}"/>
    <property name="cpath2" 
      value="${rmidatasource}:${servlet}:${xmlp}:${jdbc}:${xmlresource}:${datatranslator}:${build.classes.dir}:${vegclass_common}"/>
    -->

    <filter token="reports.test.dir" value="${reports.test.dir}"/>
    <!-- This is no longer used ?? -->
    <filter token="outputXML" value="${web.servlet.lib.dir}/atomicResult"/>
    <filter token="java1.4.home.dir" value="${java1.4.home.dir}"/>   
    <filter token="build.test.integration.dir"
      value="${build.test.integration.dir}"/>

    <!--
      * The following filters expect the database connection properties
      * be set in the user custom build.properties file. There is an example 
      * of this file in cvs.
    -->
    <filter token="authenticationServletHost" value="${authenticationServletHost}" />
    <filter token="communityRequestServletHost" value="${communityRequestServletHost}" />
    <filter token="plantRequestServletHost" value="${plantRequestServletHost}" />
    <filter token="geoCoordRequestServletHost" value="${geoCoordRequestServletHost}" />
    <filter token="databaseType" value="${databaseType}" />
    <filter token="databaseUser" value="${databaseUser}" />
    <filter token="databaseUserPassword" value="${databaseUserPassword}" />
    <filter token="databasePort" value="${databasePort}" />
    <filter token="hostname" value="${hostname}"/>
    <filter token="databaseDriverType" value="${databaseDriverType}" />
    <filter token="databaseDriverClass" value="${databaseDriverClass}" />
    <filter token="databaseConnectString" value="${databaseConnectString}"/>
    <filter token="databaseName" value="${databaseName}" />
    <filter token="insert.minConnections" value="${insert.minConnections}" />
    <filter token="insert.maxConnections" value="${insert.maxConnections}" />
    <filter token="query.minConnections" value="${query.minConnections}" />
    <filter token="query.maxConnections" value="${query.maxConnections}" />
    <filter token="maxConnectionUses" value="${maxConnectionUsers}" />
    <filter token="resetTime" value="${resetTime}" />
    <filter token="logFile" value="${logFile}" />
    <filter token="vegbankSchemaName" value="${vegbankSchemaName}" />
    <filter token="originalDataStore" value="${vegbank.home.dir}/originalDataStore"/>
    <filter token="schemaLocation" value="${vegbank.home.dir}/lib"/>
    
    <!-- Servlet specific -->
    <filter token="mailHost" value="hyperion.nceas.ucsb.edu"/>
    <filter token="systemEmail" value="dba@vegbank.org"/>
    <filter token="genericForm" value="${web.context}/forms/generic_form.html"/>
    <filter token="genericTemplate" value="${web.context}/forms/tmp.html"/>
    <filter token="rmiserver"  value="${rmiserver}"/>
    <filter token="uploadDir" value="${web.servlet.lib.dir}"/>
    <filter token="servlet_lib_dir" value="${web.servlet.lib.dir}/" />

    <!-- TODO: Need to define elsewhere-->
    <filter token="constraintlist" value="./constraints.xml"/>
    <filter token="constraintmap" value="./constraint-map.xml"/>

  </target>
  
  <target name="prepare" depends="init">

  	<echo>veg_plot/build.xml PREPARE: build.lib.dir: ${build.lib.dir}</echo>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.lib.dir}"/>
    <mkdir dir="${build.src.dir}"/>
    <mkdir dir="${build.java.src.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
    <!-- Classpaths -->
    <path id="classpath.compilation">
      <pathelement path="${planttaxonomy}"/>
      <pathelement path="${vegcommunity}"/>
      <pathelement path="${build.classes.dir}"/>
      <fileset dir="${top.lib.dir}">
        <include name="**/*jar"/>
      </fileset>
      <fileset dir="${build.lib.dir}">
        <include name="**/*jar"/>
      </fileset>
    </path>

  </target>
  
  
  <target name="compile" depends="cleanprops,prepare"
          description="=> Compiles all code in veg_plot module">
		<echo message="Compiling all of ${ant.project.name}"/>

    <copy todir="${build.java.src.dir}">
      <fileset dir="${java.src.dir}">
        <include name="org/**/*java"/>
      </fileset>
    </copy>
   
    <!-- Copy property files -->
    <copy todir="${build.classes.dir}" filtering="true">
      <fileset dir="${lib.dir}">
        <include name="**/*properties"/>
      </fileset>
    </copy>
    
    <javac  srcdir="${build.java.src.dir}"
            includes="**/*.java  "
            destdir="${build.classes.dir}"
            debug="on"
    >
      <classpath refid="classpath.compilation"/>
    </javac>

    <echo message="NOT Compiling the RMI Stubs and Skeletons"/>
    <!--
    <rmic classname="org.vegbank.plots.rmi.DataSourceImpl" base="${build.classes.dir}" />
    -->
    
  </target>
	
	<target name="jar" depends="compile"
          description="=> Generates all jars in veg_plot module">
		<echo message="Creating all jars in ${ant.project.name}"/>
	    
    <!-- database_access.jar -->
    <jar  destfile ="${build.lib.dir}/database_access.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/databaseAccess/*class"/>
        <include name="database.properties"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/databaseAccess/*java"/>
      </fileset>
    </jar>
    <!-- xmlresource.jar -->
     <jar  destfile ="${build.lib.dir}/xmlresource.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/xmlresource/**/*class"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/xmlresource/**/*java"/>
      </fileset>
    </jar>
    <!-- plotvalidator.jar -->
    <jar  destfile ="${build.lib.dir}/plotvalidator.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="edu/ucsb/nceas/vegbank/plotvalidation/**/*class"/>
        <include name="plotvalidation.properties"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="edu/ucsb/nceas/vegbank/plotvalidation/**/*java"/>
      </fileset>
    </jar>
    <!-- authservletmodule.jar -->
    <jar  destfile ="${build.lib.dir}/authservletmodule.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/authentication/**/*class"/>
        <include name="authentication.properties"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/authentication/**/*java"/>
      </fileset>
    </jar>
    <!-- usermanagement.jar -->
    <jar  destfile ="${build.lib.dir}/usermanagement.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/usermanagement/**/*class"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/usermanagement/**/*java"/>
      </fileset>
    </jar>
    <!-- framework.jar -->
    <jar  destfile ="${build.lib.dir}/framework.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/framework/**/*class"/>
        <include name="org/vegbank/servlet/plugin/**/*class"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/framework/**/*java"/>
        <include name="org/vegbank/servlet/plugin/**/*java"/>
      </fileset>
    </jar>
    <!-- datafile-exchange.jar -->
    <jar  destfile ="${build.lib.dir}/datafile-exchange.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/datafileexchange/**/*class"/>
        <include name="dataexchange.properties"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/datafileexchange/**/*java"/>
      </fileset>
    </jar>
    <!-- stylesheet-generator.jar -->
    <jar  destfile ="${build.lib.dir}/stylesheet-generator.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/stylesheet/**/*class"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/stylesheet/**/*java"/>
      </fileset>
    </jar>
    <!-- VegbankWeb.jar -->
    <jar  destfile ="${build.lib.dir}/vegbankWeb.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/**/*class"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/**/*java"/>
      </fileset>
    </jar>

    <!-- vegbankquery.jar -->
    <jar  destfile ="${build.lib.dir}/vegbankquery.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/request/**/*class"/>
        <!-- FIXME: Confirm these are used -->
        <include name="fileDownload.properties"/>
        <include name="pageDirector.properties"/>
        <include name="veg_servlet.properties"/>
        <include name="plotQuery.properties"/>
        <include name="vegbank.properties"/>
        <include name="authenticate.properties"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/servlet/request/**/*java"/>
      </fileset>
    </jar>
    <!-- rmidatasource.jar -->
    <jar  destfile ="${build.lib.dir}/rmidatasource.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/plots/rmi/**/*class"/>
        <include name="rmidatasource.properties"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/plots/rmi/**/*java"/>
      </fileset>
    </jar>
    <!-- datatranslator.jar -->
    <jar  destfile ="${build.lib.dir}/datatranslator.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="org/vegbank/plots/datasource/**/*class"/>
        <include name="plugin.properties"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="org/vegbank/plots/datasource/**/*java"/>
      </fileset>
    </jar>

	</target>

  <target name="jar-subprojects" depends="prepare" description="==> jar up subprojects">
		<!--<ant dir="exp/services" target="jar" inheritAll="false"/>-->
  </target>
  
  <target name="jar-all" depends="jar, jar-subprojects" description="==> Generate all jar files"/>



  <!-- ================================================================ -->
  <!-- DEPLOYMENT RELATED TARGETS                                       -->
  <!-- ================================================================ -->
  
	<target name="deploy" depends="jar, deploy-resources"
			description="=> Deploys jars in veg_plot module to servlet container">
		<echo message="Distr all of jars in ${ant.project.name}"/>

		<!-- set the proper deploy target -->
		<condition property="deploy.target" value="deploy">
			<or>
				<not><isset property="${webapp}"/></not>
				<equals arg1="${webapp}" arg2="vegbank"/>
			</or>
		</condition>

		<!-- else, set other webapp deployment -->
		<condition property="deploy.target" value="deploy-${webapp}">
			<not><equals arg1="${webapp}" arg2="vegbank"/></not>
		</condition>

		<ant dir="exp/vegbank_web" target="${deploy.target}" inheritAll="false">
			<property name="hostname" value="${hostname}"/>
		</ant>

		<echo>deploying veg_plot jars to ${webapp}</echo>
		<echo>db connect: ${databaseConnectString}</echo>
		<copy todir="${web.servlet.lib.dir}">
			<fileset dir="${build.lib.dir}" includes="*jar"/>
		</copy> 
	</target>

	<target name="deploy-vegtest"
			description="=> Deploys jars in veg_plot module to vegtest instance">

  		<property name="webapp" value="vegtest"/>
  		<property name="deploy.target" value="deploy-vegtest"/>
		<antcall target="deploy"/>

		<!--
		<ant dir="exp/vegbank_web" target="deploy-vegtest" inheritAll="false">
			<property name="hostname" value="${hostname}"/>
		</ant>

  		<echo>veg_plot/build.xml DEPLOY-VEGTEST: build.lib.dir: ${build.lib.dir}</echo>
		<copy todir="${web.servlet.lib.dir}">
			<fileset dir="${build.lib.dir}" includes="*jar"/>
		</copy> 
		-->
	</target>

  <target name="deploy-prepare">
    <!-- Make dirs of the application -->
    <mkdir dir="${web.context}"/>
    <mkdir dir="${web.servlet.lib.dir}"/>
  </target>

	<target name="deploy-resources" depends="init, deploy-prepare" 
          description="=> Deploy resources to servlet container">

    <!-- Copy xml resources to servlet container -->
		<copy todir="${web.servlet.lib.dir}">
			<fileset dir="xml" includes="*dtd, *xml"/>
		</copy>
   
    <!-- Copy misc. files into container -->
		<copy file="bin/coord_transform.sh" todir="${web.servlet.lib.dir}"/>
    <chmod dir="${web.servlet.lib.dir}" perm="ugo+x" includes="**/*.sh"/>
    
    <!-- Copy Third Party jars -->
    <copy todir="${web.servlet.lib.dir}">
      <fileset dir="${top.lib.dir}" 
               excludes=" xalan.jar 
                          xercesImpl.jar
                          servlet.jar
                          xml-apis.jar"
      />
    </copy>
    <copy todir="${web.servlet.lib.dir}" file="${planttaxonomy}"/>
    <copy todir="${web.servlet.lib.dir}" file="${vegcommunity}"/>
    
	</target>

  <target name="deploy-rmi-resources" depends="jar" 
          description="=> Deploy resources (lib,xml) to rmiserver">
 
    <copy todir="${rmiserver.lib.dir}">
			<fileset dir="${build.lib.dir}" includes="*jar"/>
		</copy>
    
  </target>
  
	<target name="clean" depends="init" 
          description="=> Remove all generated files">
    <delete dir="${build.dir}"/>
  
		<ant dir="exp/rmidatasource" target="clean"/> 
		<ant dir="exp/services" target="clean"/>
	</target>

	<target name="cleanprops" depends="init,prepare" 
		description="=> Remove generated properties files">
		<echo>cleanprops: removing old generated properties files</echo>
		<delete>
			<fileset dir="${build.classes.dir}" includes="**/*.properties"/>
		</delete>
	</target>
  
  <!-- ================================================================ -->
  <!-- TEST RELATED TARGETS                                             -->
  <!-- ================================================================ -->
  <!-- Compiling, running and generating reports for tests              -->
  <!-- This is getting big maybe .. could make separate build file      -->
  <!-- ================================================================ -->

  <target name="test-prepare" depends="prepare">
     
    <property name="build.test.classes.dir" value="${build.test.dir}/classes"/>
    <property name="build.test.integration.dir" value="${build.test.dir}/integration"/>
    <mkdir dir="${build.test.dir}"/>
    <mkdir dir="${reports.test.dir}"/>
    <mkdir dir="${build.test.classes.dir}"/>
    <mkdir dir="${build.test.dir}/src"/>
    <mkdir dir="${build.test.dir}/testdata"/>
    <mkdir dir="${build.test.integration.dir}"/>


    <!-- Copy testdata into build tree -->
    <copy todir="${build.test.dir}/testdata">
      <fileset dir="${test.dir}/TestData">
        <include name="*xml"/>
        <include name="*mdb"/>
      </fileset>
    </copy>

    <property name="classpath.compilation" refid="classpath.compilation"/>
    
  </target>
 
  <target name="test" depends="test-prepare" 
          description="=> Run all the junit tests">
   
    <!-- copy and compile the tests into a jar file -->
    <copy todir="${build.test.dir}/src">
      <fileset dir="${test.unit.src.dir}">
        <include name="**/*java"/>
      </fileset>
    </copy>
    
    <javac srcdir="${test.unit.src.dir}"
           destdir="${build.test.classes.dir}"
           includes="**/*.java">
      <classpath refid="classpath.compilation"/>
    </javac>


    <jar jarfile="${build.lib.dir}/${ant.project.name}-junittests.jar"
         basedir="${build.test.classes.dir}"
         includes="**/*.class" />

    <!-- use the ant "junit" task to run JUnit tests. -->
    <junit printsummary="yes" haltonfailure="no" fork="no"
           haltonerror="no">
      <classpath refid="classpath.compilation"/>
      <formatter type="xml" />

      <batchtest fork="yes" todir="${reports.test.dir}">
        <fileset dir="${build.test.classes.dir}">
          <include name="**/*.class" />
        </fileset>
      </batchtest>
    </junit>

  </target>

  <target name="dist-testreport" depends="test" 
          description="=> Generate a html and distribute a report from tests output">

    <!-- Create a report from the junit output -->
    <junitreport todir="${reports.test.dir}">
      <fileset dir="${reports.test.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" 
              todir="${web.context}/dev/reports/junit/" 
              styledir="${ant.style.dir}"/> 
    </junitreport>

  </target>
 
  <target name="test-integration" depends="test-prepare"
          description="=> Run Integration Tests">

    <echo message="+-----------------------------------------------+"/>
    <echo message="|                                               |"/>
    <echo message="| Running Integation tests                      |"/>
    <echo message="|                                               |"/>
    <echo message="+-----------------------------------------------+"/>

    <copy todir="${build.test.integration.dir}" filtering="yes">
      <fileset dir="${test.integration.dir}">
        <include name="*sh"/>
        <include name="*xsl"/>
        <include name="*sql"/>
      </fileset>
    </copy>
    <chmod file="${build.test.integration.dir}/LoadPlotTest.sh" perm="ugo+rx"/>
    
    <chmod perm="ug+x">
      <fileset dir="${build.test.integration.dir}">
        <include name="*sh"/>
      </fileset>
    </chmod>

    <!-- Test Loading a vbaccess plot -->
    <exec executable="${build.test.integration.dir}/LoadPlotTest.sh">
      <env key="CLASSPATH" value="${classpath.compilation}"/>
      <arg value="../testdata/vbaccess-example.mdb"/>
      <arg value="157"/>
      <arg value="vbaccessout.xml"/>
      <arg value="vbaccess"/>
      <arg value="VegBankAccessPlotInsert"/>
      <arg value="${rmiserver}"/>
      <arg value="../testdata/vbaccess-output.xml"/>
    </exec>
    
    <!-- Test Loading a second vbaccess plot -->    
    <exec executable="${build.test.integration.dir}/LoadPlotTest.sh">
      <env key="CLASSPATH" value="${classpath.compilation}"/>
      <arg value="../testdata/vbaccess-example2.mdb"/>
      <arg value="1"/>
      <arg value="vbaccessout.xml"/>
      <arg value="vbaccess"/>
      <arg value="VegBankAccessPlotInsert2"/>
      <arg value="${rmiserver}"/>
      <arg value="../testdata/vbaccess-example2.xml"/>
    </exec>

    <!-- Test Loading a tnc plot -->
    <exec executable="${build.test.integration.dir}/LoadPlotTest.sh">
      <env key="CLASSPATH" value="${classpath.compilation}"/>
      <arg value="../testdata/tncplots-example.mdb"/>
      <arg value="BADL.102"/>
      <arg value="tncout.xml"/>
      <arg value="tnc"/>
      <arg value="TNCPlotInsert"/>
      <arg value="${rmiserver}"/>
      <arg value="../testdata/tnc-output.xml"/>
    </exec>
    
    <!-- Test Loading a native plot --> 
    <exec executable="${build.test.integration.dir}/LoadPlotTest.sh">
      <env key="CLASSPATH" value="${classpath.compilation}"/>
      <arg value="../testdata/nativeDataSource.xml"/>
      <arg value="Fern-1"/>
      <arg value="nativeout.xml"/>
      <arg value="NativeXmlPlugin"/>
      <arg value="NativePlotInsert"/>
      <arg value="${rmiserver}"/>
      <arg value="../testdata/nativeDataSource.xml"/>
    </exec>
    
    <!-- Test Loading a native plot    --> 
    <exec executable="${build.test.integration.dir}/LoadPlotTest.sh">
      <env key="CLASSPATH" value="${classpath.compilation}"/>
      <arg value="../testdata/nativeDataSource2.xml"/>
      <arg value="Fern-1"/>
      <arg value="nativeout.xml"/>
      <arg value="NativeXmlPlugin"/>
      <arg value="NativePlotInsert2"/>
      <arg value="${rmiserver}"/>
      <arg value="../testdata/nativeDataSource.xml"/>
    </exec>
 
  </target>

  <target name="run-tests" depends="test, test-integration" description="==> Run all availible tests"/>
</project>

