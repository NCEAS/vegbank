<?xml version="1.0"?>
<!-- 
  * build.xml
  *
  * Global build script for veg_plot. This simply allows running all the sub 
  * scripts from one place 
  *
  *     '$Author: farrell $'
  *     '$Date: 2003-02-04 00:39:41 $'
  *     '$Revision: 1.13 $'
--> 
<project name="veg_plot" default="compile" basedir=".">

  <!-- Load volatile properties from a file -->
  <property file="${basedir}/build.properties"/>
  
  <target name="init" description="=> Initialize global variables">
    <property environment="env" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="java.src.dir" value="${basedir}/src" />
    <property name="lib.dir" value="${basedir}/lib" />
    <property name="doc.dir" value="${basedir}/doc"/>
    <property name="build.src.dir" value="${build.dir}/src"/>
    <property name="build.java.src.dir" value="${build.src.dir}/java"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.test.dir" value="${build.dir}/test"/>
    <property name="build.test.integration.dir"
      value="${build.test.dir}/integration"/>
    <property name="build.lib.dir" value="${build.dir}/lib"/>
    <property name="reports.dir" value="${build.dir}/reports"/>
    <property name="reports.test.dir" value="${reports.dir}/testreports"/>
    <property name="src.dir" value="${basedir}/src" />
    <property name="dist.dir" value="${basedir}/dist" />
    <property name="test.dir" value="${basedir}/test" />
    <property name="test.unit.src.dir" value="${test.dir}/Unit"/>
    <property name="test.integration.dir" value="${test.dir}/Integration"/>
    <property name="ant.style.dir" value="${env.ANT_HOME}/etc" /> 
    <property name="web.docroot" value="${env.TOMCAT_HOME}/webapps" /> 
    <property name="web.servlet.lib.dir"
      value="${web.docroot}/framework/WEB-INF/lib" /> 
    <property name="rmiserver.lib.dir" value="${rmiserver.home.dir}/lib" /> 
        
    <!-- Location of jar files -->
    <property name="xmlp" value="${lib.dir}/xalan_1_2_2.jar:${lib.dir}/xerces_1_3_1.jar:${lib.dir}/xml-apis.jar" />
    <property name="jdbc" value="${lib.dir}/jdbc7.0-1.2.jar" />
    <property name="vegclass_common" value="../lib/vegclass_common.jar" />
    <property name="servlet" value="${lib.dir}/servlet.jar" />
    <property name="xmlresource" value="${build.lib.dir}/xmlresource.jar" />
    <property name="datatranslator" value="${build.lib.dir}/datatranslator.jar" />
    <property name="rmidatasource" value="${build.lib.dir}/rmidatasource.jar" />
    <property name="cpath" 
      value="${rmidatasource}:${servlet}:${xmlp}:${jdbc}:${build.classes.dir}:${vegclass_common}"/>
    <property name="cpath2" 
      value="${rmidatasource}:${servlet}:${xmlp}:${jdbc}:${xmlresource}:${datatranslator}:${build.classes.dir}:${vegclass_common}"/>
    <!-- Classpaths 
    <path id="classpath.compilation">
      <pathelement location="${build.classes.dir}"/>
      <fileset dir="${build.lib.dir}">
        <include name="**/*jar"/>
      </fileset>
      <fileset dir="${lib.dir}">
        <include name="**/*jar"/>
      </fileset>
    </path>
    -->

    <filter token="reports.test.dir" value="${reports.test.dir}"/>
    <!-- This is no longer used ?? -->
    <filter token="outputXML" value="${web.servlet.lib.dir}/atomicResult"/>
    <filter token="java1.4.home.dir" value="${java1.4.home.dir}"/>   
    <filter token="build.test.integration.dir"
      value="${build.test.integration.dir}"/>

    <!--
      * The following filters expect the database connection properties
      * be set in the user custom build.properties file. There is an example 
      * of this file in cvs.
    -->
    <filter token="authenticationServletHost" value="${authenticationServletHost}" />
    <filter token="communityRequestServletHost" value="${communityRequestServletHost}" />
    <filter token="plantRequestServletHost" value="${plantRequestServletHost}" />
    <filter token="geoCoordRequestServletHost" value="${geoCoordRequestServletHost}" />
    <filter token="databaseType" value="${databaseType}" />
    <filter token="user" value="${databaseUser}" />
    <filter token="password" value="${databaseUserPassword}" />
    <filter token="port" value="${databasePort}" />
    <filter token="hostname" value="${hostname}"/>
    <filter token="driverType" value="${databaseDriverType}" />
    <filter token="driverClass" value="${databaseDriverClass}" />
    <filter token="connectString" value="${databaseConnectString}"/>
    <filter token="databaseName" value="${databaseName}" />
    <filter token="insert.minConnections" value="${insert.minConnections}" />
    <filter token="insert.maxConnections" value="${insert.maxConnections}" />
    <filter token="query.minConnections" value="${query.minConnections}" />
    <filter token="query.maxConnections" value="${query.maxConnections}" />
    <filter token="maxConnectionUses" value="${maxConnectionUsers}" />
    <filter token="resetTime" value="${resetTime}" />
    <filter token="logFile" value="${logFile}" />

  </target>
  
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.lib.dir}"/>
    <mkdir dir="${build.src.dir}"/>
    <mkdir dir="${build.java.src.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
  </target>
  
  <target name="compile" depends="prepare"
          description="=> Compiles all code in veg_plot module">
		<echo message="Compiling all of ${ant.project.name}"/>

    <!-- FIXME: temporary hack to move code up into single tree -->
    <copy todir="${build.java.src.dir}">
      <fileset dir="./exp/database_access/src" casesensitive="yes">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="./exp/data-translators/src/data-translators/" casesensitive="yes">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="${java.src.dir}" casesensitive="yes">
        <include name="edu/**/*.java"/>
      </fileset>
      <fileset dir="./exp/xml-resource/src" casesensitive="yes">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="./exp" casesensitive="yes">
        <include name="servlet/util/*.java"/>
      </fileset>
    </copy> 

    <!-- Copy property files -->
    <copy file="./exp/database_access/lib/database.properties" 
          todir="${build.classes.dir}"
          filtering="true"/>
    
    <javac  srcdir="${build.java.src.dir}"
            classpath="${cpath}"
            includes="**/*.java  "
            destdir="${build.classes.dir}"
            debug="on"
    />


    <!-- Call sub-project ant build files -->
    <!--<ant dir="exp/client_installer" target="compile"/>-->
    <!--<ant dir="exp/database_access" target="compile"/>-->
    <!--<ant dir="exp/data-translators" target="compile"/>-->
    <ant dir="exp/rmidatasource" target="compile"/> 
    <ant dir="exp/services" target="compile" inheritAll="false"/>
    <ant dir="exp/servlet" target="compile" inheritAll="false"/>
    <!--<ant dir="exp/vegclient" target="compile" inheritAll="false"/>-->
    <ant dir="exp/xml-resource" target="compile" inheritAll="false"/>
    <ant dir="exp/xml_to_sql" target="compile" inheritAll="false"/>
    <ant antfile="./build-plotvalidation.xml" target="compile"/>
  </target>
	
	<target name="jar" depends="compile"
          description="=> Generates all jars in veg_plot module">
		<echo message="Creating all of jars in ${ant.project.name}"/>
	    
    <jar  destfile ="${build.lib.dir}/database_access.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="databaseAccess/*.class"/>
        <include name="database.properties"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="databaseAccess/*.java"/>
      </fileset>
    </jar>

  
    <!--<ant dir="exp/database_access" target="jar"/>-->
		<ant dir="exp/data-translators" target="jar"/>
		<ant dir="exp/rmidatasource" target="jar"/> 
		<ant dir="exp/services" target="jar" inheritAll="false"/>
		<ant dir="exp/servlet" target="jar" inheritAll="false"/>
		<!--<ant dir="exp/vegbank_web" target="jar"/>-->
		<!--<ant dir="exp/vegclient" target="jar"/>-->
		<ant dir="exp/xml-resource" target="jar"/>
		<ant dir="exp/xml_to_sql" target="jar"/>
	</target>
	
	<target name="deploy" depends="jar, deploy-resources"
          description="=> Deploys jars in veg_plot module to servlet container">
		<echo message="Distr all of jars in ${ant.project.name}"/>
		<ant dir="exp/database_access" target="dist-web" inheritAll="false"/> 
		<ant dir="exp/data-translators" target="dist" inheritAll="false"/>
		<ant dir="exp/rmidatasource" target="dist" inheritAll="false"/> 
		<!-- <ant dir="exp/services" target="jar"/> No dist target -->
		<ant dir="exp/servlet" target="dist" inheritAll="false"/>
		<ant dir="exp/vegbank_web" target="dist" inheritAll="false"/>
		<!-- FIXME <ant dir="exp/vegclient" target="dist"/>  target fails to build -->
		<!-- <ant dir="exp/xml-resource" target="dist"/> No dist target -->
		<!-- <ant dir="exp/xml_to_sql" target="jar"/> No dist target -->
	</target>

	<target name="deploy-resources" depends="init" 
          description="=> Deploy resources to servlet container">
		<!-- Copy xml resources to servlet container -->
		<copy todir="${servlet_lib}">
			<fileset dir="xml" includes="*xsl, *dtd, *xml"/>
		</copy>
    
		<copy file="src/utilities/coord_transform.sh" todir="${servlet_lib}"/>
		<copy file="../veg_community/sql/update_community_summary.sql" todir="${servlet_lib}"/>
	</target>

  <target name="deploy-rmi-resources" depends="jar" 
          description="=> Deploy resources (lib,xml) to rmiserver">
 
    <copy todir="${rmiserver.lib.dir}">
			<fileset dir="${build.lib.dir}" includes="*jar"/>
		</copy>
    
  </target>
  
	<target name="clean" depends="init" 
          description="=> Remove all generated files">
    <delete dir="${build.dir}"/>
  
		<ant dir="exp/client_installer" target="clean"/>
		<ant dir="exp/database_access" target="clean"/>
		<ant dir="exp/data-translators" target="clean"/>
		<ant dir="exp/rmidatasource" target="clean"/> 
		<ant dir="exp/services" target="clean"/>
		<ant dir="exp/servlet" target="clean"/>
		<ant dir="exp/vegclient" target="clean"/>
		<ant dir="exp/xml-resource" target="clean"/>
		<ant dir="exp/xml_to_sql" target="clean"/>
	</target>
  
	<!-- Want to pass command line variables in ant but no working yet	
	<target name="database_access">
		<echo message="Going to call ${target} "/>
		<ant dir="exp/database_access" target="${target}"/>		
	</target>
	-->
 
  <!-- ================================================================ -->
  <!-- TEST RELATED TARGETS                                             -->
  <!-- ================================================================ -->
  <!-- Compiling, running and generating reports for tests              -->
  <!-- This is getting big maybe .. could make separate build file      -->
  <!-- ================================================================ -->

  <target name="test-prepare" depends="prepare">
     
    <property name="build.test.classes.dir" value="${build.test.dir}/classes"/>
    <property name="build.test.integration.dir" value="${build.test.dir}/integration"/>
    <mkdir dir="${build.test.dir}"/>
    <mkdir dir="${reports.test.dir}"/>
    <mkdir dir="${build.test.classes.dir}"/>
    <mkdir dir="${build.test.dir}/src"/>
    <mkdir dir="${build.test.dir}/testdata"/>
    <mkdir dir="${build.test.integration.dir}"/>


    <!-- Copy testdata into build tree -->
    <copy todir="${build.test.dir}/testdata">
      <fileset dir="${test.dir}/TestData">
        <include name="*xml"/>
        <include name="*mdb"/>
      </fileset>
    </copy>
    
  </target>
 
  <target name="test" depends="test-prepare" 
          description="=> Run all the junit tests">
   
    <!-- copy and compile the tests into a jar file -->
    <copy todir="${build.test.dir}/src">
      <fileset dir="${test.unit.src.dir}">
        <include name="**/*java"/>
      </fileset>
    </copy>
    
    <javac srcdir="${test.unit.src.dir}"
           destdir="${build.test.classes.dir}"
           classpath="${cpath2}:${lib}/database_access.jar"
           includes="**/*.java" />

    <jar jarfile="${build.lib.dir}/${ant.project.name}-junittests.jar"
         basedir="${build.test.classes.dir}"
         includes="**/*.class" />

    <!-- use the ant "junit" task to run JUnit tests. -->
    <junit printsummary="yes" haltonfailure="no" fork="no"
           haltonerror="no">
      <classpath>
        <pathelement path="${cpath2}"/>
        <fileset dir="${build.lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      
      <formatter type="xml" />

      <batchtest fork="yes" todir="${reports.test.dir}">
        <fileset dir="${build.test.classes.dir}">
          <include name="**/*.class" />
        </fileset>
      </batchtest>
    </junit>

  </target>

  <target name="dist-testreport" depends="test" 
          description="=> Generate a html and distribute a report from tests output">

    <!-- Create a report from the junit output -->
    <junitreport todir="${reports.test.dir}">
      <fileset dir="${reports.test.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="noframes" 
              todir="${web.docroot}/vegbank/" 
              styledir="${ant.style.dir}"/> 
    </junitreport>

  </target>
 
  <target name="test-integration" depends="test-prepare"
          description="=> Run Integration Tests">

    <echo message="+-----------------------------------------------+"/>
    <echo message="|                                               |"/>
    <echo message="| Running Integation tests                      |"/>
    <echo message="|                                               |"/>
    <echo message="+-----------------------------------------------+"/>

    <copy todir="${build.test.integration.dir}" filtering="yes">
      <fileset dir="${test.integration.dir}">
        <include name="*sh"/>
        <include name="*xsl"/>
        <include name="*sql"/>
      </fileset>
    </copy>
    <chmod file="${build.test.integration.dir}/LoadPlotTest.sh" perm="ugo+rx"/>
    
    <chmod perm="ug+x">
      <fileset dir="${build.test.integration.dir}">
        <include name="*sh"/>
      </fileset>
    </chmod>

    <!-- Test Loading a vbaccess plot
    <exec executable="${build.test.integration.dir}/LoadPlotTest.sh">
      <env key="CLASSPATH" value="${cpath2}"/>
      <arg value="../testdata/vbaccess-example.mdb"/>
      <arg value="157"/>
      <arg value="vbaccessout.xml"/>
      <arg value="vbaccess"/>
      <arg value="VegBankAccessPlotInsert"/>
      <arg value="${rmiserver}"/>
      <arg value="../testdata/vbaccess-output.xml"/>
    </exec>
    --> 
    <!-- Test Loading a second vbaccess plot  -->
    <exec executable="${build.test.integration.dir}/LoadPlotTest.sh">
      <env key="CLASSPATH" value="${cpath2}"/>
      <arg value="../testdata/vbaccess-example2.mdb"/>
      <arg value="1"/>
      <arg value="vbaccessout.xml"/>
      <arg value="vbaccess"/>
      <arg value="VegBankAccessPlotInsert2"/>
      <arg value="${rmiserver}"/>
      <arg value="../testdata/vbaccess-example2.xml"/>
    </exec>

    <!-- Test Loading a tnc plot 
    <exec executable="${build.test.integration.dir}/LoadPlotTest.sh">
      <env key="CLASSPATH" value="${cpath2}"/>
      <arg value="../testdata/tncplots-example.mdb"/>
      <arg value="BADL.102"/>
      <arg value="tncout.xml"/>
      <arg value="tnc"/>
      <arg value="TNCPlotInsert"/>
      <arg value="${rmiserver}"/>
      <arg value="../testdata/tnc-output.xml"/>
    </exec>
    -->
    
    <!-- Test Loading a native plot -->
    <exec executable="${build.test.integration.dir}/LoadPlotTest.sh">
      <env key="CLASSPATH" value="${cpath2}"/>
      <arg value="../testdata/nativeDataSource.xml"/>
      <arg value="Fern-1"/>
      <arg value="nativeout.xml"/>
      <arg value="NativeXmlPlugin"/>
      <arg value="NativePlotInsert"/>
      <arg value="${rmiserver}"/>
      <arg value="../testdata/nativeDataSource.xml"/>
    </exec>
  
  </target>
</project>

