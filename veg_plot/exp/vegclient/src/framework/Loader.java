/**
 *
 * @author @author@ 
 * @version @release@ 
 *
 *     '$Author: harris $'
 *     '$Date: 2001-10-10 18:12:41 $'
 *     '$Revision: 1.1 $'
 */
package vegclient.framework;

import java.io.*;
import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

import vegclient.framework.*;
import vegclient.datarequestor.*;

public class Loader extends javax.swing.JFrame {
    
    //the vector that contains the names of the plots included in this project
    private Vector plotNameVector = new Vector();
    private Vector selectedPlotsVector = new Vector();
    //the project file loaded by the user
    private String projectFile = null;
    
    ProjectManager manager = new ProjectManager();
    DataExchangeClient dec = new DataExchangeClient();
    ClientFramework framework = new ClientFramework();

    /** Creates new form Loader */
    public Loader() {
        initComponents ();
        pack ();
        setSize(440,500);
        setTitle("Loader -- build: @release@");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        mainPane = new javax.swing.JPanel();
        topPane = new javax.swing.JPanel();
        fileSelectPane = new javax.swing.JPanel();
        fileSelector = new javax.swing.JButton();
        bufferPane1 = new javax.swing.JPanel();
        selectedFileTextArea = new javax.swing.JTextField();
        projectNamePane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        bufferPane2 = new javax.swing.JPanel();
        projectNameTextArea = new javax.swing.JTextField();
        projectDescriptionPane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        bufferPane3 = new javax.swing.JPanel();
        projectDescriptionTextArea = new javax.swing.JTextField();
        middlePane = new javax.swing.JPanel();
        scrollerLabelePane = new javax.swing.JPanel();
        availablePlotslabel = new javax.swing.JLabel();
        chosenPlotsLabel = new javax.swing.JLabel();
        scrollerContainerPane = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectablePlotsList = new JList(plotNameVector);
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedPlotsList = new javax.swing.JList();
        bottomPane = new javax.swing.JPanel();
        plotSelectionPane = new javax.swing.JPanel();
        entireProjectRadio = new javax.swing.JRadioButton();
        selectIndividualPlotsRadio = new javax.swing.JRadioButton();
        uploadButtonPane = new javax.swing.JPanel();
        loadLocalButton = new javax.swing.JButton();
        uploadCentralServerButton = new javax.swing.JButton();
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        
        mainPane.setLayout(new javax.swing.BoxLayout(mainPane, javax.swing.BoxLayout.Y_AXIS));
        
        topPane.setLayout(new javax.swing.BoxLayout(topPane, javax.swing.BoxLayout.Y_AXIS));
        
        topPane.setPreferredSize(new java.awt.Dimension(309, 40));
        topPane.setMinimumSize(new java.awt.Dimension(275, 40));
        fileSelectPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        
        fileSelectPane.setPreferredSize(new java.awt.Dimension(282, 16));
        fileSelector.setForeground(java.awt.Color.blue);
        fileSelector.setFont(new java.awt.Font("Default", 0, 11));
        fileSelector.setText("Select Project");
        fileSelector.setMaximumSize(new java.awt.Dimension(110, 29));
        fileSelector.setMinimumSize(new java.awt.Dimension(110, 29));
        fileSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSelectorActionPerformed(evt);
            }
        });
        
        fileSelectPane.add(fileSelector);
        
        bufferPane1.setPreferredSize(new java.awt.Dimension(22, 10));
        fileSelectPane.add(bufferPane1);
        
        selectedFileTextArea.setBackground(java.awt.Color.pink);
        selectedFileTextArea.setAlignmentX(1.0F);
        selectedFileTextArea.setPreferredSize(new java.awt.Dimension(220, 22));
        selectedFileTextArea.setMinimumSize(new java.awt.Dimension(150, 16));
        fileSelectPane.add(selectedFileTextArea);
        
        topPane.add(fileSelectPane);
        
        projectNamePane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 12, 1));
        
        projectNamePane.setPreferredSize(new java.awt.Dimension(309, 10));
        projectNamePane.setMinimumSize(new java.awt.Dimension(244, 10));
        jLabel1.setText("Project Name:");
        jLabel1.setForeground(java.awt.Color.blue);
        jLabel1.setFont(new java.awt.Font("Times", 0, 11));
        projectNamePane.add(jLabel1);
        
        bufferPane2.setPreferredSize(new java.awt.Dimension(32, 10));
        projectNamePane.add(bufferPane2);
        
        projectNameTextArea.setBackground(java.awt.Color.pink);
        projectNameTextArea.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        projectNameTextArea.setAlignmentX(0.0F);
        projectNameTextArea.setPreferredSize(new java.awt.Dimension(220, 22));
        projectNameTextArea.setMinimumSize(new java.awt.Dimension(150, 16));
        projectNamePane.add(projectNameTextArea);
        
        topPane.add(projectNamePane);
        
        projectDescriptionPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 12, 1));
        
        projectDescriptionPane.setPreferredSize(new java.awt.Dimension(309, 10));
        projectDescriptionPane.setMinimumSize(new java.awt.Dimension(244, 10));
        jLabel2.setText("Project Description:");
        jLabel2.setForeground(java.awt.Color.blue);
        jLabel2.setFont(new java.awt.Font("Times", 0, 11));
        projectDescriptionPane.add(jLabel2);
        
        bufferPane3.setPreferredSize(new java.awt.Dimension(1, 10));
        bufferPane3.setMinimumSize(new java.awt.Dimension(0, 0));
        projectDescriptionPane.add(bufferPane3);
        
        projectDescriptionTextArea.setBackground(java.awt.Color.pink);
        projectDescriptionTextArea.setPreferredSize(new java.awt.Dimension(220, 22));
        projectDescriptionTextArea.setMinimumSize(new java.awt.Dimension(150, 16));
        projectDescriptionPane.add(projectDescriptionTextArea);
        
        topPane.add(projectDescriptionPane);
        
        mainPane.add(topPane);
        
        middlePane.setLayout(new javax.swing.BoxLayout(middlePane, javax.swing.BoxLayout.Y_AXIS));
        
        middlePane.setBorder(new javax.swing.border.EtchedBorder());
        scrollerLabelePane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        
        scrollerLabelePane.setPreferredSize(new java.awt.Dimension(215, 15));
        scrollerLabelePane.setMinimumSize(new java.awt.Dimension(215, 15));
        availablePlotslabel.setText("                  Available Plots");
        availablePlotslabel.setForeground(java.awt.Color.blue);
        availablePlotslabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        availablePlotslabel.setFont(new java.awt.Font("Times", 0, 11));
        scrollerLabelePane.add(availablePlotslabel);
        
        chosenPlotsLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        chosenPlotsLabel.setText("                 Plots To Upload");
        chosenPlotsLabel.setForeground(java.awt.Color.blue);
        chosenPlotsLabel.setFont(new java.awt.Font("Times", 0, 11));
        chosenPlotsLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        scrollerLabelePane.add(chosenPlotsLabel);
        
        middlePane.add(scrollerLabelePane);
        
        scrollerContainerPane.add(jPanel16);
        
        jScrollPane1.setPreferredSize(new java.awt.Dimension(150, 200));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(150, 200));
        selectablePlotsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectablePlotsListMouseClicked(evt);
            }
        });
        
        jScrollPane1.setViewportView(selectablePlotsList);
        
        scrollerContainerPane.add(jScrollPane1);
        
        jScrollPane2.setPreferredSize(new java.awt.Dimension(150, 200));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(150, 200));
        selectedPlotsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectedPlotsListMouseClicked(evt);
            }
        });
        
        jScrollPane2.setViewportView(selectedPlotsList);
        
        scrollerContainerPane.add(jScrollPane2);
        
        middlePane.add(scrollerContainerPane);
        
        mainPane.add(middlePane);
        
        bottomPane.setLayout(new javax.swing.BoxLayout(bottomPane, javax.swing.BoxLayout.Y_AXIS));
        
        plotSelectionPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        
        plotSelectionPane.setPreferredSize(new java.awt.Dimension(300, 10));
        plotSelectionPane.setMinimumSize(new java.awt.Dimension(300, 10));
        entireProjectRadio.setForeground(java.awt.Color.blue);
        entireProjectRadio.setFont(new java.awt.Font("Times", 0, 11));
        entireProjectRadio.setText("Select Entire Project");
        entireProjectRadio.setName("selectEntireProject");
        entireProjectRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entireProjectRadioActionPerformed(evt);
            }
        });
        
        plotSelectionPane.add(entireProjectRadio);
        
        selectIndividualPlotsRadio.setSelected(true);
        selectIndividualPlotsRadio.setForeground(java.awt.Color.blue);
        selectIndividualPlotsRadio.setFont(new java.awt.Font("Times", 0, 11));
        selectIndividualPlotsRadio.setText("Select Individual Plots");
        selectIndividualPlotsRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectIndividualPlotsRadioActionPerformed(evt);
            }
        });
        
        plotSelectionPane.add(selectIndividualPlotsRadio);
        
        bottomPane.add(plotSelectionPane);
        
        uploadButtonPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 15));
        
        loadLocalButton.setForeground(java.awt.Color.blue);
        loadLocalButton.setFont(new java.awt.Font("Times", 0, 11));
        loadLocalButton.setText("Load Local DB");
        loadLocalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadLocalButtonActionPerformed(evt);
            }
        });
        
        uploadButtonPane.add(loadLocalButton);
        
        uploadCentralServerButton.setForeground(java.awt.Color.blue);
        uploadCentralServerButton.setFont(new java.awt.Font("Times", 0, 11));
        uploadCentralServerButton.setText("Upload Central DB");
        uploadCentralServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadCentralServerButtonActionPerformed(evt);
            }
        });
        
        uploadButtonPane.add(uploadCentralServerButton);
        
        bottomPane.add(uploadButtonPane);
        
        mainPane.add(bottomPane);
        
        getContentPane().add(mainPane, java.awt.BorderLayout.CENTER);
        
    }//GEN-END:initComponents
    /**
     * method that will handle the uploading of a plot package to the 
     * central vegetation plots database server
     */
    private void uploadCentralServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadCentralServerButtonActionPerformed
        // Add your handling code here:
        String servlet = "/harris/servlet/DataExchangeServlet";
     	String protocol = "http://";
     	String host = "dev.nceas.ucsb.edu";
     	String server = protocol + host + servlet;
     	//String filename = "../test.dat";
     	String parameterString = "?exchangeType=upload&submitter=harris&"
        +"password=jasmine&file=../test.dat";
         
      	//call the method to upload the file to the database   
        dec.uploadFile(servlet, protocol, host, server, projectFile);
    }//GEN-LAST:event_uploadCentralServerButtonActionPerformed

    /**
     * method that handles the loading, to the local database, the plots 
     * selected in this interface
     */
  private void loadLocalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadLocalButtonActionPerformed
  if (projectFile != null)
  {
    try
    {
        DB db = new DB(projectFile);
        for (int i=0; i< selectedPlotsVector.size(); i++)
        {
            db.insertPlot( selectedPlotsVector.elementAt(i).toString() );
        }
        
        //now ask the user to make the snap shot
        manager.postLoacalDBLoadOption();
    }
    catch (Exception e)
    {
        System.out.println("Caught Exception: "+e.getMessage() ); 
        e.printStackTrace();
    }
  }
  }//GEN-LAST:event_loadLocalButtonActionPerformed
    /**
     * mthod that determines if the radio button to select the individual plot upload 
     * is selected and if so will remove the entire project of plots from the 
     * selected list
     * 
     */
  private void selectIndividualPlotsRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectIndividualPlotsRadioActionPerformed
// Add your handling code here:
  System.out.println("project selected"+ evt.getActionCommand() );
  //System.out.println(" "+getSelectionStringStatus(entireProjectRadio) );
  if (selectIndividualPlotsRadio.isSelected() == true )
  {
      entireProjectRadio.setSelected(false);
      //if the entire project button is selected then update
      //the selected vector with all the plots and setup the 
      //JList
      selectedPlotsVector.removeAllElements();
      selectedPlotsList.setListData(selectedPlotsVector);
      selectedPlotsList.validate();
  }
  else
  {
      //send a debug notice that the button is already selected
      manager.debug(0, "button already selected");
  }
      
  
  }//GEN-LAST:event_selectIndividualPlotsRadioActionPerformed

  private void entireProjectRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entireProjectRadioActionPerformed
// Add your handling code here:
      System.out.println("project selected"+ evt.getActionCommand() );
      //System.out.println(" "+getSelectionStringStatus(entireProjectRadio) );
      if (entireProjectRadio.isSelected() == true )
      {
         selectIndividualPlotsRadio.setSelected(false);
         //if the entire project button is selected then update
         //the selected vector with all the plots and setup the 
         //JList
          for (int i=0; i< plotNameVector.size(); i++)
          {
              selectedPlotsVector.addElement( plotNameVector.elementAt(i) );
          }
          selectedPlotsList.setListData(selectedPlotsVector);
          selectedPlotsList.validate();
      }
      else
      {
          selectIndividualPlotsRadio.setSelected(true);
          selectedPlotsVector.removeAllElements();
          selectedPlotsList.setListData(selectedPlotsVector);
          selectedPlotsList.validate();
          System.out.println(" plot vector "+ plotNameVector.toString() );
      }
  }//GEN-LAST:event_entireProjectRadioActionPerformed

  private void selectedPlotsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedPlotsListMouseClicked
// Add your handling code here:
     int index = selectedPlotsList.locationToIndex(evt.getPoint());
     //System.out.println("removing: "+index+" out of: "+chosenItems.size() );
     //System.out.println( " the value should be: "+ chosenItems.elementAt(index));
     selectedPlotsVector.remove( selectedPlotsVector.elementAt(index) );
     selectedPlotsVector.trimToSize();
     selectedPlotsList.setListData(selectedPlotsVector);
     selectedPlotsList.validate();
     
      
  }//GEN-LAST:event_selectedPlotsListMouseClicked

  private void selectablePlotsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectablePlotsListMouseClicked
        //System.out.println("test");
        int index = selectablePlotsList.locationToIndex(evt.getPoint());
        //System.out.println("Double clicked on Item " + index);
        
        
        selectedPlotsVector.addElement( plotNameVector.elementAt(index) );
        selectedPlotsList.setListData( selectedPlotsVector);
        selectedPlotsList.validate();
  }//GEN-LAST:event_selectablePlotsListMouseClicked

    /**
     * method that handles the selection process of a file
     */
  private void fileSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSelectorActionPerformed
    // Add your handling code here:
    projectFile = fileChooser(evt, selectedFileTextArea);
    
		if (projectFile.indexOf("xml") <= 0 )
    {
        manager.debug( 0, "Not an XML file");
    }
    //if an xml file process the file as a veg project xml file
    else
    {
        try
        {
            VegProject project = new VegProject(projectFile);
            //update the project name and description
            projectNameTextArea.setText( project.getProjectName() );
            projectDescriptionTextArea.setText( project.getProjectDescription() );
            //update the vector that contains all the plot names
            plotNameVector = project.getPlotNames();
            
            selectablePlotsList.setListData( plotNameVector );
            selectablePlotsList.validate();
        }
        catch (Exception e)
        {
             System.out.println("exception caught: "+e.getMessage() );
        }
    }
      
  }//GEN-LAST:event_fileSelectorActionPerformed

  
  		 
	/**
	 * method that updates a textarea with the name of the file that is chosen
	 * @param e -- the action event
	 * @param textFieldName -- the JTextArea that should be updated with the name
	 * of the chosen file
	 *
	 */
	public String fileChooser(ActionEvent e,  JTextField textFieldName) 
	{
            
                String fileName = framework.fileChooser();
                
                //make sure that something was chosen
                if ( fileName  != null) {
                    textFieldName.setText(fileName);
                }
		else
                {
                    textFieldName.setText("Guess there is no file");
                }
                
		//System.out.println( e.getActionCommand()+" "+e.paramString() );
		//FileDialog d = new FileDialog(
		//Loader.this,
		//"what file do you want");
		//d.setFile("*.xml");
		//d.setDirectory(".");
		//d.show();
		//String yourfile = "*.*";
		
                return( fileName );
        }
	
        
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        //System.exit (0);
        this.dispose();
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    public static void main (String args[]) {
        new Loader ().show ();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPane;
    private javax.swing.JPanel topPane;
    private javax.swing.JPanel fileSelectPane;
    private javax.swing.JButton fileSelector;
    private javax.swing.JPanel bufferPane1;
    private javax.swing.JTextField selectedFileTextArea;
    private javax.swing.JPanel projectNamePane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel bufferPane2;
    private javax.swing.JTextField projectNameTextArea;
    private javax.swing.JPanel projectDescriptionPane;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel bufferPane3;
    private javax.swing.JTextField projectDescriptionTextArea;
    private javax.swing.JPanel middlePane;
    private javax.swing.JPanel scrollerLabelePane;
    private javax.swing.JLabel availablePlotslabel;
    private javax.swing.JLabel chosenPlotsLabel;
    private javax.swing.JPanel scrollerContainerPane;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList selectablePlotsList;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList selectedPlotsList;
    private javax.swing.JPanel bottomPane;
    private javax.swing.JPanel plotSelectionPane;
    private javax.swing.JRadioButton entireProjectRadio;
    private javax.swing.JRadioButton selectIndividualPlotsRadio;
    private javax.swing.JPanel uploadButtonPane;
    private javax.swing.JButton loadLocalButton;
    private javax.swing.JButton uploadCentralServerButton;
    // End of variables declaration//GEN-END:variables
    
}
