/**
 *
 *
 *  Authors: @author@
 *  Release: @release@
 *	
 *  '$Author: harris $'
 *  '$Date: 2001-10-10 18:12:43 $'
 * 	'$Revision: 1.1 $'
 */
package vegclient.framework;

import java.io.IOException;
import java.io.*;
import java.util.*;
import javax.swing.*;


import vegclient.framework.*;


public class StyleSheetInterface extends javax.swing.JFrame {
    
    /** Creates new form StyleSheetInterface */
    public StyleSheetInterface() {
        setTitle("StyleSheetInterface build @release@");
        chooseableItems.addElement("Project Name");
        chooseableItems.addElement("Project Description");
        chooseableItems.addElement("Start Date");
        chooseableItems.addElement("Stop Date");
        chooseableItems.addElement("Country");
        chooseableItems.addElement("County");
        chooseableItems.addElement("State");
        chooseableItems.addElement("Surface Geology");
        chooseableItems.addElement("Slope Aspect");
        chooseableItems.addElement("Slope Gradient");
        chooseableItems.addElement("Latitude");
        chooseableItems.addElement("Longitude");
        chooseableItems.addElement("Community Name");
        chooseableItems.addElement("Elevation");
        chooseableItems.addElement("Area");
        chooseableItems.addElement("Shape");
        chooseableItems.addElement("Principal Investagator");
       
        initComponents();
        setSize(400, 300);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
            mainPane = new javax.swing.JPanel();
            topPanel = new javax.swing.JPanel();
            speciesOnlyRadioButton = new javax.swing.JRadioButton();
            middlePanel = new javax.swing.JPanel();
            chooserPane = new javax.swing.JScrollPane();
            chooseableList = new JList(chooseableItems);
            chosenPane = new javax.swing.JScrollPane();
            chosenList = new JList(chosenItems);
            bottomPanel = new javax.swing.JPanel();
            viewDataButton = new java.awt.Button();
            
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent evt) {
                    exitForm(evt);
                }
            });
            
            mainPane.setLayout(new javax.swing.BoxLayout(mainPane, javax.swing.BoxLayout.Y_AXIS));
            
            topPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 12, 20));
            
            speciesOnlyRadioButton.setForeground(java.awt.Color.blue);
            speciesOnlyRadioButton.setFont(new java.awt.Font("Default", 0, 12));
            speciesOnlyRadioButton.setText("Exclude Plots that have no taxa observed");
            topPanel.add(speciesOnlyRadioButton);
            
            mainPane.add(topPanel);
          
          middlePanel.setLayout(new javax.swing.BoxLayout(middlePanel, javax.swing.BoxLayout.X_AXIS));
              
              chooserPane.setPreferredSize(new java.awt.Dimension(200, 100));
              chooseableList.addMouseListener(new java.awt.event.MouseAdapter() {
                  public void mouseClicked(java.awt.event.MouseEvent evt) {
                      mouseChooserClicked(evt);
                  }
              });
              
              chooserPane.setViewportView(chooseableList);
              
              middlePanel.add(chooserPane);
            
            chosenPane.setPreferredSize(new java.awt.Dimension(200, 100));
              chosenList.addMouseListener(new java.awt.event.MouseAdapter() {
                  public void mouseClicked(java.awt.event.MouseEvent evt) {
                      chosenListClicked(evt);
                  }
              });
              
              chosenPane.setViewportView(chosenList);
              
              middlePanel.add(chosenPane);
            
            mainPane.add(middlePanel);
          
          bottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));
            
            viewDataButton.setFont(new java.awt.Font("Default", 0, 12));
            viewDataButton.setLabel("view data");
            viewDataButton.setName("view data");
            viewDataButton.setBackground(new java.awt.Color(204, 204, 204));
            viewDataButton.setForeground(java.awt.Color.blue);
            viewDataButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    handleViewDataButton(evt);
                }
            });
            
            bottomPanel.add(viewDataButton);
            
            mainPane.add(bottomPanel);
          
          getContentPane().add(mainPane, java.awt.BorderLayout.CENTER);
        
        pack();
    }//GEN-END:initComponents

    /**
     * method that handles the clicking on an item in the chosen list 
     * which is done in order to remove an element from the list
     *
     * @param evt -- the mouse event to trigger the removal
     */
  private void chosenListClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chosenListClicked
     // Add your handling code here:
     int index = chosenList.locationToIndex(evt.getPoint());
     System.out.println("removing: "+index+" out of: "+chosenItems.size() );
     System.out.println( " the value should be: "+ chosenItems.elementAt(index));
     chosenItems.remove(chosenItems.elementAt(index) );
     chosenItems.trimToSize();
     chosenList.setListData(chosenItems);
     chosenList.validate();
     
     
  }//GEN-LAST:event_chosenListClicked
  /**
   * method that takes the chosen list and passes the elements to 
   * style sheet generation class to generate the style sheet
   */
  private void handleViewDataButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleViewDataButton
      Hashtable styleHash = new Hashtable();
      
      for (int i=0; i< chosenItems.size(); i++)
      {
          //System.out.println( chosenItems.elementAt(i) );
          if ( getAttributeName( chosenItems.elementAt(i).toString() ) != null )
          {
            styleHash.put(chosenItems.elementAt(i),
                getAttributeName( chosenItems.elementAt(i).toString() ) );
      
          }
          else 
          {
              System.out.println( "getAttributeName returned null");
          }
         
      }
      
      
       System.out.println("updated hash: "+ styleHash );
      //create the stylesheet if there a number of attributes in the styleHash
       StringBuffer sb = new StringBuffer();
       if ( styleHash.size() > 0)
       {
           System.out.println("printing the style sheet");
           StyleSheet style = new StyleSheet(sb, styleHash);
       }
       HtmlViewer hv = new HtmlViewer();
       hv.show();
       //hv.showData();
       hv.showData( "summary.xml"," autoGenerate.xsl", "text/html" );
  }//GEN-LAST:event_handleViewDataButton
  /**

   * method that takes an element name (a name for an attribute in the 
   * plots database like: Evevation and translate it into the attribute
   * name so that the element can be parsed from an xml file
   * @param element -- the element name as used in the interface like
   *    Elevation and Slope Aspect
   */
  private String getAttributeName(String element)
  {
      String returnString = null;
      if (element.trim().equals("Elevation"))
        returnString = "elevationValue";
      else if ( element.trim().equals("Slope Aspect") )
        returnString = "slopeAspect";
       else if ( element.trim().equals("Slope Gradient") )
        returnString = "slopeGadient";
       else if ( element.trim().equals("State") )
        returnString = "state";
       else if ( element.trim().equals("Country") )
        returnString = "country";
       else if ( element.trim().equals("County") )
        returnString = "county";
       else if ( element.trim().equals("Start Date") )
        returnString = "plotObservation/plotStartDate";
       else if ( element.trim().equals("Stop Date") )
        returnString = "plotObservation/plotStopDate";
       else if ( element.trim().equals("Surface Geology") )
        returnString = "surfGeo";
       else if ( element.trim().equals("Latitude") )
        returnString = "origLat";
       else if ( element.trim().equals("Longitude") )
        returnString = "origLong";
       else if ( element.trim().equals("Area") )
        returnString = "plotArea";
       else if ( element.trim().equals("Shape") )
        returnString = "plotShape";
      else
        returnString = null;
      
      return(returnString);
  }
  
  
    private void mouseChooserClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseChooserClicked
        // Add your handling code here:
        //System.out.println("test");
        int index = chooseableList.locationToIndex(evt.getPoint());
        //System.out.println("Double clicked on Item " + index);
        
        
        chosenItems.addElement( chooseableItems.elementAt(index) );
        chosenList.setListData( chosenItems);
        chosenList.validate();
        
    }//GEN-LAST:event_mouseChooserClicked
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        //System.exit(0);
        this.dispose();
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new StyleSheetInterface().show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPane;
    private javax.swing.JPanel topPanel;
    private javax.swing.JRadioButton speciesOnlyRadioButton;
    private javax.swing.JPanel middlePanel;
    private javax.swing.JScrollPane chooserPane;
    private javax.swing.JList chooseableList;
    private javax.swing.JScrollPane chosenPane;
    private javax.swing.JList chosenList;
    private javax.swing.JPanel bottomPanel;
    private java.awt.Button viewDataButton;
    // End of variables declaration//GEN-END:variables
    private Vector chooseableItems = new Vector();
    //vector that stores the chosen elements
    private Vector chosenItems = new Vector();
}
