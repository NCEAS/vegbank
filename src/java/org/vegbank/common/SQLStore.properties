# Contains SQL fragments that can be called by passing parameters into the 
# GenericDispatcher Action
#
# The names of the fields IN the SELECT clauses must match the case of the 
# fieldNames IN the corresponding model beans ( org.vegbank.common.model.*).
# The first character of a field name must be lowercase unless the entire fieldname
# is uppercase ( I have no idea why ?? ).
#
# The {x}'s are placeholders that are replaced IN the java code before being run 
# against the database.
#
# CAVEAT!!
# Do not put parentheses within other parentheses
# If a comma comes after a field name, make it right after the field name, ie 'party_id,' not 'party_id  ,'

observation_short=SELECT authorobscode, observation_id, plot_id  FROM observation
empty=
wherestate=observation_id={0} and plot_id={1}
party=SELECT party_id, accessioncode, salutation, surname, givenname, middlename, \
 	organizationname, contactinstructions, email FROM party WHERE partypublic=true
where_party_pk=party_id IN ({0})
party_simple=SELECT party_id, accessioncode, salutation, surname, givenname, middlename, \
 	organizationname, contactinstructions, email FROM party 
# covermethod=SELECT covermethod_id, reference_id, covertype, coverindex.coverindex_id, \
#	coverindex.covercode, coverindex.upperlimit, coverindex.lowerlimit, \
#	coverindex.coverpercent, coverindex.indexdescription \
#	FROM covermethod, coverindex
# stratummethod=SELECT stratummethodname FROM stratummethod
# covermethod=SELECT covertype FROM covermethod
stratummethod=SELECT stratummethod_id, reference_id, stratummethodname, stratummethoddescription, accessioncode, stratumassignment, \
      (select shortName from reference where reference.reference_id=stratummethod.reference_id) AS reference_id_transl  \
      FROM  stratummethod WHERE true
where_stratummethod_pk=stratummethod_id IN ({0})
stratumtype=SELECT stratumtype_id, \
      stratummethod_id, \
      stratumindex, \
      stratumname, \
      stratumdescription \
       FROM stratumtype  
address=SELECT address_id, \
      party_id, \
      organization_id, \
      orgposition, \
      email, \
      deliverypoint, \
      city, \
      administrativearea, \
      postalcode, \
      country, \
      currentflag, \
      addressstartdate \
       FROM address  
where_address_pk=address_id IN ({0})
reference=SELECT reference_id, \
      shortname, \
      referencetype, \
      title, \
      titlesuperior, \
      pubdate, \
      accessdate, \
      conferencedate, \
      referencejournal_id, (select journal from referenceJournal where referenceJournal.referenceJournal_ID=reference.referenceJournal_ID) AS referencejournal_id_transl, \
      volume, \
      issue, \
      pagerange, \
      totalpages, \
      publisher, \
      publicationplace, \
      isbn, \
      edition, \
      numberofvolumes, \
      chapternumber, \
      reportnumber, \
      communicationtype, \
      degree, \
      url, \
      doi, \
      additionalinfo, \
      accessioncode \
       FROM reference  WHERE true
where_reference_pk=reference_id IN ({0})
referencealtident=SELECT referencealtident_id, \
      reference_id, \
      system, \
      identifier \
       FROM referencealtident  
where_referencealtident_pk=referencealtident_id IN ({0})
referencecontributor=SELECT referencecontributor_id, \
      reference_id, \
      referenceparty_id, \
      (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END FROM referenceparty WHERE referenceparty.referenceparty_id=referencecontributor.referenceparty_id) AS referenceparty_id_transl, \
      roletype, \
      position \
       FROM referencecontributor WHERE true 
where_referencecontributor_pk=referencecontributor_id IN ({0})
referenceparty=SELECT referenceparty_id, \
      type, \
      positionname, \
      salutation, \
      givenname, \
      surname, \
      suffix, \
      organizationname, \
      currentparty_id \
       FROM referenceparty  
where_referenceparty_pk=referenceparty_id IN ({0})
referencejournal=SELECT referencejournal_id, \
      journal, \
      issn, \
      abbreviation \
       FROM referencejournal  
where_referencejournal_pk=referencejournal_id IN ({0})
coverindex=SELECT coverindex_id, \
      covermethod_id, \
      covercode, \
      upperlimit, \
      lowerlimit, \
      coverpercent, \
      indexdescription \
       FROM coverindex  
where_coverindex_pk=coverindex_id IN ({0})
covermethod=SELECT covermethod_id, \
      reference_id, \
      (select shortName from reference where reference.reference_id=covermethod.reference_id) as reference_id_transl, \
      covertype, \
      coverestimationmethod, \
      accessioncode \
       FROM covermethod  WHERE true
where_covermethod_pk=covermethod_id IN ({0})
# just simple list of observations, include FKs so that can perform where operations 
observation_count=SELECT COUNT(observation_id) AS count_observations FROM observation
where_plantconcept_observation_complex=observation_id IN (select observation_ID from taxonobservation \
  INNER JOIN taxonInterpretation ON taxonobservation.taxonobservation_ID=taxonInterpretation.taxonobservation_ID \
  WHERE taxonInterpretation.plantConcept_ID={0})
observation=SELECT observation_id, \
      previousobs_id, \
      plot_id, \
      project_id, \
      authorobscode, \
      obsstartdate, \
      obsenddate, \
      dateaccuracy, \
      covermethod_id, \
      stratummethod_id, \
      stemsizelimit, \
      methodnarrative, \
      taxonobservationarea, \
      coverdispersion, \
      autotaxoncover, \
      stemobservationarea, \
      stemsamplemethod, \
      originaldata, \
      effortlevel, \
      floristicquality, \
      bryophytequality, \
      lichenquality, \
      observationnarrative, \
      landscapenarrative, \
      homogeneity, \
      phenologicaspect, \
      representativeness, \
      basalarea, \
      hydrologicregime, \
      soilmoistureregime, \
      soildrainage, \
      watersalinity, \
      waterdepth, \
      shoredistance, \
      soildepth, \
      organicdepth, \
      percentbedrock, \
      percentrockgravel, \
      percentwood, \
      percentlitter, \
      percentbaresoil, \
      percentwater, \
      percentother, \
      nameother, \
      standmaturity, \
      successionalstatus, \
      treeht, \
      shrubht, \
      fieldht, \
      nonvascularht, \
      submergedht, \
      treecover, \
      shrubcover, \
      fieldcover, \
      nonvascularcover, \
      floatingcover, \
      submergedcover, \
      dominantstratum, \
      growthform1type, \
      growthform2type, \
      growthform3type, \
      growthform1cover, \
      growthform2cover, \
      growthform3cover, \
      soiltaxon_id, \
      soiltaxonsrc, \
      notespublic, \
      notesmgt, \
      revisions, \
	accessioncode \
       FROM observation  
where_observation_pk=observation_id IN ({0})
where_taxonimportance_obsid_addsort=observation_id IN ({0}) ORDER BY observation_id, (CASE WHEN stratumHeight is null THEN -9999 ELSE stratumHeight END) DESC, stratum_id, cover DESC
where_observation_ac=LOWER(observation.accessioncode) IN ({0})
plantconcept=SELECT plantconcept_id, \
	plantname_id, \
	(plantname) as plantname_id_transl, \
	reference_id, \
	(SELECT shortname from reference where reference.reference_id=plantconcept.reference_id) as reference_id_transl, \
	plantname, \
	plantdescription, \
	accessioncode \
	FROM plantconcept
where_plantconcept_pk=plantconcept_id IN ({0})
where_plantconcept_mpq=plantconcept_id IN (SELECT pu.plantconcept_id FROM plantusage AS pu, plantstatus AS ps WHERE ps.plantstatus_id=pu.plantstatus_id AND {0})

# The following are used by web/forms/PlantQuery.jsp
plantstatus_party=select party_ID, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END FROM party WHERE party.party_id=plantstatus.party_id) as party_id_transl from plantstatus group by party_ID
plantstatus_plantlevel=select plantlevel from plantstatus group by plantlevel
plantusage_classsystem=select classsystem from plantusage group by classsystem
where_plantstatus_daterange=(ps.startdate >= {0} AND (ps.stopdate IS NULL OR ps.stopdate <= {0}))

plantstatus=SELECT plantstatus_id, \
      plantconcept_id, \
      reference_id, \
      (SELECT shortname from reference where reference.reference_id=plantstatus.reference_id) as reference_id_transl, \
      plantconceptstatus, \
      plantparent_id, \
      (SELECT plantname.plantname FROM plantname, plantconcept WHERE plantname.plantname_id=plantconcept.plantname_id AND \
      plantconcept.plantconcept_id=plantstatus.plantparent_id) as plantparent_id_transl, \
      plantlevel, \
      startdate, \
      stopdate, \
      plantpartycomments, \
      party_id, \
      (SELECT accessioncode FROM party WHERE party.party_id=plantstatus.party_id) AS party_accessioncode, \
      (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END \
      FROM party WHERE party.party_id=plantstatus.party_id) as party_id_transl \
      FROM plantstatus WHERE true 
where_plantstatus_pk=plantstatus_id IN ({0})
plantusage_std=SELECT plantusage_id, \
      plantname_id, \
      plantname AS plantname_id_transl, \
      plantconcept_id, \
      usagestart, \
      usagestop, \
      plantnamestatus, \
      classsystem, \
      party_id, \
      plantstatus_id \
      FROM plantusage WHERE lower(plantnamestatus)='standard'
plantcorrelation=SELECT plantcorrelation_id, \
      plantstatus_id, \
      plantconcept_id, \
      (SELECT plantname.plantname FROM plantname, plantconcept WHERE plantname.plantname_id=plantconcept.plantname_id AND \
      plantconcept.plantconcept_id=plantcorrelation.plantconcept_id) as plantconcept_id_transl, \
      plantconvergence, \
      correlationstart, \
      correlationstop \
      FROM plantcorrelation WHERE true 
commcorrelation=SELECT commcorrelation_id, \
      commstatus_id, \
      commconcept_id, \
      (SELECT commname.commname FROM commname, commconcept WHERE commname.commname_id=commconcept.commname_id AND \
      commconcept.commconcept_id=commcorrelation.commconcept_id) as commconcept_id_transl, \
      commconvergence, \
      correlationstart, \
      correlationstop \
      FROM commcorrelation WHERE true 

      
taxoninterpretation_summary=SELECT taxoninterpretation_id, \
	taxonobservation_id, \
	reference_ID, \
	party_ID, \
	plantconcept_ID, \
	interpretationDate, \
	interpretationType, \
	plantname_ID, \
	taxonFit, \
	taxonConfidence \
	FROM taxonInterpretation
where_taxonobservation_pk=taxonobservation_id IN ({0})
where_taxonimportance_taxonobservation_fk=taxonimportance.taxonobservation_id IN ({0})
##used in plant query results: MTL Oct 11 2004:
where_accessioncode=LOWER(accessioncode)=LOWER(''{0}'')
where_ac=LOWER(accessioncode) IN ({0})
plot=SELECT plot_id, \
      authorplotcode, \
      reference_id, \
      parent_id, \
      reallatitude, \
      reallongitude, \
      locationaccuracy, \
      confidentialitystatus, \
      confidentialityreason, \
      latitude, \
      longitude, \
      authore, \
      authorn, \
      authorzone, \
      authordatum, \
      authorlocation, \
      locationnarrative, \
      azimuth, \
      dsgpoly, \
      shape, \
      area, \
      standsize, \
      placementmethod, \
      permanence, \
      layoutnarrative, \
      elevation, \
      elevationaccuracy, \
      elevationrange, \
      slopeaspect, \
      minslopeaspect, \
      maxslopeaspect, \
      slopegradient, \
      minslopegradient, \
      maxslopegradient, \
      topoposition, \
      landform, \
      surficialdeposits, \
      rocktype, \
      notespublic, \
      notesmgt, \
      revisions \
       FROM plot  
where_plot_pk=plot_id IN ({0})
project=SELECT project_id, \
      projectname, \
      projectdescription, \
      accessioncode, \
      startdate, \
      stopdate \
       FROM project  
where_project_pk=project_id IN ({0})
projectcontributor=SELECT projectcontributor_id, \
    project_id, \
    party_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END  FROM party WHERE party.party_id=projectcontributor.party_id) AS party_id_transl, \
    role_id, (select roleCode from aux_role where aux_role.role_id=projectcontributor.role_id) AS role_id_transl \
           FROM projectcontributor WHERE true
where_projectcontributor_pk=projectcontributor_id IN ({0})
telephone=SELECT telephone_id, \
      party_id, \
      phonenumber, \
      phonetype \
       FROM telephone  
where_telephone_pk=telephone_id IN ({0})
aux_role=SELECT role_id, \
      rolecode, \
      roledescription, \
	  accessioncode, \
      roleproject, \
      (CASE WHEN roleproject=1 THEN 'REQUIRED role' \
            WHEN roleproject=2 THEN 'Allowed role' \
            ELSE 'not allowed' END) AS roleproject_transl, \
      roleobservation, \
      (CASE WHEN roleobservation=1 THEN 'REQUIRED role' \
                  WHEN roleobservation=2 THEN 'Allowed role' \
            ELSE 'not allowed' END) AS roleobservation_transl, \
      roletaxonint, \
      (CASE WHEN roletaxonint=1 THEN 'REQUIRED role' \
                  WHEN roletaxonint=2 THEN 'Allowed role' \
            ELSE 'not allowed' END) AS roletaxonint_transl, \
      (CASE WHEN roleclassint=1 THEN 'REQUIRED role' \
                  WHEN roleclassint=2 THEN 'Allowed role' \
            ELSE 'not allowed' END) AS roleclassint_transl, \
      roleclassint \
      FROM aux_role  
where_aux_role_pk=role_id IN ({0})
where_aux_role_project=roleproject>={0}
where_aux_role_observation=roleobservation>={0}
where_aux_role_taxonint=roletaxonint>={0}
where_aux_role_classint=roleclassint>={0}
taxonobservation=SELECT taxonobservation_id, \
      observation_id, (select authorObsCode from observation where observation.observation_id=taxonobservation.observation_id) as observation_id_transl, \
      authorplantname, \
      reference_id, \
      (SELECT shortname from reference where reference.reference_id=taxonobservation.reference_id) as reference_id_transl, \
      taxoninferencearea, \
      accessioncode \
       FROM taxonobservation WHERE true
taxonobservation_join=SELECT taxonobservation_id, \
      o.observation_id, \
      authorplantname, \
      reference_id, \
      taxoninferencearea, \
      tobs.accessioncode \
       FROM taxonobservation tobs, observation o
where_join_obs_tobs_ac=o.observation_id=tobs.observation_id AND o.accessioncode=''{0}''
where_commconcept_pk=commconcept_id IN ({0})
commconcept=SELECT commconcept_id, commname_id, \
      (SELECT commname from commname where commname.commname_id=commconcept.commname_id) as commname_id_transl, \
      reference_id, \
      (SELECT shortname from reference where reference.reference_id=commconcept.reference_id) as reference_id_transl, \
      commdescription, accessioncode FROM commconcept

#######(select commlevel from commstatus where commstatus.commstatus_id = commusage.commstatus_id) as commlevel, \
where_commconcept_mpq=commconcept_id IN (SELECT cu.commconcept_id FROM commusage AS cu, commstatus AS cs WHERE cs.commstatus_id=cu.commstatus_id AND {0})


commconcept_forquery=SELECT commconcept_id, commname_id, \
	  commname, \
	  (select commlevel from commstatus where commstatus.commstatus_id = commusage.commstatus_id) as commlevel, \
	  party_id, \
	  (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END \
	  FROM party WHERE party.party_id=commusage.party_id) as party_id_transl \
	  FROM commusage WHERE true


where_commconcept_query=UPPER(commname) like UPPER(''{0}'')

commstatus=SELECT commstatus_id, \
      commconcept_id, \
      reference_id, \
      (SELECT shortname from reference where reference.reference_id=commstatus.reference_id) as reference_id_transl, \
      commconceptstatus, \
      commparent_id, \
      (SELECT commname FROM commname, commconcept WHERE commname.commname_id=commconcept.commname_id AND \
      commconcept.commconcept_id=commstatus.commparent_id) as commparent_id_transl, \
      commlevel, \
      startdate, \
      stopdate, \
      commpartycomments, \
      party_id, \
      (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END \
      FROM party WHERE party.party_id=commstatus.party_id) as party_id_transl \
      FROM commstatus WHERE true 
where_commstatus_pk=commstatus_id IN ({0})
commstatus_party=select party_ID, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END FROM party WHERE party.party_id=commstatus.party_id) as party_id_transl from commstatus group by party_ID
commstatus_commlevel=select commlevel from commstatus group by commlevel
commusage_classsystem=select classsystem from commusage group by classsystem

#the "cs" alias must be like that
where_commstatus_daterange=(cs.startdate >= {0} AND (cs.stopdate IS NULL OR cs.stopdate <= {0}))
commusage_std=SELECT commusage_id, \
      commname_id, \
      (SELECT commname from commname where commname.commname_id=commusage.commname_id) as commname_id_transl, \
      commconcept_id, \
      usagestart, \
      usagestop, \
      commnamestatus, \
      classsystem, \
      party_id, \
      commstatus_id \
      FROM commusage WHERE lower(commnamestatus)='standard'
total_bs=SELECT (select authorplantname from taxonobservation tobs where tobs.taxonobservation_id=ti.taxonobservation_id) as labeled, (select authorplantname from taxonobservation tobs where tobs.taxonobservation_id=ti.taxonobservation_id) as blah from taxoninterpretation ti

taxonobservation_summ=SELECT  COUNT(1) AS count_taxonobservation from taxonObservation
commclass_summ=SELECT COUNT(1) AS count_commclass FROM observation WHERE observation.observation_ID IN (SELECT commClass.observation_ID FROM commClass)
party_summ=SELECT COUNT(1) AS count_party FROM party
commconcept_summ=SELECT COUNT(1) AS count_commconcept FROM commconcept
plantconcept_summ=SELECT COUNT(1) AS count_plantconcept FROM plantconcept
observation_summ=SELECT COUNT(1) AS count_observation FROM observation
place_summ=SELECT Count(observation.OBSERVATION_ID) AS count_obs,  namedPlace.placeName AS region_name \
  FROM plot,namedplace,place,observation WHERE  namedPlace.NAMEDPLACE_ID = place.NAMEDPLACE_ID AND  plot.PLOT_ID = place.PLOT_ID AND  plot.PLOT_ID = observation.PLOT_ID AND namedPlace.placeSystem='region|state|province' \
  GROUP BY namedPlace.NAMEDPLACE_ID, namedPlace.placeName ORDER BY namedPlace.placeName
plotandobservation=SELECT plot.plot_id AS plot_id, \
      authorplotcode, \
      reference_id, \
      parent_id, \
      (select authorPlotCode from plot as parentPlot where parentPlot.plot_id=plot.parent_id) as parent_id_transl, \
      locationaccuracy, \
      confidentialitystatus, \
      latitude, \
      longitude, \
      authore, \
      authorn, \
      authorzone, \
      authordatum, \
      authorlocation, \
      locationnarrative, \
      azimuth, \
      dsgpoly, \
      shape, \
      area, \
      standsize, \
      placementmethod, \
      permanence, \
      (CASE WHEN permanence THEN 'permanent plot' ELSE 'not permanent' END) as permanence_transl, \
      layoutnarrative, \
      elevation, \
      elevationaccuracy, \
      elevationrange, \
      slopeaspect, \
      minslopeaspect, \
      maxslopeaspect, \
      slopegradient, \
      minslopegradient, \
      maxslopegradient, \
      topoposition, \
      landform, \
      surficialdeposits, \
      rocktype, \
      plot.notespublic AS plotnotespublic, \
      plot.notesmgt AS plotnotesmgt, \
      plot.revisions AS plotrevisions, \
      observation_id, \
      previousobs_id, \
      (SELECT authorObsCode from observation as prevObs where prevObs.observation_id=observation.previousobs_id) as previousobs_id_transl, \
      project_id, \
      (select projectname from project where project.project_id=observation.project_id) as project_id_transl, \
      authorobscode, \
      obsstartdate, \
      obsenddate, \
      dateaccuracy, \
      covermethod_id, \
      (SELECT covertype from covermethod where covermethod.covermethod_id=observation.covermethod_id) as covermethod_id_transl, \
      stratummethod_id, \
      (SELECT stratummethodname FROM stratummethod WHERE stratummethod.stratummethod_id=observation.stratummethod_id) as stratummethod_id_transl, \
      stemsizelimit, \
      methodnarrative, \
      taxonobservationarea, \
      coverdispersion, \
      autotaxoncover, \
      (CASE WHEN autotaxoncover THEN 'Yes' ELSE 'No' END) as autotaxoncover_transl, \
      stemobservationarea, \
      stemsamplemethod, \
      originaldata, \
      effortlevel, \
      floristicquality, \
      bryophytequality, \
      lichenquality, \
      observationnarrative, \
      landscapenarrative, \
      homogeneity, \
      phenologicaspect, \
      representativeness, \
      basalarea, \
      hydrologicregime, \
      soilmoistureregime, \
      soildrainage, \
      watersalinity, \
      waterdepth, \
      shoredistance, \
      soildepth, \
      organicdepth, \
      percentbedrock, \
      percentrockgravel, \
      percentwood, \
      percentlitter, \
      percentbaresoil, \
      percentwater, \
      percentother, \
      nameother, \
      standmaturity, \
      successionalstatus, \
      treeht, \
      shrubht, \
      fieldht, \
      nonvascularht, \
      submergedht, \
      treecover, \
      shrubcover, \
      fieldcover, \
      nonvascularcover, \
      floatingcover, \
      submergedcover, \
      dominantstratum, \
      growthform1type, \
      growthform2type, \
      growthform3type, \
      growthform1cover, \
      growthform2cover, \
      growthform3cover, \
      soiltaxon_id, \
      (SELECT soilname from soiltaxon where soiltaxon.soiltaxon_id=observation.soiltaxon_id) AS soiltaxon_id_transl, \
      soiltaxonsrc, \
      observation.notespublic AS observationnotespublic, \
      observation.notesmgt AS observationnotesmgmt, \
      observation.revisions AS observationrevisions, \
	observation.accessioncode AS observationaccessioncode \
       FROM observation  , plot  WHERE plot.plot_ID=observation.plot_ID
taxonimportance=SELECT taxonimportance_id, observation_id, taxonobservation.taxonobservation_id as taxonobservation_id, authorplantname, stratum_id, \
      (CASE WHEN (taxonimportance.stratum_id is null) THEN '-all-' ELSE   (SELECT stratumtype.stratumname FROM stratumtype, stratum \
          WHERE stratum.stratumtype_id=stratumtype.stratumtype_id AND stratum.stratum_id=taxonimportance.stratum_id) END) AS stratum_id_transl, \
      (authorplantname) as taxonobservation_id_transl, \
      cover, \
      basalarea, \
      biomass, \
      stratumheight, stratumbase, \
      inferencearea \
      FROM taxonobservation, taxonimportance WHERE taxonobservation.taxonobservation_id=taxonimportance.taxonobservation_id 
where_taxonimportance_pk=taxonimportance_id IN ({0})
where_stemcount_taxonimportance_fk=stemcount.taxonimportance_id IN ({0})
taxonimportance_nostrata=SELECT taxonimportance_id, \
      observation_id, \
      taxonobservation.taxonobservation_id as taxonobservation_id, \
      (authorplantname) as taxonobservation_id_transl, \
      cover, \
      basalarea, \
      biomass, \
      inferencearea \
      FROM  taxonimportance, taxonobservation WHERE taxonobservation.taxonobservation_id=taxonimportance.taxonobservation_id AND stratum_id is null
taxonimportance_onlystrata=SELECT taxonimportance_id, \
      observation_id, \
      taxonobservation.taxonobservation_id as taxonobservation_id, \
      (authorplantname) as taxonobservation_id_transl, \
      stratum_id, \
      (SELECT stratumtype.stratumname FROM stratumtype, stratum \
        WHERE stratum.stratumtype_id=stratumtype.stratumtype_id \
        AND stratum.stratum_id=taxonimportance.stratum_id) AS stratum_id_transl, \
      cover, \
      basalarea, \
      biomass, \
      stratumheight, stratumbase, \
      inferencearea \
      FROM taxonobservation, taxonimportance WHERE taxonobservation.taxonobservation_id=taxonimportance.taxonobservation_id AND \
      taxonimportance.stratum_id IS NOT NULL
usercertification_approved=SELECT usercertification_id, \
         usr_id, \
         current_cert_level, \
         requested_cert_level, \
         highest_degree, \
         degree_year, \
         degree_institution, \
         current_org, \
         current_pos, \
         (CASE WHEN esa_member='f' THEN 'Yes' ELSE 'No' END) AS esa_member, \
         prof_exp, \
         relevant_pubs, \
         veg_sampling_exp, \
         veg_analysis_exp, \
         usnvc_exp, \
         vb_exp, \
         vb_intention, \
         tools_exp, \
         esa_sponsor_name_a, \
         esa_sponsor_email_a, \
         esa_sponsor_name_b, \
         esa_sponsor_email_b, \
         peer_review, \
         addl_stmt, \
         certificationstatus, \
         certificationstatuscomments, \
         exp_region_a, \
         exp_region_b, \
         exp_region_c, \
         exp_region_a_veg, \
         exp_region_b_veg, \
         exp_region_c_veg, \
         exp_region_a_flor, \
         exp_region_b_flor, \
         exp_region_c_flor, \
         exp_region_a_nvc, \
         exp_region_b_nvc, \
         exp_region_c_nvc, \
         (SELECT surname from party, usr WHERE usr.party_ID=party.party_id AND userCertification.usr_ID=usr.usr_ID ) AS surname, \
         (SELECT organizationname from party, usr WHERE usr.party_ID=party.party_id AND userCertification.usr_ID=usr.usr_ID ) AS organizationname, \
         (SELECT givenname from party, usr WHERE usr.party_ID=party.party_id AND userCertification.usr_ID=usr.usr_ID ) AS givenname \
         FROM usercertification WHERE lower(certificationStatus)='approved'
userdataset=SELECT userdataset_id, \
         usr_id, \
         (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END \
             FROM party,usr WHERE party.party_id=usr.party_id AND usr.usr_id=userdataset.usr_id) as usr_id_transl, \
         datasetstart, \
         datasetstop, \
         accessioncode, \
         datasetname, \
         datasetdescription, \
         datasettype, \
         datasetsharing \
         FROM userdataset WHERE true
userdataset_nonprivate=SELECT userdataset_id, \
         usr.usr_id AS usr_id_explicit, \
         usr.email_address AS usr_email, \
         (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END \
             FROM party WHERE party.party_id=usr.party_id) as usr_id_transl, \
         datasetstart, \
         datasetstop, \
         accessioncode, \
         datasetname, \
         datasetdescription, \
         datasettype, \
         datasetsharing \
         FROM userdataset, usr WHERE usr.usr_id=userdataset.usr_id AND lower(userdataset.datasetsharing)='public'
where_user_email=email_address IN ({0})
where_usr_email=email_address IN ({0})
where_user_pk=usr_id IN ({0})
where_usr_pk=usr_id IN ({0})
userdatasetitem=SELECT userdatasetitem_id, \
      userdataset_id, \
      itemaccessioncode, \
      itemtype, \
      itemstart, \
      itemstop, \
      notes \
      FROM userdatasetitem
      where_userdataset_pk=userdataset_id IN ({0})
commclass=SELECT commclass_id, \
      observation_id, (select authorObsCode from observation where observation.OBSERVATION_ID=commclass.observation_id) as observation_id_transl, \
      classstartdate, \
      classstopdate, \
      inspection, \
      tableanalysis, \
      multivariateanalysis, \
      expertsystem, \
       (CASE WHEN inspection THEN 'Yes' ELSE 'No' END) as  inspection_transl, \
       (CASE WHEN tableanalysis THEN 'Yes' ELSE 'No' END) as  tableanalysis_transl, \
       (CASE WHEN multivariateanalysis THEN 'Yes' ELSE 'No' END) as  multivariateanalysis_transl, \
       (CASE WHEN expertsystem THEN 'Yes' ELSE 'No' END) as  expertsystem_transl, \
      classpublication_id, \
      classnotes, \
      accessioncode \
      FROM commclass WHERE true
where_commclass_pk=commclass_id IN ({0})
classcontributor=SELECT classcontributor_id, \
       commclass_id, \
       party_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END  FROM party WHERE party.party_id=classcontributor.party_id) AS party_id_transl, \
       role_id, (SELECT rolecode from aux_role where aux_role.role_id=classcontributor.role_id) AS role_id_transl  \
       FROM classcontributor WHERE true
comminterpretation=SELECT comminterpretation_id, \
        commclass_id, \
        commconcept_id, (SELECT commname.commname from commConcept, commname WHERE commname.commname_id=commconcept.commname_id and commconcept.commconcept_id=comminterpretation.commconcept_id) AS commconcept_id_transl, \
        commname, \
        classfit, \
        classconfidence, \
        commauthority_id, \
        notes, \
        type, \
        nomenclaturaltype \
        FROM comminterpretation WHERE true
comminterpretation_withobs=SELECT comminterpretation_id, \
        commclass.commclass_id, \
        observation_id, \
        commconcept_id, (SELECT commname.commname from commConcept, commname WHERE commname.commname_id=commconcept.commname_id and commconcept.commconcept_id=comminterpretation.commconcept_id) AS commconcept_id_transl, \
        classfit, \
        classconfidence, \
        commauthority_id, \
        notes, \
        type, \
        nomenclaturaltype \
        FROM comminterpretation, commclass WHERE commclass.commclass_id=comminterpretation.commclass_id
where_commconcept_observation_complex=observation_id IN (SELECT observation_id FROM comminterpretation INNER JOIN commclass \
        ON commclass.commclass_id=comminterpretation.commclass_id WHERE comminterpretation.commConcept_ID={0})

namedplace=SELECT namedplace_id, \
      placesystem, \
      placename, \
      placedescription, \
      placecode, \
      owner, \
      reference_id, (select shortName from reference where reference.reference_ID=namedplace.reference_ID) AS reference_id_transl, \
      accessioncode \
                 FROM namedplace WHERE true
where_namedplace_pk=namedplace_id in ({0})
place_count=SELECT COUNT(1) as count_places FROM place 
where_place_complex=plot.plot_id IN (SELECT plot_id FROM place WHERE namedplace_id IN ({0}))
where_place_complex_ac=plot.plot_id IN (SELECT plot_id FROM place WHERE namedplace_id IN ( SELECT namedplace_id from namedplace where LOWER(accessioncode) IN ({0}) ))
taxoninterpretation=SELECT taxoninterpretation_id, \
      taxonobservation_id, \
      stemlocation_id, \
      plantconcept_id, (select plantname FROM plantconcept where plantconcept.plantconcept_ID=taxoninterpretation.plantconcept_id) AS plantconcept_id_transl, \
      interpretationdate, \
      plantname_id, (select plantname from plantname where plantname.plantname_ID=taxoninterpretation.plantname_ID) AS plantname_id_transl, \
      party_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END  FROM party WHERE party.party_id=taxoninterpretation.party_id) AS party_id_transl, \
      role_id, (SELECT rolecode from aux_role where aux_role.role_id=taxoninterpretation.role_id) AS role_id_transl, \
      interpretationtype, \
      reference_id, (SELECT shortname from reference where reference.reference_id=taxoninterpretation.reference_id) AS reference_id_transl, \
      originalinterpretation, (CASE WHEN originalinterpretation THEN 'Yes' ELSE 'No' END) AS originalinterpretation_transl, \
      currentinterpretation, (CASE WHEN currentinterpretation THEN 'Yes' ELSE 'No' END) AS currentinterpretation_transl, \
      taxonfit, \
      taxonconfidence, \
      collector_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END  FROM party AS pcoll WHERE pcoll.party_id=taxoninterpretation.collector_id) AS collector_id_transl, \
      collectionnumber, \
      collectiondate, \
      museum_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END  FROM party AS pmus WHERE pmus.party_id=taxoninterpretation.museum_id) AS museum_id_transl, \
      museumaccessionnumber, \
      grouptype, \
      notes, \
      notespublic, \
      notesmgt, \
      revisions \
                 FROM taxoninterpretation WHERE true
where_taxoninterpretation_pk=taxoninterpretation_id IN ({0})
taxoninterpretation_nostem=SELECT taxoninterpretation_id, \
      taxonobservation_id, \
      stemlocation_id, \
      plantconcept_id, (select plantname FROM plantconcept where plantconcept.plantconcept_ID=taxoninterpretation.plantconcept_id) AS plantconcept_id_transl, \
      interpretationdate, \
      plantname_id, (select plantname from plantname where plantname.plantname_ID=taxoninterpretation.plantname_ID) AS plantname_id_transl, \
      party_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END  FROM party WHERE party.party_id=taxoninterpretation.party_id) AS party_id_transl, \
      role_id, (SELECT rolecode from aux_role where aux_role.role_id=taxoninterpretation.role_id) AS role_id_transl, \
      interpretationtype, \
      reference_id, (SELECT shortname from reference where reference.reference_id=taxoninterpretation.reference_id) AS reference_id_transl, \
      originalinterpretation, (CASE WHEN originalinterpretation THEN 'Yes' ELSE 'No' END) AS originalinterpretation_transl, \
      currentinterpretation, (CASE WHEN currentinterpretation THEN 'Yes' ELSE 'No' END) AS currentinterpretation_transl, \
      taxonfit, \
      taxonconfidence, \
      collector_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END  FROM party AS pcoll WHERE pcoll.party_id=taxoninterpretation.collector_id) AS collector_id_transl, \
      collectionnumber, \
      collectiondate, \
      museum_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END  FROM party AS pmus WHERE pmus.party_id=taxoninterpretation.museum_id) AS museum_id_transl, \
      museumaccessionnumber, \
      grouptype, \
      notes, \
      notespublic, \
      notesmgt, \
      revisions \
                 FROM taxoninterpretation WHERE stemlocation_id is null


### BEGIN KEYWORDS #############################
# Count how many records match in each entity type
keywords_count=SELECT entity, count(*) AS count FROM keywords
xwhere_kw_match=keywords ~* {0}
# {0} is the xwhere substitution
where_keywords_grouped={0} GROUP BY entity

# Link to the actual result sets
# {2} is the xwhere substitution (the last place holder)
where_keywords_pk_in={0}_id IN (SELECT table_id FROM keywords WHERE entity=''{1}'' AND {2})
### END KEYWORDS ###############################

where_simple=true AND {0}

# Only {0} is wrapped in 'single quotes' for xwhere
xwhere_criterion={1} {2} {0}
xwhere_multi={0}
xwhere_in={1} IN ({0})
xwhere_gt={1} > {0}
xwhere_lt={1} < {0}
xwhere_gteq={1} >= {0}
xwhere_lteq={1} <= {0}
xwhere_eq={1} = {0}
xwhere_not={1} <> {0}
xwhere_null={0} IS NULL 
xwhere_notnull={0} IS NOT NULL 
xwhere_match={1} ~* {0}
xwhere_cmatch={1} ~ {0}
xwhere_like={1} LIKE {0}
xwhere_ilike={1} ILIKE {0}


stratum=SELECT stratum_id, \
      observation_id, \
      stratumtype_id, (SELECT stratumtype.stratumname FROM stratumtype WHERE stratum.stratumtype_id=stratumtype.stratumtype_id) AS stratumtype_id_transl, \
      stratummethod_id, \
      stratumname, \
      stratumheight, \
      stratumbase, \
      stratumcover \
                 FROM stratum  WHERE true
where_stratum_pk=stratum_id IN ({0})
disturbanceobs=SELECT disturbanceobs_id, \
      observation_id, \
      disturbancetype, \
      disturbanceintensity, \
      disturbanceage, \
      disturbanceextent, \
      disturbancecomment \
                 FROM disturbanceobs  WHERE true
where_disturbanceobs_pk=disturbanceobs_id IN ({0})
soilobs=SELECT soilobs_id, \
      observation_id, \
      soilhorizon, \
      soildepthtop, \
      soildepthbottom, \
      soilcolor, \
      soilorganic, \
      soiltexture, \
      soilsand, \
      soilsilt, \
      soilclay, \
      soilcoarse, \
      soilph, \
      exchangecapacity, \
      basesaturation, \
      soildescription \
                 FROM soilobs  WHERE true
where_soilobs_pk=soilobs_id IN ({0})
place=SELECT plotplace_id, \
      plot_id, \
      calculated, (CASE WHEN calculated THEN 'Yes' ELSE 'No' END) AS calculated_transl, \
      namedplace_id, (select placeSystem || ': ' || placeName from namedPlace where namedPlace.NAMEDPLACE_ID=place.namedplace_id) AS namedplace_id_transl \
                 FROM place  WHERE true
where_place_pk=plotplace_id IN ({0})

stemcount=SELECT stemcount_id, \
      stemcount.taxonimportance_id as taxonimportance_id, \
      authorplantname, \
      taxonobservation.taxonobservation_id as taxonobservation_id, \
      observation_id, \
      stemdiameter, \
      stemdiameteraccuracy, \
      stemheight, \
      stemheightaccuracy, \
      stemcount, \
      stemtaxonarea \
                 FROM stemcount, taxonimportance, taxonobservation  WHERE stemcount.taxonimportance_id = taxonimportance.taxonimportance_id and taxonimportance.taxonobservation_id=taxonobservation.taxonobservation_id
where_stemcount_pk=stemcount_id IN ({0})

observationcontributor=SELECT observationcontributor_id, \
      observation_id, \
      party_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || givenname END FROM party WHERE party.party_id=observationContributor.party_id) AS party_id_transl, \
      role_id, (select roleCode from aux_role where aux_role.role_id=observationContributor.role_id) AS role_id_transl, \
      contributiondate \
                 FROM observationcontributor  WHERE true
where_observationcontributor_pk=observationcontributor_id IN ({0})

#########################################
#### SQL For Business Rules: prefix br_
#########################################

br_confidentialityreason=SELECT plot_id, authorplotcode, accessioncode, confidentialitystatus, \
   ('confidentialityReason needs value if plot is not public') as rulenote \
   FROM plot where confidentialitystatus>0 and confidentialityreason is null

br_count_confidentialityreason=SELECT count(1) as howmany,  \
   ('confidentialityReason needs value if plot is not public') as rulenote \
   FROM plot where confidentialitystatus>0 and confidentialityreason is null

br_plotswithoutarea=SELECT plot_id, authorplotcode, accessioncode, shape, rulenote \
   from view_busRule_plotsizeshape
   
br_count_plotswithoutarea=SELECT count(1) as howmany, ('count of plots without plot.area and not plotless or releve for shape') as rulenote \
   from view_busRule_plotsizeshape

br_covermethod=SELECT observation_id, accessioncode, authorobscode, ('obs without covermethod and have cover values in taxonimportance') as rulenote from observation where covermethod_id is null AND \
  (select count(1) FROM taxonimportance INNER JOIN taxonobservation ON taxonimportance.taxonobservation_id=taxonobservation.taxonobservation_id \
  where observation.observation_ID = taxonobservation.observation_id AND taxonimportance.cover is not null)>0

br_count_covermethod=SELECT count(1) as howmany, ('count of obs without covermethod and have cover values in taxonimportance') as rulenote from observation where covermethod_id is null AND \
  (select count(1) FROM taxonimportance INNER JOIN taxonobservation ON taxonimportance.taxonobservation_id=taxonobservation.taxonobservation_id \
  where observation.observation_ID = taxonobservation.observation_id AND taxonimportance.cover is not null)>0

br_stratummethod=SELECT observation_id, accessioncode, authorobscode, ('count of plots without stratummethod, yet have stratum records') as rulenote \
  from observation where stratummethod_id is null AND \
  (select count(1) FROM stratum where observation.observation_ID = stratum.observation_id)>0

br_count_stratummethod=SELECT count(1) as howmany, ('count of plots without stratummethod, yet have stratum records') as rulenote \
  from observation where stratummethod_id is null AND \
  (select count(1) FROM stratum where observation.observation_ID = stratum.observation_id)>0
  
br_classcontrib=SELECT observation_id, (select authorObsCode from observation where observation.observation_id=commclass.observation_id) as authorobscode, \
   ('commClass records that have no classification contributors') as rulenote \
   from commclass LEFT JOIN classcontributor ON commclass.commclass_id=classcontributor.commclass_id \
   WHERE classcontibutor.observation_ID is null

br_count_classcontrib=SELECT count(1) as howmany, ('count of commClass records that have no classification contributors') as rulenote \
   from commclass LEFT JOIN classcontributor ON commclass.commclass_id=classcontributor.commclass_id \
   WHERE classcontibutor.observation_ID is null
   
br_count_classinterp=SELECT count(1) as howmany, ('count of commClass records that have no interpretations!') as rulenote \
   from commclass LEFT JOIN comminterpretation ON commclass.commclass_id=comminterpretation.commclass_id \
   WHERE classcontibutor.observation_ID is null
