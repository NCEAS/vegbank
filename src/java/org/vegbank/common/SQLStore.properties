# $Id: SQLStore.properties,v 1.170 2005-08-11 05:30:28 mlee Exp $
#
# Contains SQL fragments that can be called by passing parameters into the 
# GenericDispatcher Action
#
# The names of the fields IN the SELECT clauses must match the case of the 
# fieldNames IN the corresponding model beans ( org.vegbank.common.model.*).
# The first character of a field name must be lowercase unless the entire fieldname
# is uppercase ( I have no idea why ?? ).
#
# The {x}s are placeholders that are replaced IN the java code before being run 
# against the database.
#
# CAVEAT!!
# Do not put parentheses within other parentheses
# If a comma comes after a field name, make it right after the field name, ie 'party_id,' not 'party_id  ,'
# If you are referencing a constant in a line in this file without {0} type parameters, do it like this: where xxx='Constant'
#  But, if your line contains a {0} parameter, then you must lower all variables matching constants AND double quotes:
#   where lower(xxx)=''constant'' and yyy={0} 
#  OR: where lower(xxx)=''constant'' and yyy=''{0}'' 

observation_short=SELECT authorobscode, observation_id, plot_id  FROM view_notemb_observation as observation
empty=
wherestate=observation_id={0} and plot_id={1}
party=SELECT party_id, (SELECT party_id_transl FROM view_party_transl WHERE party.party_id=view_party_transl.party_id) as party_id_transl, accessioncode, salutation, surname, givenname, middlename, \
      organizationname, contactinstructions, email, d_obscount FROM party WHERE partypublic=true
where_party_pk=party_id IN ({0})
party_simple=SELECT party_id, accessioncode, salutation, surname, givenname, middlename, \
      organizationname, contactinstructions, email FROM party 
# covermethod=SELECT covermethod_id, reference_id, covertype, coverindex.coverindex_id, \
#     coverindex.covercode, coverindex.upperlimit, coverindex.lowerlimit, \
#     coverindex.coverpercent, coverindex.indexdescription \
#     FROM covermethod, coverindex
# stratummethod=SELECT stratummethodname FROM stratummethod
# covermethod=SELECT covertype FROM covermethod
stratummethod=SELECT stratummethod_id, reference_id, stratummethodname, stratummethoddescription, accessioncode, stratumassignment, \
      (SELECT count(1) FROM view_notemb_observation as observation where observation.stratummethod_id=stratummethod.stratummethod_id) AS d_obscount, \
      (SELECT reference_id_transl from view_reference_transl as reference where reference.reference_id=stratummethod.reference_id) AS reference_id_transl  \
      FROM  stratummethod WHERE true
where_stratummethod_pk=stratummethod_id IN ({0})
stratumtype=SELECT stratumtype_id, \
      stratummethod_id, \
      stratumindex, \
      stratumname, \
      stratumdescription \
       FROM stratumtype  
address=SELECT address_id, \
      party_id, \
      organization_id, \
      orgposition, \
      email, \
      deliverypoint, \
      city, \
      administrativearea, \
      postalcode, \
      country, \
      currentflag, \
      addressstartdate, date(addressstartdate) as addressstartdate_datetrunc \
       FROM address  
where_address_pk=address_id IN ({0})
reference=SELECT reference_id, \
      shortname, \
      referencetype, \
      title, \
      titlesuperior, \
      pubdate, date(pubdate) as pubdate_datetrunc, \
      accessdate, date(accessdate) as accessdate_datetrunc, \
      conferencedate, date(conferencedate) as conferencedate_datetrunc, \
      referencejournal_id, (select journal from referenceJournal where referenceJournal.referenceJournal_ID=reference.referenceJournal_ID) AS referencejournal_id_transl, \
      volume, \
      issue, \
      pagerange, \
      totalpages, \
      publisher, \
      publicationplace, \
      isbn, \
      edition, \
      numberofvolumes, \
      chapternumber, \
      reportnumber, \
      communicationtype, \
      degree, \
      url, \
      doi, \
      additionalinfo, \
      accessioncode, fulltext \
       FROM reference  WHERE true
reference_min=SELECT reference_id_transl,reference_id FROM view_reference_transl WHERE true
where_reference_pk=reference_id IN ({0})
referencealtident=SELECT referencealtident_id, \
      reference_id, \
      system, \
      identifier \
       FROM referencealtident  
where_referencealtident_pk=referencealtident_id IN ({0})
referencecontributor=SELECT referencecontributor_id, \
      reference_id, \
      referenceparty_id, \
      (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || COALESCE(givenname,'') END FROM referenceparty WHERE referenceparty.referenceparty_id=referencecontributor.referenceparty_id) AS referenceparty_id_transl, \
      roletype, \
      position \
       FROM referencecontributor WHERE true 
where_referencecontributor_pk=referencecontributor_id IN ({0})
referenceparty=SELECT referenceparty_id, \
      type, \
      positionname, \
      salutation, \
      givenname, \
      surname, \
      suffix, \
      organizationname, \
      currentparty_id \
       FROM referenceparty  
where_referenceparty_pk=referenceparty_id IN ({0})
referencejournal=SELECT referencejournal_id, \
      journal, \
      issn, \
      abbreviation \
       FROM referencejournal  
where_referencejournal_pk=referencejournal_id IN ({0})
coverindex=SELECT coverindex_id, \
      covermethod_id, \
      covercode, \
      upperlimit, \
      lowerlimit, \
      coverpercent, \
      indexdescription \
       FROM coverindex  
where_coverindex_pk=coverindex_id IN ({0})
covermethod=SELECT covermethod_id, \
      reference_id, \
      (SELECT reference_id_transl from view_reference_transl as reference where reference.reference_id=covermethod.reference_id) as reference_id_transl, \
      covertype, \
      coverestimationmethod, \
      (SELECT count(1) FROM view_notemb_observation as observation where observation.covermethod_id=covermethod.covermethod_id) AS d_obscount, \
      accessioncode \
       FROM covermethod  WHERE true
where_covermethod_pk=covermethod_id IN ({0})
# just simple list of observations, include FKs so that can perform where operations 
observation_count=SELECT COUNT(observation_id) AS count_observations FROM view_notemb_observation AS observation
where_plantconcept_observation_complex=observation_id IN (select observation_ID from view_notemb_taxonobservation AS taxonobservation \
  INNER JOIN taxonInterpretation ON taxonobservation.taxonobservation_ID=taxonInterpretation.taxonobservation_ID \
  WHERE taxonInterpretation.plantConcept_ID={0})
observation=SELECT observation_id, \
      previousobs_id, \
      plot_id, \
      project_id, \
      authorobscode, \
      obsstartdate, date(obsstartdate) as obsstartdate_datetrunc, \
      obsenddate, date(obsenddate) as obsenddate_datetrunc, \
      dateaccuracy, \
      covermethod_id, \
      stratummethod_id, \
      stemsizelimit, \
      methodnarrative, \
      taxonobservationarea, \
      coverdispersion, \
      autotaxoncover, \
      stemobservationarea, \
      stemsamplemethod, \
      originaldata, \
      effortlevel, \
      floristicquality, \
      bryophytequality, \
      lichenquality, \
      observationnarrative, \
      landscapenarrative, \
      homogeneity, \
      phenologicaspect, \
      representativeness, \
      basalarea, \
      hydrologicregime, \
      soilmoistureregime, \
      soildrainage, \
      watersalinity, \
      waterdepth, \
      shoredistance, \
      soildepth, \
      organicdepth, \
      percentbedrock, \
      percentrockgravel, \
      percentwood, \
      percentlitter, \
      percentbaresoil, \
      percentwater, \
      percentother, \
      nameother, \
      standmaturity, \
      successionalstatus, \
      treeht, \
      shrubht, \
      fieldht, \
      nonvascularht, \
      submergedht, \
      treecover, \
      shrubcover, \
      fieldcover, \
      nonvascularcover, \
      floatingcover, \
      submergedcover, \
      dominantstratum, \
      growthform1type, \
      growthform2type, \
      growthform3type, \
      growthform1cover, \
      growthform2cover, \
      growthform3cover, \
      soiltaxon_id, \
      soiltaxonsrc, \
      notespublic, \
      notesmgt, \
      revisions, \
     accessioncode \
       FROM view_notemb_observation AS observation  
where_observation_pk=observation_id IN ({0})
where_taxonimportance_obsid_addsort=observation_id IN ({0}) ORDER BY observation_id, (CASE WHEN stratumHeight is null THEN -9999 ELSE stratumHeight END) DESC, stratum_id, cover DESC
where_observation_ac=LOWER(observation.accessioncode)=''{0}''
observation_transl=select observation_id, observation_id_transl FROM view_observation_transl

plantconcept=SELECT plantconcept_id, \
     plantname_id, \
     (plantname) as plantname_id_transl, \
     reference_id, \
        (SELECT reference_id_transl from view_reference_transl as reference where reference.reference_id=plantconcept.reference_id) as reference_id_transl, \
     plantname, \
     plantdescription, \
     accessioncode, \
     d_obscount \
     FROM plantconcept
where_plantconcept_pk=plantconcept_id IN ({0})
where_plantconcept_mpq=plantconcept_id IN (SELECT pu.plantconcept_id FROM plantusage AS pu, plantstatus AS ps, plantconcept AS pc \
  WHERE ps.plantstatus_id=pu.plantstatus_id AND ps.plantconcept_id=pc.plantconcept_id AND {0})

where_plantconcept_firstletter=lower(plantname) LIKE ''{0}%'' 
where_plantconcept_isfamily=plantconcept_id IN (select plantconcept_id from plantstatus where LOWER(plantlevel)=''family'')

# The following are used by web/forms/PlantQuery.jsp
plantstatus_party=select party_ID, (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=plantstatus.party_id) as party_id_transl from plantstatus group by party_ID
plantstatus_plantlevel=select plantlevel from plantstatus where plantlevel is not null group by plantlevel 
plantusage_classsystem=select classsystem from plantusage group by classsystem
where_plantstatus_daterange=(ps.startdate <= {0} AND (ps.stopdate IS NULL OR ps.stopdate >= {0}))

plantstatus=SELECT plantstatus_id, \
      plantconcept_id, \
      reference_id, \
      (SELECT reference_id_transl from view_reference_transl as reference where reference.reference_id=plantstatus.reference_id) as reference_id_transl, \
      plantconceptstatus, \
      plantparent_id, \
      (SELECT plantname.plantname FROM plantname, plantconcept WHERE plantname.plantname_id=plantconcept.plantname_id AND \
      plantconcept.plantconcept_id=plantstatus.plantparent_id) as plantparent_id_transl, \
      plantlevel, \
      startdate, date(startdate) as startdate_datetrunc, \
      stopdate, date(stopdate) as stopdate_datetrunc, \
      plantpartycomments, \
      party_id, \
      (SELECT accessioncode FROM party WHERE party.party_id=plantstatus.party_id) AS party_accessioncode, \
      (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=plantstatus.party_id) as party_id_transl \
      FROM plantstatus WHERE true 
where_plantstatus_pk=plantstatus_id IN ({0})
plantusage_std=SELECT plantusage_id, \
      plantname_id, \
      plantname AS plantname_id_transl, plantname, \
      plantconcept_id, \
      usagestart, date(usagestart) as usagestart_datetrunc, \
      usagestop, date(usagestop) as usagestop_datetrunc, \
      plantnamestatus, \
      classsystem, \
      party_id, \
      plantstatus_id \
      FROM plantusage WHERE lower(plantnamestatus)='standard'
plantcorrelation=SELECT plantcorrelation_id, \
      plantstatus_id, \
      plantconcept_id, \
      (SELECT plantconcept.plantname FROM  plantconcept WHERE  \
      plantconcept.plantconcept_id=plantcorrelation.plantconcept_id) as plantconcept_id_transl, \
      plantconvergence, \
      correlationstart, date(correlationstart) as correlationstart_datetrunc, \
      correlationstop, date(correlationstop) as correlationstop_datetrunc \
      FROM plantcorrelation WHERE true 
commcorrelation=SELECT commcorrelation_id, \
      commstatus_id, \
      commconcept_id, \
      (SELECT commconcept.commname FROM  commconcept WHERE  \
      commconcept.commconcept_id=commcorrelation.commconcept_id) as commconcept_id_transl, \
      commconvergence, \
      correlationstart, date(correlationstart) as correlationstart_datetrunc, \
      correlationstop, date(correlationstop) as correlationstop_datetrunc \
      FROM commcorrelation WHERE true 

      
taxoninterpretation_summary=SELECT taxoninterpretation_id, \
     taxonobservation_id, \
     reference_id, \
     party_id, \
     plantconcept_id, \
     interpretationdate, date(interpretationdate) as interpretationdate_datetrunc, \
     interpretationtype, \
     plantname_id, \
     taxonfit, \
     taxonconfidence \
     from view_notemb_taxoninterpretation as taxoninterpretation
where_taxonobservation_pk=taxonobservation_id IN ({0})
where_taxonimportance_taxonobservation_fk=taxonimportance.taxonobservation_id IN ({0})
##used in plant query results: MTL Oct 11 2004:
where_accessioncode=LOWER(accessioncode)=LOWER(''{0}'')
where_ac=LOWER(accessioncode)=''{0}''
plot=SELECT plot_id, \
      authorplotcode, \
      reference_id, \
      parent_id, \
      locationaccuracy, \
      confidentialitystatus, \
      latitude, \
      longitude, \
      authorlocation, \
      locationnarrative, \
      azimuth, \
      dsgpoly, \
      shape, \
      area, \
      standsize, \
      placementmethod, \
      permanence, \
      layoutnarrative, \
      elevation, \
      elevationaccuracy, \
      elevationrange, \
      slopeaspect, \
      minslopeaspect, \
      maxslopeaspect, \
      slopegradient, \
      minslopegradient, \
      maxslopegradient, \
      topoposition, \
      landform, \
      surficialdeposits, \
      rocktype, \
      notespublic, \
      notesmgt, \
      revisions \
       FROM view_notemb_plot AS plot  
where_plot_pk=plot_id IN ({0})
#this is for ambiguous cases to be resolved:
where_plotplot_pk=plot.plot_id IN ({0})
where_plot_ac= lower(plot.accessioncode)=lower(''{0}'')
where_plot_childrenof= plot.parent_id={0}
project=SELECT project_id, \
      projectname, \
      projectdescription, \
      accessioncode, \
      startdate, date(startdate) as startdate_datetrunc, \
      stopdate, date(stopdate) as stopdate_datetrunc , \
      (select count(1) from view_notemb_observation as observation where observation.project_id = project.project_id AND  observation_id in \
        (select observation_id from commclass)) AS countclassplots, \
      d_obscount, \
      (select max(date(dateentered)) from view_notemb_observation as observation where observation.project_id = project.project_id ) \
        AS maxdateentered \
      FROM project WHERE true 

where_project_pk=project_id IN ({0})
where_project_pk_and_observationclassified=project_id IN ({0}) and observation_id IN (select observation_id FROM commclass)
projectcontributor=SELECT projectcontributor_id, \
    project_id, \
    party_id, (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=projectcontributor.party_id) AS party_id_transl, \
    role_id, (select roleCode from aux_role where aux_role.role_id=projectcontributor.role_id) AS role_id_transl \
           FROM projectcontributor WHERE true
where_projectcontributor_pk=projectcontributor_id IN ({0})
telephone=SELECT telephone_id, \
      party_id, \
      phonenumber, \
      phonetype \
       FROM telephone  
where_telephone_pk=telephone_id IN ({0})
aux_role=SELECT role_id, \
      rolecode, \
      roledescription, \
       accessioncode, \
      roleproject, \
      (CASE WHEN roleproject=1 THEN 'REQUIRED role' \
            WHEN roleproject=2 THEN 'Allowed role' \
            ELSE 'not allowed' END) AS roleproject_transl, \
      roleobservation, \
      (CASE WHEN roleobservation=1 THEN 'REQUIRED role' \
                  WHEN roleobservation=2 THEN 'Allowed role' \
            ELSE 'not allowed' END) AS roleobservation_transl, \
      roletaxonint, \
      (CASE WHEN roletaxonint=1 THEN 'REQUIRED role' \
                  WHEN roletaxonint=2 THEN 'Allowed role' \
            ELSE 'not allowed' END) AS roletaxonint_transl, \
      (CASE WHEN roleclassint=1 THEN 'REQUIRED role' \
                  WHEN roleclassint=2 THEN 'Allowed role' \
            ELSE 'not allowed' END) AS roleclassint_transl, \
      roleclassint \
      FROM aux_role  
where_aux_role_pk=role_id IN ({0})
where_aux_role_project=roleproject>={0}
where_aux_role_observation=roleobservation>={0}
where_aux_role_taxonint=roletaxonint>={0}
where_aux_role_classint=roleclassint>={0}
taxonobservation=SELECT taxonobservation_id, \
      observation_id, (select observation_id_transl from view_observation_transl as observation where observation.observation_id=taxonobservation.observation_id) as observation_id_transl, \
      authorplantname, \
      reference_id, \
      (SELECT reference_id_transl from view_reference_transl as reference where reference.reference_id=taxonobservation.reference_id) as reference_id_transl, \
      taxoninferencearea, \
      accessioncode \
       FROM view_notemb_taxonobservation AS taxonobservation WHERE true
taxonobservation_join=SELECT taxonobservation_id, \
      o.observation_id, \
      authorplantname, \
      reference_id, \
      taxoninferencearea, \
      tobs.accessioncode \
       FROM view_notemb_taxonobservation tobs, view_notemb_observation o
where_join_obs_tobs_ac=o.observation_id=tobs.observation_id AND o.accessioncode=''{0}''

taxonobservation_maxcover=SELECT taxonobservation.taxonobservation_id AS taxonobservation_id, \
     authorplantname, \
     int_currplantcode, \
     int_currplantcommon, \
     int_currplantconcept_id, \
     int_currplantscifull, \
     int_currplantscinamenoauth, \
     int_origplantcode, \
     int_origplantcommon, \
     int_origplantconcept_id, \
     int_origplantscifull, \
     int_origplantscinamenoauth, \
     (coalesce(maxcover,-99)) AS sort_maxcover, maxcover, observation_id \
    FROM view_taxonobs_withmaxcover AS taxonobservation 

## the following gets analysis of userdataset with the current interpretation of taxonobservation:
userdataset_currentplants_analysis=SELECT userdataset_id,plantconcept_id,countobs,avgcover,plantname,sciname,scinamenoauth,code,common \
  FROM view_taxonobs_distinctid_curr_counts_plants
orderby_plantconc_dataset=plantconcept_id, userdataset_id

where_commconcept_pk=commconcept_id IN ({0})
commconcept=SELECT commconcept_id, commname_id, \
      (commname) as commname_id_transl, commname, \
      reference_id, \
      (SELECT reference_id_transl from view_reference_transl as reference where reference.reference_id=commconcept.reference_id) as reference_id_transl, \
      commdescription, accessioncode, d_obscount FROM commconcept WHERE true

#######(select commlevel from commstatus where commstatus.commstatus_id = commusage.commstatus_id) as commlevel, 

where_commconcept_mpq=commconcept_id IN (SELECT cu.commconcept_id FROM commusage AS cu, commstatus AS cs, commconcept AS cc \
    WHERE cs.commstatus_id=cu.commstatus_id AND cc.commconcept_id=cs.commconcept_id AND {0})

where_commconcept_nsuid=commconcept_id IN (SELECT commusage.commconcept_ID from commusage WHERE party_id in \
    (select party_id from party where lower(accessionCode)=''vb.py.512.natureserve'') \
   and lower(classsystem)=''uid'' and lower(commusage.commname)=lower(''{0}'') and now()>usagestart and ((now()<usagestop) or usagestop is null))

where_observation_nsuid=observation_id IN (select observation_id from view_notemb_commclass as commclass, comminterpretation WHERE \
  commclass.commclass_id=comminterpretation.commclass_id AND comminterpretation.commconcept_id IN \
  (SELECT commusage.commconcept_ID from commusage WHERE party_id in \
    (select party_id from party where lower(accessionCode)=''vb.py.512.natureserve'') \
   and lower(classsystem)=''uid'' and lower(commusage.commname)=lower(''{0}'') and now()>usagestart and ((now()<usagestop) or usagestop is null)))

commconcept_forquery=SELECT commconcept_id, commname_id, \
       commusage.commname AS commname, \
       (select commlevel from commstatus where commstatus.commstatus_id = commusage.commstatus_id) as commlevel, \
       party_id, \
       (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=commusage.party_id) as party_id_transl \
       FROM commusage WHERE true


## get children of a concept
commchildren=SELECT commstatus_id, commconcept.commconcept_id as commconcept_id, commconcept.commname as commconcept_id_transl, commparent_id FROM commconcept, commstatus WHERE commconcept.commconcept_id=commstatus.commconcept_id
where_commchildren=commparent_id={0} AND party_id={1} AND commstatus.stopdate is null ORDER BY commconcept.commname

plantchildren=SELECT plantstatus_id, plantconcept.plantconcept_id as plantconcept_id, plantconcept.plantname as plantconcept_id_transl, plantparent_id FROM plantconcept, plantstatus WHERE plantconcept.plantconcept_id=plantstatus.plantconcept_id
where_plantchildren=plantparent_id={0} AND party_id={1} AND plantstatus.stopdate is null ORDER BY plantconcept.plantname

commstatus=SELECT commstatus_id, \
      commconcept_id, \
      reference_id, \
      (SELECT reference_id_transl from view_reference_transl as reference where reference.reference_id=commstatus.reference_id) as reference_id_transl, \
      commconceptstatus, \
      commparent_id, \
      (SELECT commname.commname FROM commname, commconcept WHERE commname.commname_id=commconcept.commname_id AND \
      commconcept.commconcept_id=commstatus.commparent_id) as commparent_id_transl, \
      commlevel, \
      startdate, date(startdate) as startdate_datetrunc, \
      stopdate, date(stopdate) as stopdate_datetrunc, \
      commpartycomments, \
      (SELECT accessioncode FROM party WHERE party.party_id=commstatus.party_id) AS party_accessioncode, \
      party_id, \
      (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=commstatus.party_id) as party_id_transl \
      FROM commstatus WHERE true 
where_commstatus_pk=commstatus_id IN ({0})
commstatus_party=select party_ID, (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=commstatus.party_id) as party_id_transl from commstatus group by party_ID
commstatus_commlevel=select commlevel from commstatus where commlevel is not null group by commlevel
commusage_classsystem=select classsystem from commusage group by classsystem

#the "cs" alias must be like that
where_commstatus_daterange=(cs.startdate <= {0} AND (cs.stopdate IS NULL OR cs.stopdate >= {0}))
commusage_std=SELECT commusage_id, \
      commname_id, \
      (commname) as commname_id_transl, commname, \
      commconcept_id, \
      usagestart, date(usagestart) as usagestart_datetrunc, \
      usagestop, date(usagestop) as usagestop_datetrunc, \
      commnamestatus, \
      classsystem, \
      party_id, \
      commstatus_id \
      FROM commusage WHERE lower(commnamestatus)='standard'
total_bs=SELECT (select authorplantname from view_notemb_taxonobservation tobs where tobs.taxonobservation_id=ti.taxonobservation_id) as labeled, (select authorplantname from view_notemb_taxonobservation tobs where tobs.taxonobservation_id=ti.taxonobservation_id) as blah from view_notemb_taxoninterpretation  ti

taxonobservation_summ=SELECT  COUNT(1) AS count_taxonobservation from view_notemb_taxonObservation AS taxonObservation
commclass_summ=SELECT COUNT(1) AS count_commclass FROM view_notemb_observation AS observation WHERE observation.observation_ID IN (SELECT commClass.observation_ID FROM view_notemb_commClass AS commClass)
party_summ=SELECT COUNT(1) AS count_party FROM party WHERE partypublic=true

commconcept_summ=SELECT COUNT(1) AS count_commconcept FROM commconcept
commconcept_nvcok_summ=SELECT COUNT(1) AS count_commconcept FROM commconcept where commconcept_id in (select commconcept_ID from commstatus,party where commstatus.party_Id=party.party_id AND lower(party.accessioncode)='vb.py.512.natureserve' AND commStatus.commconceptstatus='accepted' AND commstatus.stopdate is null)

plantconcept_summ=SELECT COUNT(1) AS count_plantconcept FROM plantconcept
plantconcept_usdaok_summ=SELECT COUNT(1) AS count_plantconcept FROM plantconcept where plantconcept_id in (select plantconcept_ID from plantstatus,party where plantstatus.party_Id=party.party_id AND lower(party.accessioncode)='vb.py.511.usdanrcsplants2' AND plantStatus.plantconceptstatus='accepted' AND plantstatus.stopdate is null)

observation_summ=SELECT COUNT(1) AS count_observation FROM view_notemb_observation AS observation

observation_classified_summ=SELECT COUNT(1) AS count_observation FROM view_notemb_observation AS observation where observation_ID in (select commclass.observation_id from commclass)

observation_classified_tonvc_summ=SELECT COUNT(1) AS count_observation FROM view_notemb_observation AS observation where observation_ID in (select commclass.observation_id from commclass, comminterpretation, commstatus, party where commclass.commclass_id=comminterpretation.commclass_id AND comminterpretation.commconcept_id=commstatus.commconcept_id and commstatus.party_id=party.party_id AND lower(party.accessioncode)='vb.py.512.natureserve' AND commStatus.commconceptstatus='accepted' AND commstatus.stopdate is null)

place_summ=SELECT Count(observation.OBSERVATION_ID) AS count_obs, namedplace.placename AS region_name, namedplace.namedplace_id as namedplace_id \
  FROM view_notemb_plot AS plot,namedplace,place,view_notemb_observation AS observation WHERE  namedPlace.NAMEDPLACE_ID = place.NAMEDPLACE_ID AND  plot.PLOT_ID = place.PLOT_ID AND  plot.PLOT_ID = observation.PLOT_ID AND namedPlace.placeSystem='region|state|province' 

where_group_place_summ=TRUE GROUP BY namedPlace.NAMEDPLACE_ID, namedPlace.placeName ORDER BY namedPlace.placeName
where_group_place_summ_desccount=TRUE GROUP BY namedPlace.NAMEDPLACE_ID, namedPlace.placeName ORDER BY count(1) DESC
where_group_place_summ_project=project_id IN ({0}) GROUP BY namedPlace.NAMEDPLACE_ID, namedPlace.placeName ORDER BY namedPlace.placeName
where_dobscount_min=d_obscount>={0}

plotandobservation=SELECT plot.plot_id AS plot_id, \
      authorplotcode, \
      reference_id, \
      parent_id, \
      (select authorPlotCode from plot as parentPlot where parentPlot.plot_id=plot.parent_id) as parent_id_transl, \
      (select count(1) from plot as childPlot where plot.plot_ID=childPlot.parent_ID) as countchildplots, \
      locationaccuracy, \
      confidentialitystatus, \
      latitude, \
      longitude, \
      authore, \
      authorn, \
      authorzone, \
      authordatum, \
      authorlocation, \
      locationnarrative, \
      azimuth, \
      dsgpoly, \
      shape, \
      area, \
      standsize, \
      placementmethod, \
      permanence, \
      (CASE WHEN permanence THEN 'permanent plot' ELSE 'not permanent' END) as permanence_transl, \
      layoutnarrative, \
      elevation, \
      elevationaccuracy, \
      elevationrange, \
      slopeaspect, \
      minslopeaspect, \
      maxslopeaspect, \
      slopegradient, \
      minslopegradient, \
      maxslopegradient, \
      topoposition, \
      landform, \
      surficialdeposits, \
      rocktype, \
      plot.notespublic AS plotnotespublic, \
      plot.notesmgt AS plotnotesmgt, \
      plot.revisions AS plotrevisions, stateprovince, country, \
      observation_id, \
      previousobs_id, \
      (SELECT authorObsCode from observation as prevObs where prevObs.observation_id=observation.previousobs_id) as previousobs_id_transl, \
      project_id, \
      (select projectname from project where project.project_id=observation.project_id) as project_id_transl, \
      authorobscode, \
      obsstartdate, date(obsstartdate) as obsstartdate_datetrunc, \
      obsenddate, date(obsenddate) as obsenddate_datetrunc, \
      dateaccuracy, \
      covermethod_id, \
      (SELECT covertype from covermethod where covermethod.covermethod_id=observation.covermethod_id) as covermethod_id_transl, \
      stratummethod_id, \
      (SELECT stratummethodname FROM stratummethod WHERE stratummethod.stratummethod_id=observation.stratummethod_id) as stratummethod_id_transl, \
      stemsizelimit, \
      methodnarrative, \
      taxonobservationarea, \
      coverdispersion, \
      autotaxoncover, \
      (CASE WHEN autotaxoncover THEN 'Yes' ELSE 'No' END) as autotaxoncover_transl, \
      stemobservationarea, \
      stemsamplemethod, \
      originaldata, \
      effortlevel, \
      floristicquality, \
      bryophytequality, \
      lichenquality, \
      observationnarrative, \
      landscapenarrative, \
      homogeneity, \
      phenologicaspect, \
      representativeness, \
      basalarea, \
      hydrologicregime, \
      soilmoistureregime, \
      soildrainage, \
      watersalinity, \
      waterdepth, \
      shoredistance, \
      soildepth, \
      organicdepth, \
      percentbedrock, \
      percentrockgravel, \
      percentwood, \
      percentlitter, \
      percentbaresoil, \
      percentwater, \
      percentother, \
      nameother, \
      standmaturity, \
      successionalstatus, \
      treeht, \
      shrubht, \
      fieldht, \
      nonvascularht, \
      submergedht, \
      treecover, \
      shrubcover, \
      fieldcover, \
      nonvascularcover, \
      floatingcover, \
      submergedcover, \
      dominantstratum, \
      growthform1type, \
      growthform2type, \
      growthform3type, \
      growthform1cover, \
      growthform2cover, \
      growthform3cover, \
      soiltaxon_id, \
      (SELECT soilname from soiltaxon where soiltaxon.soiltaxon_id=observation.soiltaxon_id) AS soiltaxon_id_transl, \
      soiltaxonsrc, \
      observation.notespublic AS observationnotespublic, \
      observation.notesmgt AS observationnotesmgmt, \
      observation.revisions AS observationrevisions, \
      observation.accessioncode AS observationaccessioncode, \
      observation.dateentered AS observationdateentered, date(observation.dateentered) as observationdateentered_datetrunc \
       FROM view_notemb_observation AS observation  , view_notemb_plot AS plot  WHERE plot.plot_ID=observation.plot_ID

plotandobservationminmax=SELECT (min(elevation)) AS curminelevation, (max(elevation)) AS curmaxelevation, \
       (min(slopegradient)) AS curminslopegradient, (max(slopegradient)) AS curmaxslopegradient, \
       (min(slopeaspect)) AS curminslopeaspect, (max(slopeaspect)) AS curmaxslopeaspect, \
       (min(date(obsstartdate))) AS curminobsstartdate, (max(date(obsstartdate))) AS curmaxobsstartdate, \
       (min(date(observation.dateentered))) AS curmindateentered, (max(date(observation.dateentered))) AS curmaxdateentered, \
       (min(area)) AS curminarea, (max(area)) AS curmaxarea \
       from plot, view_notemb_observation AS observation where plot.plot_id=observation.observation_id

csv_plotandobservation=SELECT observation_id, \
      '"' || replace(authorplotcode,'"','""') || '"' AS authorplotcode_vb, \
      '"' || replace((SELECT reference.shortName from reference where reference.reference_ID = plot.reference_ID),'"','""') || '"' AS reference_id_name, \
      '"' || replace((SELECT authorPlotCode from plot as plParent where plParent.plot_ID = plot.parent_ID),'"','""') || '"' AS parent_id_name, \
      '"' || replace(authorobscode,'"','""') || '"' AS authorobscode_vb, \
      '"' || replace((SELECT authorObsCode from observation as oPrev where oPrev.observation_ID=observation.previousObs_ID),'"','""') || '"' AS previousobs_id_name, \
      '"' || replace((SELECT projectName from project where project.projecT_ID = observation.project_ID),'"','""') || '"' AS project_id_name, \
      '"' || date(obsstartdate) || '"' AS obsstartdate_vb, \
      '"' || date(obsenddate) || '"' AS obsenddate_vb, \
      '"' || replace(dateaccuracy,'"','""') || '"' AS dateaccuracy_vb, \
      confidentialitystatus, \
      latitude, \
      longitude, \
      locationaccuracy, \
      '"' || replace(stateprovince,'"','""') || '"' AS stateprovince_vb, \
      '"' || replace(country,'"','""') || '"' AS country_vb, \
        '"' || replace((select cc1.accessioncode from comminterpretation as cint1, commclass as cc1 where interp_orig_ci_ID=cint1.comminterpretation_ID and cc1.commclass_ID=cint1.commclass_ID),'"','""') || '"' AS original_classification_accessionCode, \
        '"' || replace((select conc1.accessioncode from commconcept as conc1 where conc1.commconcept_ID=interp_orig_cc_ID),'"','""') || '"' AS original_community_accessioncode, \
        '"' || replace(interp_orig_sciname,'"','""') || '"' AS original_community_scientific, \
        '"' || replace(interp_orig_code,'"','""') || '"' AS original_community_code, \
        '"' || replace(interp_orig_partyname,'"','""') || '"' AS original_community_classifier, \
        '"' || replace((select cc2.accessioncode from comminterpretation as cint2, commclass as cc2 where interp_current_ci_ID=cint2.comminterpretation_ID and cc2.commclass_ID=cint2.commclass_ID),'"','""') || '"' AS current_classification_accessionCode, \
        '"' || replace((select conc2.accessioncode from commconcept as conc2 where conc2.commconcept_ID=interp_current_cc_ID),'"','""') || '"' AS current_community_accessioncode, \
        '"' || replace(interp_current_sciname,'"','""') || '"' AS current_community_scientific, \
        '"' || replace(interp_current_code,'"','""') || '"' AS current_community_code, \
        '"' || replace(interp_current_partyname,'"','""') || '"' AS current_community_classifier, \
        '"' || replace((select cc3.accessioncode from comminterpretation as cint3, commclass as cc3 where interp_bestfit_ci_ID=cint3.comminterpretation_ID and cc3.commclass_ID=cint3.commclass_ID),'"','""') || '"' AS bestfit_classification_accessionCode, \
        '"' || replace((select conc3.accessioncode from commconcept as conc3 where conc3.commconcept_ID=interp_bestfit_cc_ID),'"','""') || '"' AS bestfit_community_accessioncode, \
        '"' || replace(interp_bestfit_sciname,'"','""') || '"' AS bestfit_community_scientific, \
        '"' || replace(interp_bestfit_code,'"','""') || '"' AS bestfit_community_code, \
        '"' || replace(interp_bestfit_partyname,'"','""') || '"' AS bestfit_community_classifier, \
      '"' || replace(locationnarrative,'"','""') || '"' AS locationnarrative_vb, \
      azimuth, \
      '"' || replace(dsgpoly,'"','""') || '"' AS dsgpoly_vb, \
      '"' || replace(shape,'"','""') || '"' AS shape_vb, \
      area, \
      '"' || replace(standsize,'"','""') || '"' AS standsize_vb, \
      '"' || replace(placementmethod,'"','""') || '"' AS placementmethod_vb, \
      '"' ||  (CASE WHEN permanence THEN 'true' ELSE 'false' END) || '"' AS permanence_vb, \
      '"' || replace(layoutnarrative,'"','""') || '"' AS layoutnarrative_vb, \
      elevation, \
      elevationaccuracy, \
      elevationrange, \
      slopeaspect, \
      minslopeaspect, \
      maxslopeaspect, \
      slopegradient, \
      minslopegradient, \
      maxslopegradient, \
      '"' || replace(topoposition,'"','""') || '"' AS topoposition_vb, \
      '"' || replace(landform,'"','""') || '"' AS landform_vb, \
      '"' || replace(surficialdeposits,'"','""') || '"' AS surficialdeposits_vb, \
      '"' || replace(rocktype,'"','""') || '"' AS rocktype_vb, \
      '"' || date(observation.dateentered) || '"' AS dateentered_vb, \
      '"' || replace((SELECT coverType from CoverMethod where observation.coverMethod_ID=coverMethod.coverMethod_ID),'"','""') || '"' AS covermethod_id_name, \
      '"' || replace(coverdispersion,'"','""') || '"' AS coverdispersion_vb, \
      '"' ||  (CASE WHEN autotaxoncover THEN 'true' ELSE 'false' END) || '"' AS autotaxoncover_vb, \
      '"' || replace((SELECT stratumMethodName from stratumMethod where observation.stratumMethod_ID=stratumMethod.stratumMethod_ID),'"','""') || '"' AS stratummethod_id_name, \
      '"' || replace(methodnarrative,'"','""') || '"' AS methodnarrative_vb, \
      taxonobservationarea, \
      stemsizelimit, \
      stemobservationarea, \
      '"' || replace(stemsamplemethod,'"','""') || '"' AS stemsamplemethod_vb, \
      '"' || replace(originaldata,'"','""') || '"' AS originaldata_vb, \
      '"' || replace(effortlevel,'"','""') || '"' AS effortlevel_vb, \
      plotvalidationlevel, \
      '"' || replace(floristicquality,'"','""') || '"' AS floristicquality_vb, \
      '"' || replace(bryophytequality,'"','""') || '"' AS bryophytequality_vb, \
      '"' || replace(lichenquality,'"','""') || '"' AS lichenquality_vb, \
      '"' || replace(observationnarrative,'"','""') || '"' AS observationnarrative_vb, \
      '"' || replace(landscapenarrative,'"','""') || '"' AS landscapenarrative_vb, \
      '"' || replace(homogeneity,'"','""') || '"' AS homogeneity_vb, \
      '"' || replace(phenologicaspect,'"','""') || '"' AS phenologicaspect_vb, \
      '"' || replace(representativeness,'"','""') || '"' AS representativeness_vb, \
      '"' || replace(standmaturity,'"','""') || '"' AS standmaturity_vb, \
      '"' || replace(successionalstatus,'"','""') || '"' AS successionalstatus_vb, \
      basalarea, \
      '"' || replace(hydrologicregime,'"','""') || '"' AS hydrologicregime_vb, \
      '"' || replace(soilmoistureregime,'"','""') || '"' AS soilmoistureregime_vb, \
      '"' || replace(soildrainage,'"','""') || '"' AS soildrainage_vb, \
      '"' || replace(watersalinity,'"','""') || '"' AS watersalinity_vb, \
      waterdepth, \
      shoredistance, \
      soildepth, \
      organicdepth, \
      '"' || replace((SELECT soilName from soilTaxon where observation.soilTaxon_ID=soilTaxon.soilTaxon_ID),'"','""') || '"' AS soiltaxon_id_name, \
      '"' || replace(soiltaxonsrc,'"','""') || '"' AS soiltaxonsrc_vb, \
      percentbedrock, \
      percentrockgravel, \
      percentwood, \
      percentlitter, \
      percentbaresoil, \
      percentwater, \
      percentother, \
      '"' || replace(nameother,'"','""') || '"' AS nameother_vb, \
      treeht, \
      shrubht, \
      fieldht, \
      nonvascularht, \
      submergedht, \
      treecover, \
      shrubcover, \
      fieldcover, \
      nonvascularcover, \
      floatingcover, \
      submergedcover, \
      '"' || replace(dominantstratum,'"','""') || '"' AS dominantstratum_vb, \
      '"' || replace(growthform1type,'"','""') || '"' AS growthform1type_vb, \
      '"' || replace(growthform2type,'"','""') || '"' AS growthform2type_vb, \
      '"' || replace(growthform3type,'"','""') || '"' AS growthform3type_vb, \
      growthform1cover, \
      growthform2cover, \
      growthform3cover, \
      totalcover, \
      '"' || replace(observation.accessioncode,'"','""') || '"' AS observation_accessioncode_vb \
    FROM view_notemb_observation AS observation, plot WHERE plot.plot_ID=observation.plot_ID

plotobs_ds_mapping=SELECT observation_id, userdataset_id, latitude, longitude, stateprovince, country, (select datasetname FROM userdataset where userdataset.userdataset_id=userdatasetitem.userdataset_id) as datasetname, \
        authorplotcode, authorobscode \
     FROM view_notemb_observation AS observation, plot, userdatasetitem \
     WHERE plot.plot_id = observation.plot_id AND itemtable='observation' and itemrecord=observation.observation_id 

orderby_ds_plotcode=datasetname, coalesce(authorobscode,authorplotcode)

taxonimportance=SELECT taxonimportance_id, observation_id, taxonobservation.taxonobservation_id as taxonobservation_id, authorplantname, stratum_id, \
      (CASE WHEN (taxonimportance.stratum_id is null) THEN '-all-' ELSE   (SELECT stratumtype.stratumname FROM stratumtype, stratum \
          WHERE stratum.stratumtype_id=stratumtype.stratumtype_id AND stratum.stratum_id=taxonimportance.stratum_id) END) AS stratum_id_transl, \
      (authorplantname) as taxonobservation_id_transl, \
      authorplantname, \
      int_currplantcode, \
      int_currplantcommon, \
      int_currplantconcept_id, \
      int_currplantscifull, \
      int_currplantscinamenoauth, \
      int_origplantcode, \
      int_origplantcommon, \
      int_origplantconcept_id, \
      int_origplantscifull, \
      int_origplantscinamenoauth, \
      cover, \
      covercode, \
      basalarea, \
      biomass, \
      stratumheight, stratumbase, \
      inferencearea \
      FROM view_notemb_taxonobservation AS taxonobservation LEFT JOIN taxonimportance on taxonobservation.taxonobservation_id = taxonimportance.taxonobservation_id
      
where_taxonimportance_pk=taxonimportance_id IN ({0})
where_stemcount_taxonimportance_fk=stemcount.taxonimportance_id IN ({0})
taxonimportance_nostrata=SELECT taxonimportance_id, \
      observation_id, \
      authorplantname, \
      int_currplantcode, \
      int_currplantcommon, \
      int_currplantconcept_id, \
      int_currplantscifull, \
      int_currplantscinamenoauth, \
      int_origplantcode, \
      int_origplantcommon, \
      int_origplantconcept_id, \
      int_origplantscifull, \
      int_origplantscinamenoauth, \
      taxonobservation.taxonobservation_id as taxonobservation_id, \
      (authorplantname) as taxonobservation_id_transl, \
      cover, \
      covercode, \
      basalarea, \
      biomass, \
      inferencearea \
      FROM  taxonimportance, view_notemb_taxonobservation AS taxonobservation WHERE taxonobservation.taxonobservation_id=taxonimportance.taxonobservation_id AND stratum_id is null
taxonimportance_onlystrata=SELECT taxonimportance_id, \
      observation_id, \
      authorplantname, \
      int_currplantcode, \
      int_currplantcommon, \
      int_currplantconcept_id, \
      int_currplantscifull, \
      int_currplantscinamenoauth, \
      int_origplantcode, \
      int_origplantcommon, \
      int_origplantconcept_id, \
      int_origplantscifull, \
      int_origplantscinamenoauth, \
      taxonobservation.taxonobservation_id as taxonobservation_id, \
      (authorplantname) as taxonobservation_id_transl, \
      stratum_id, \
      (SELECT stratumtype.stratumname FROM stratumtype, stratum \
        WHERE stratum.stratumtype_id=stratumtype.stratumtype_id \
        AND stratum.stratum_id=taxonimportance.stratum_id) AS stratum_id_transl, \
      cover, \
      covercode, \
      basalarea, \
      biomass, \
      stratumheight, stratumbase, \
      inferencearea \
      FROM view_notemb_taxonobservation AS taxonobservation, taxonimportance WHERE taxonobservation.taxonobservation_id=taxonimportance.taxonobservation_id AND \
      taxonimportance.stratum_id IS NOT NULL

csv_taxonimportance=SELECT taxonobservation.observation_id AS observation_ID, \
   '"' || replace(authorplantname,'"','""') || '"' AS AuthorPlantName_vb, \
         '"' || replace(int_currplantcode,'"','""') || '"' AS CurrentTaxonInterp_USDACode, \
         '"' || replace(int_currplantcommon,'"','""') || '"' AS CurrentTaxonInterp_CommonName, \
         '"' || replace((select pc1.accessioncode from plantconcept as pc1 where pc1.plantconcept_ID=int_currplantconcept_id),'"','""') || '"' AS CurrentTaxonInterp_AccessionCode, \
         '"' || replace(int_currplantscifull,'"','""') || '"' AS CurrentTaxonInterp_ScientificName, \
         '"' || replace(int_currplantscinamenoauth,'"','""') || '"' AS CurrentTaxonInterp_ScientificNameNoAuthors, \
         '"' || replace(int_origplantcode,'"','""') || '"' AS OriginalTaxonInterp_USDACode, \
         '"' || replace(int_origplantcommon,'"','""') || '"' AS OriginalTaxonInterp_Common, \
         '"' || replace((select pc2.accessioncode from plantconcept as pc2 where pc2.plantconcept_ID=int_origplantconcept_id),'"','""') || '"' AS OriginalTaxonInterp_AccessionCode, \
         '"' || replace(int_origplantscifull,'"','""') || '"' AS OriginalTaxonInterp_ScientificName, \
         '"' || replace(int_origplantscinamenoauth,'"','""') || '"' AS OriginalTaxonInterp_ScientificNameNoAuthors, \
   '"' || (CASE WHEN (taxonimportance.stratum_id is null) THEN '-all-' ELSE \
      (SELECT replace(stratumtype.stratumname,'"','""') FROM stratumtype, stratum \
      WHERE stratum.stratumtype_id=stratumtype.stratumtype_id AND stratum.stratum_id=taxonimportance.stratum_id) END) \
      || '"' AS stratum, \
   cover, \
   coverCode, \
   inferenceArea, \
   '"' || taxonobservation.accessioncode || '"' as taxonobs_accessioncode \
 FROM taxonobservation, taxonimportance, view_notemb_observation AS observation \
 WHERE taxonobservation.taxonobservation_id=taxonimportance.taxonobservation_id AND \
   taxonobservation.observation_ID=observation.observation_ID


usercertification_approved=SELECT usercertification_id, \
         usr_id, \
         current_cert_level, \
         requested_cert_level, \
         highest_degree, \
         degree_year, \
         degree_institution, \
         current_org, \
         current_pos, \
         (CASE WHEN esa_member='f' THEN 'Yes' ELSE 'No' END) AS esa_member, \
         prof_exp, \
         relevant_pubs, \
         veg_sampling_exp, \
         veg_analysis_exp, \
         usnvc_exp, \
         vb_exp, \
         vb_intention, \
         tools_exp, \
         esa_sponsor_name_a, \
         esa_sponsor_email_a, \
         esa_sponsor_name_b, \
         esa_sponsor_email_b, \
         peer_review, \
         addl_stmt, \
         certificationstatus, \
         certificationstatuscomments, \
         exp_region_a, \
         exp_region_b, \
         exp_region_c, \
         exp_region_a_veg, \
         exp_region_b_veg, \
         exp_region_c_veg, \
         exp_region_a_flor, \
         exp_region_b_flor, \
         exp_region_c_flor, \
         exp_region_a_nvc, \
         exp_region_b_nvc, \
         exp_region_c_nvc, \
         (SELECT surname from party, usr WHERE usr.party_ID=party.party_id AND userCertification.usr_ID=usr.usr_ID ) AS surname, \
         (SELECT organizationname from party, usr WHERE usr.party_ID=party.party_id AND userCertification.usr_ID=usr.usr_ID ) AS organizationname, \
         (SELECT givenname from party, usr WHERE usr.party_ID=party.party_id AND userCertification.usr_ID=usr.usr_ID ) AS givenname \
         FROM usercertification WHERE lower(certificationStatus)='approved'
userdataset=SELECT userdataset_id, \
         usr_id, \
         (select party_id_transl from view_party_transl, usr where view_party_transl.party_id=usr.party_id and usr.usr_id=userdataset.usr_id) as usr_id_transl, \
         datasetstart, date(datasetstart) as datasetstart_datetrunc, \
         datasetstop, date(datasetstop) as datasetstop_datetrunc, \
         accessioncode, \
         datasetname, \
         datasetdescription, \
         datasettype, \
         datasetsharing \
         FROM userdataset WHERE datasetstop is null

userdataset_countobs=SELECT userdataset_id, \
         usr_id, \
         (select party_id_transl from view_party_transl, usr where view_party_transl.party_id=usr.party_id and usr.usr_id=userdataset.usr_id) as usr_id_transl, \
         datasetstart, date(datasetstart) as datasetstart_datetrunc, \
         datasetstop, date(datasetstop) as datasetstop_datetrunc, \
         accessioncode, \
         datasetname, \
         datasetdescription, \
         datasettype, \
         datasetsharing, \
         (select count(1) from userdatasetitem where itemtable='observation' AND userdatasetitem.userdataset_id=userdataset.userdataset_id) as countobs \
         FROM userdataset WHERE datasetstop is null
userdataset_nonprivate=SELECT userdataset_id, \
         usr.usr_id AS usr_id_explicit, \
         usr.email_address AS usr_email, \
         (select party_id_transl from view_party_transl, usr where view_party_transl.party_id=usr.party_id and usr.usr_id=userdataset.usr_id) as usr_id_transl, \
         datasetstart, date(datasetstart) as datasetstart_datetrunc, \
         datasetstop, date(datasetstop) as datasetstop_datetrunc, \
         accessioncode, \
         datasetname, \
         datasetdescription, \
         datasettype, \
         datasetsharing \
         FROM userdataset, usr WHERE datasetstop is null AND usr.usr_id=userdataset.usr_id AND lower(userdataset.datasetsharing)='public'

where_inuserdataset_pk=lower(accessioncode) IN (select lower(itemaccessionCode) from userdatasetItem, userDataset \
   WHERE userDataset.userDataset_id=userdatasetItem.userDataset_id and userDataset.userdataset_id=''{0}'')
where_inuserdataset_ac=lower(accessioncode) IN (select lower(itemaccessionCode) from userdatasetItem, userDataset \
   WHERE userDataset.userDataset_id=userdatasetItem.userDataset_id and lower(userDataset.accessionCode)=lower(''{0}''))
where_inuserdataset_ac_plot=lower(plot.accessioncode) IN (select lower(itemaccessionCode) from userdatasetItem, userDataset \
   WHERE userDataset.userDataset_id=userdatasetItem.userDataset_id and lower(userDataset.accessionCode)=lower(''{0}''))
where_inuserdataset_pk_obs=lower(observation.accessioncode) IN (select lower(itemaccessionCode) from userdatasetItem, userDataset \
   WHERE userDataset.userDataset_id=userdatasetItem.userDataset_id and userDataset.userdataset_id=''{0}'')
where_inuserdataset_ac_obs=lower(observation.accessioncode) IN (select lower(itemaccessionCode) from userdatasetItem, userDataset \
   WHERE userDataset.userDataset_id=userdatasetItem.userDataset_id and lower(userDataset.accessionCode)=lower(''{0}''))


usr_email=SELECT usr_id, email_address FROM usr WHERE true

# get a dataset by usr_ID and  accessionCode 
where_usrpk_ac=usr_id={0} AND lower(accessionCode)=''{1}''

# get a dataset by usr_ID and dataset_ID 
where_usrpk_dsid=usr_id={0} AND userdataset_ID IN ({1})

where_user_email=email_address =''{0}''
where_usr_email=email_address=''{0}''

where_userpk=usr_id IN ({0})
where_usrpk=usr_id IN ({0})

userdatasetitem=SELECT userdatasetitem_id, \
      userdataset_id, \
      itemaccessioncode, \
      itemtype, \
      itemstart, date(itemstart) as itemstart_datetrunc, \
      itemstop, date(itemstop) as itemstop_datetrunc, \
      itemrecord, itemtable, itemdatabase, notes \
      FROM userdatasetitem

where_userdataset_pk=userdataset_id IN ({0})

where_userdataset_hastable=usr_id IN ({0}) AND userdataset_id IN \
  (SELECT userdataset_id from userdatasetitem as udi \
    WHERE (udi.userdataset_id=userdataset.userdataset_id) AND (lower(itemtable)=lower(''{1}'')))

userdatasetitem_counts=select countudi, itemtable, userdataset_id FROM (SELECT count(1) as countudi, itemtable, userdataset_id FROM userdatasetitem GROUP BY itemtable, userdataset_id) as udsi_grpd

commclass=SELECT commclass_id, \
      observation_id, (select observation_id_transl from view_observation_transl as observation where observation.OBSERVATION_ID=commclass.observation_id) as observation_id_transl, \
      classstartdate, date(classstartdate) as classstartdate_datetrunc, \
      classstopdate, date(classstopdate) as classstopdate_datetrunc, \
      inspection, \
      tableanalysis, \
      multivariateanalysis, \
      expertsystem, \
       (CASE WHEN inspection THEN 'Yes' ELSE 'No' END) as  inspection_transl, \
       (CASE WHEN tableanalysis THEN 'Yes' ELSE 'No' END) as  tableanalysis_transl, \
       (CASE WHEN multivariateanalysis THEN 'Yes' ELSE 'No' END) as  multivariateanalysis_transl, \
       (CASE WHEN expertsystem THEN 'Yes' ELSE 'No' END) as  expertsystem_transl, \
      classpublication_id, \
      classnotes, \
      accessioncode \
      FROM view_notemb_commclass AS commclass WHERE true
where_commclass_pk=commclass_id IN ({0})
classcontributor=SELECT classcontributor_id, \
       commclass_id, \
       party_id, (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=classcontributor.party_id) AS party_id_transl, \
       role_id, (SELECT rolecode from aux_role where aux_role.role_id=classcontributor.role_id) AS role_id_transl  \
       FROM view_notemb_classcontributor AS classcontributor WHERE true
comminterpretation=SELECT comminterpretation_id, \
        commclass_id, \
        commconcept_id, (SELECT commconcept.commname from commconcept WHERE  \
        commconcept.commconcept_id=comminterpretation.commconcept_id) AS commconcept_id_transl, \
        commname, \
        classfit, \
        classconfidence, \
        commauthority_id, \
        notes, \
        type, \
        (CASE WHEN type THEN 'Yes' ELSE 'No' END) as type_transl, \
        (CASE WHEN nomenclaturaltype THEN 'Yes' ELSE 'No' END) as nomenclaturaltype_transl, \
        nomenclaturaltype \
        FROM view_notemb_comminterpretation AS comminterpretation WHERE true
comminterpretation_withobs=SELECT comminterpretation_id, \
        commclass.commclass_id, \
        classstartdate, date(classstartdate) as classstartdate_datetrunc, \
        observation_id, \
        commconcept_id, (SELECT commconcept.commname from commconcept WHERE \
        commconcept.commconcept_id=comminterpretation.commconcept_id) AS commconcept_id_transl, \
        classfit, \
        classconfidence, \
        commauthority_id, \
        notes, \
        type, \
        nomenclaturaltype \
        FROM comminterpretation, view_notemb_commclass AS commclass WHERE commclass.commclass_id=comminterpretation.commclass_id
where_commconcept_observation_complex=observation_id IN (SELECT observation_id FROM comminterpretation INNER JOIN commclass \
        ON commclass.commclass_id=comminterpretation.commclass_id WHERE comminterpretation.commConcept_ID={0})

namedplace=SELECT namedplace_id, \
      placesystem, \
      placename, \
      placedescription, \
      placecode, \
      owner, \
      reference_id, (SELECT reference_id_transl from view_reference_transl as reference where reference.reference_ID=namedplace.reference_ID) AS reference_id_transl, \
      accessioncode \
                 FROM namedplace WHERE true
where_namedplace_pk=namedplace_id in ({0})
place_count=SELECT COUNT(1) as count_places FROM place, view_notemb_plot AS plot WHERE place.plot_id = plot.plot_id
where_place_complex=plot.plot_id IN (SELECT plot_id FROM place WHERE namedplace_id IN ({0}))
where_place_complex_ac=plot.plot_id IN (SELECT plot_id FROM place WHERE namedplace_id IN ( SELECT namedplace_id from namedplace where LOWER(accessioncode)=''{0}'' ))
taxoninterpretation=SELECT taxoninterpretation_id, \
      taxonobservation_id, \
      stemlocation_id, \
      plantconcept_id, (select plantconcept_id_transl FROM view_plantconcept_transl where view_plantconcept_transl.plantconcept_ID=taxoninterpretation.plantconcept_id) AS plantconcept_id_transl, \
      interpretationdate, date(interpretationdate) as interpretationdate_datetrunc, \
      plantname_id, (select plantname from plantname where plantname.plantname_ID=taxoninterpretation.plantname_ID) AS plantname_id_transl, \
      party_id, (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=taxoninterpretation.party_id) AS party_id_transl, \
      role_id, (SELECT rolecode from aux_role where aux_role.role_id=taxoninterpretation.role_id) AS role_id_transl, \
      interpretationtype, \
      reference_id, (SELECT reference_id_transl from view_reference_transl as reference where reference.reference_id=taxoninterpretation.reference_id) AS reference_id_transl, \
      originalinterpretation, (CASE WHEN originalinterpretation THEN 'Yes' ELSE 'No' END) AS originalinterpretation_transl, \
      currentinterpretation, (CASE WHEN currentinterpretation THEN 'Yes' ELSE 'No' END) AS currentinterpretation_transl, \
      taxonfit, \
      taxonconfidence, \
      collector_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || COALESCE(givenname,'') END  FROM party AS pcoll WHERE pcoll.party_id=taxoninterpretation.collector_id) AS collector_id_transl, \
      collectionnumber, \
      collectiondate, date(collectiondate) as collectiondate_datetrunc, \
      museum_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || COALESCE(givenname,'') END  FROM party AS pmus WHERE pmus.party_id=taxoninterpretation.museum_id) AS museum_id_transl, \
      museumaccessionnumber, \
      grouptype, \
      notes, \
      notespublic, \
      notesmgt, \
      revisions \
                 FROM view_notemb_taxoninterpretation AS taxoninterpretation WHERE true
where_taxoninterpretation_pk=taxoninterpretation_id IN ({0})
taxoninterpretation_nostem=SELECT taxoninterpretation_id, \
      taxonobservation_id, \
      stemlocation_id, \
      plantconcept_id, (select plantname FROM plantconcept where plantconcept.plantconcept_ID=taxoninterpretation.plantconcept_id) AS plantconcept_id_transl, \
      interpretationdate, date(interpretationdate) as interpretationdate_datetrunc, \
      plantname_id, (select plantname from plantname where plantname.plantname_ID=taxoninterpretation.plantname_ID) AS plantname_id_transl, \
      party_id, (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=taxoninterpretation.party_id) AS party_id_transl, \
      role_id, (SELECT rolecode from aux_role where aux_role.role_id=taxoninterpretation.role_id) AS role_id_transl, \
      interpretationtype, \
      reference_id, (SELECT reference_id_transl from view_reference_transl as reference where reference.reference_id=taxoninterpretation.reference_id) AS reference_id_transl, \
      originalinterpretation, (CASE WHEN originalinterpretation THEN 'Yes' ELSE 'No' END) AS originalinterpretation_transl, \
      currentinterpretation, (CASE WHEN currentinterpretation THEN 'Yes' ELSE 'No' END) AS currentinterpretation_transl, \
      taxonfit, \
      taxonconfidence, \
      collector_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || COALESCE(givenname,'') END  FROM party AS pcoll WHERE pcoll.party_id=taxoninterpretation.collector_id) AS collector_id_transl, \
      collectionnumber, \
      collectiondate, date(collectiondate) as collectiondate_datetrunc, \
      museum_id, (SELECT CASE WHEN surname is null THEN 'org:' || organizationname ELSE surname || ', ' || COALESCE(givenname,'') END  FROM party AS pmus WHERE pmus.party_id=taxoninterpretation.museum_id) AS museum_id_transl, \
      museumaccessionnumber, \
      grouptype, \
      notes, \
      notespublic, \
      notesmgt, \
      revisions \
                 FROM view_notemb_taxoninterpretation AS taxoninterpretation WHERE stemlocation_id is null


### BEGIN KEYWORDS #############################
# Count how many records match in each entity type
keywords_count=SELECT entity, count(*) AS count FROM keywords
xwhere_kw_match=keywords ~* {0}
# {0} is the xwhere substitution
where_keywords_grouped={0} GROUP BY entity

# Link to the actual result sets
# {2} is the xwhere substitution (the last place holder)
where_keywords_pk_in={0}_id IN (SELECT table_id FROM keywords WHERE entity=''{1}'' AND {2})
### END KEYWORDS ###############################

where_simple=true AND {0}


# Only {0} is wrapped in 'single quotes' for xwhere
xwhere_criterion={1} {2} {0}
xwhere_multi={0}
xwhere_in={1} IN ({0})
xwhere_gt={1} > {0}
xwhere_lt={1} < {0}
xwhere_gteq={1} >= {0}
xwhere_lteq={1} <= {0}
xwhere_eq={1} = {0}
xwhere_not={1} <> {0}
xwhere_null={1} IS NULL AND {0}='true'
xwhere_notnull={1} IS NOT NULL AND {0}='true'
xwhere_match=({1} ~* {0})
xwhere_cmatch=({1} ~ {0})
xwhere_like=({1} LIKE {0})
xwhere_ilike=({1} ILIKE {0})
xwhere_anything=true

# complex statement to get taxoncover and taxonname in same statement.  Only {0} is wrapped in quotes, thus must be authorplantname
xwhere_taxacover= true AND observation_id IN (SELECT taxonObservation.OBSERVATION_ID \
    FROM (plantConcept INNER JOIN ((taxonObservation INNER JOIN taxonImportance \
     ON taxonObservation.TAXONOBSERVATION_ID = taxonImportance.taxonObservation_ID) \
    INNER JOIN taxonInterpretation ON taxonObservation.TAXONOBSERVATION_ID = taxonInterpretation.TAXONOBSERVATION_ID) \
     ON plantConcept.PLANTCONCEPT_ID = taxonInterpretation.PLANTCONCEPT_ID) \
    INNER JOIN plantUsage ON plantConcept.PLANTCONCEPT_ID = plantUsage.PLANTCONCEPT_ID \
        WHERE plantusage.plantname ILIKE {0} \
        AND CASE WHEN ''{1}''::text <> ''''::text THEN taxonimportance.cover >= ''{1}'' ELSE TRUE END \
        AND CASE WHEN ''{2}''::text <> ''''::text THEN taxonimportance.cover <= ''{2}'' ELSE TRUE END )

xwhere_communityname=true AND observation_ID in (SELECT commclass.observation_ID \
   FROM (commClass INNER JOIN (commConcept INNER JOIN commInterpretation ON commConcept.COMMCONCEPT_ID = \
   commInterpretation.COMMCONCEPT_ID) ON commClass.COMMCLASS_ID = commInterpretation.COMMCLASS_ID) \
   INNER JOIN commUsage ON commConcept.COMMCONCEPT_ID = commUsage.COMMCONCEPT_ID WHERE commusage.commname ilike {0})

stratum=SELECT stratum_id, \
      observation_id, \
      stratumtype_id, (SELECT stratumtype.stratumname FROM stratumtype WHERE stratum.stratumtype_id=stratumtype.stratumtype_id) AS stratumtype_id_transl, \
      stratummethod_id, \
      stratumname, \
      stratumheight, \
      stratumbase, \
      stratumcover \
                 FROM stratum  WHERE true
where_stratum_pk=stratum_id IN ({0})
disturbanceobs=SELECT disturbanceobs_id, \
      observation_id, \
      disturbancetype, \
      disturbanceintensity, \
      disturbanceage, \
      disturbanceextent, \
      disturbancecomment \
                 FROM view_notemb_disturbanceobs AS disturbanceobs  WHERE true
where_disturbanceobs_pk=disturbanceobs_id IN ({0})
soilobs=SELECT soilobs_id, \
      observation_id, \
      soilhorizon, \
      soildepthtop, \
      soildepthbottom, \
      soilcolor, \
      soilorganic, \
      soiltexture, \
      soilsand, \
      soilsilt, \
      soilclay, \
      soilcoarse, \
      soilph, \
      exchangecapacity, \
      basesaturation, \
      soildescription \
                 FROM view_notemb_soilobs AS soilobs  WHERE true
where_soilobs_pk=soilobs_id IN ({0})
place=SELECT plotplace_id, \
      plot_id, \
      calculated, (CASE WHEN calculated THEN 'Yes' ELSE 'No' END) AS calculated_transl, \
      namedplace_id, (select placeSystem || ': ' || placeName from namedPlace where namedPlace.NAMEDPLACE_ID=place.namedplace_id) AS namedplace_id_transl \
                 FROM place  WHERE true
where_place_pk=plotplace_id IN ({0})

stemcount=SELECT stemcount_id, \
      stemcount.taxonimportance_id as taxonimportance_id, \
      authorplantname, \
      int_currplantcode, \
      int_currplantcommon, \
      int_currplantconcept_id, \
      int_currplantscifull, \
      int_currplantscinamenoauth, \
      int_origplantcode, \
      int_origplantcommon, \
      int_origplantconcept_id, \
      int_origplantscifull, \
      int_origplantscinamenoauth, \
      taxonobservation.taxonobservation_id as taxonobservation_id, \
      observation_id, \
      (select observation_id_transl from view_observation_transl as observation where observation.observation_id=taxonobservation.observation_id) as observation_id_transl, \
      stemdiameter, \
      stemdiameteraccuracy, \
      stemheight, \
      stemheightaccuracy, \
      stemcount, \
      stemtaxonarea \
                 FROM stemcount, taxonimportance, view_notemb_taxonobservation AS taxonobservation  WHERE stemcount.taxonimportance_id = taxonimportance.taxonimportance_id and taxonimportance.taxonobservation_id=taxonobservation.taxonobservation_id
where_stemcount_pk=stemcount_id IN ({0})

### since stemcount includes other tables in the SELECT statement, all ordering must be done to include unique id, namely stemcount_ID
orderby_stemobs=observation_id,taxonimportance_id,stemcount_id



observationcontributor=SELECT observationcontributor_id, \
      observation_id, \
      party_id, (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=observationContributor.party_id) AS party_id_transl, \
      role_id, (select roleCode from aux_role where aux_role.role_id=observationContributor.role_id) AS role_id_transl, \
      contributiondate, date(contributiondate) as contributiondate_datetrunc \
                 FROM observationcontributor  WHERE true
where_observationcontributor_pk=observationcontributor_id IN ({0})

plotstatelist=SELECT stateprovince, count(1) AS countstate from plot where \
     stateprovince is not null GROUP BY stateprovince ORDER BY stateprovince

plotcountrylist=SELECT country, count(1) AS countcountry from plot where \
     country is not null GROUP BY country ORDER BY country

## 'the following only works for one concept at a time (for both plants and comms), thus = and not IN'	 
where_conceptid=concept_id = {0}

## get obs by project and place:
where_project_place=project_id IN ({0}) AND observation.plot_id IN (select plot_id from place where namedplace_id IN ({1}))


## browsing by party : 
browseparty=SELECT party_id, (SELECT party_id_transl FROM view_party_transl as party WHERE party.party_id=view_browseparty_all_count_combined.party_id) AS party_id_transl, \
  countallcontrib, countclasscontrib, countobscontrib, countprojectcontrib FROM view_browseparty_all_count_combined WHERE true
where_obs_allparty=observation_id IN (SELECT observation_id FROM view_browseparty_all WHERE party_id IN ({0}))
where_obs_obscontrib=observation_id IN (SELECT observation_id FROM view_browseparty_obscontrib WHERE party_id IN ({0}))
where_obs_projcontrib=observation_id IN (SELECT observation_id FROM view_browseparty_projectcontrib WHERE party_id IN ({0}))
where_obs_classcontrib=observation_id IN (SELECT observation_id FROM view_browseparty_classcontrib WHERE party_id IN ({0}))

## browsing by most common species /comms:
browsecommonplants=SELECT plantconcept_id, \
   (plantname) AS plantconcept_id_transl, d_obscount \
   FROM plantconcept WHERE true

browsecommoncomms=SELECT commconcept_id, \
   commname AS commconcept_id_transl, d_obscount \
   FROM commconcept WHERE true

browsenamedplacebystate=SELECT placename as region_name, namedplace_id, placesystem, placename, placedescription, placecode, d_obscount, d_obscount as obscount, d_obscount as count_obs, accessioncode \
    FROM namedplace WHERE placeSystem='region|state|province' AND d_obscount>0

#################### 
## DENORM FROM HERE
####################

upd_commusage_commname=update commusage set commname = (select commname.commname from commname where commname.commname_id=commusage.commname_id) 
upd_wherenull_commname=commname is null
upd_commusage_commconc=update commusage set commconcept_id = (select commstatus.commconcept_id from commstatus where commstatus.commstatus_id=commusage.commstatus_id) where commstatus_id is not null
upd_wherenull_commconc=commconcept_id is null
upd_plantconcept_plantname=update plantconcept set plantname = (select plantname.plantname from plantname where plantname.plantname_id=plantconcept.plantname_id) 
upd_wherenull_plantname=plantname is null

upd_plantusage_plantconc=update plantusage set plantconcept_id = (select plantstatus.plantconcept_id from plantstatus where plantstatus.plantstatus_id=plantusage.plantstatus_id) where plantstatus_id is not null 
upd_wherenull_plantconc=plantconcept_id is null

upd_plantusage_plantname=update plantusage set plantname = (select plantname.plantname from plantname where plantname.plantname_id=plantusage.plantname_id) 
upd_commconcept_commname=update commconcept set commname=(select commname from commname where commname.commname_id=commconcept.commname_id) 


upd_comminterp_commname=update comminterpretation set commname = (select commname.commname from commname, commconcept where commname.commname_id=commconcept.commname_id and commconcept.commconcept_id=comminterpretation.commconcept_id) 


upd_plot_country=update plot set country = (select ( select np2.placename from namedplace as np2 where np2.namedplace_id = min(np1.namedplace_id) ) from namedplace as np1 , place where np1.namedplace_id = place.namedplace_id and np1.placesystem='area|country|territory' and place.plot_id = plot.plot_id ) 
upd_wherenull_country= country is null

upd_plot_state=update plot set stateprovince = (select ( select np2.placename from namedplace as np2 where np2.namedplace_id = min(np1.namedplace_id) ) from namedplace as np1 , place where np1.namedplace_id = place.namedplace_id and np1.placesystem='region|state|province' and place.plot_id = plot.plot_id ) 
upd_wherenull_state= stateprovince is null

upd_stratum_stratummethod=update stratum set stratummethod_id = (select stratumtype.stratummethod_id from stratumtype where stratumtype.stratumtype_id = stratum.stratumtype_id) where stratumtype_id is not null
upd_wherenull_stratummethod=stratummethod_id is null
upd_stratum_stratumname=update stratum set stratumname = (select stratumtype.stratumname from stratumtype where stratumtype.stratumtype_id = stratum.stratumtype_id) where stratumtype_id is not null
upd_wherenull_stratumname=stratumname is null

upd_commusage_party=update commusage set party_id = (select commstatus.party_id from commstatus where commstatus.commstatus_id=commusage.commstatus_id) where commstatus_id is not null
upd_wherenull_party=party_id is null
upd_plantusage_party=update plantusage set party_id = (select plantstatus.party_id from plantstatus where plantstatus.plantstatus_id=plantusage.plantstatus_id) where plantstatus_id is not null

upd_party_partypublic=update party set partypublic=true where party_id in (select party_id from view_party_public)

upd_taximp_stratumheight=update taxonimportance set stratumheight=(select stratumheight from stratum where taxonimportance.stratum_id=stratum.stratum_id) where taxonimportance.stratum_id is not null
upd_wherenull_stratumheight=stratumheight is null
upd_taximp_stratumbase=update taxonimportance set stratumbase=(select stratumbase from stratum where taxonimportance.stratum_id=stratum.stratum_id) where taxonimportance.stratum_id is not null
upd_wherenull_stratumbase=stratumbase is null


##  update embargo denorm fields for full embargo
##  order of these statements matters! the latter read from the former.
## plot

upd_plot_embargo=update plot set emb_plot = (select currentemb from view_emb_embargo_complete where plot.plot_id = view_emb_embargo_complete.plot_id) 
upd_wherenull_emb_plot= emb_plot is null
## observation

upd_observation_embargo=update observation set emb_observation = (select emb_plot from plot where plot.plot_id=observation.plot_id) 
upd_wherenull_emb_observation= emb_observation is null
## disturbanceobs

upd_disturbanceobs_embargo=update disturbanceobs set emb_disturbanceobs = (select emb_observation from observation where observation.observation_id=disturbanceobs.observation_id) 
upd_wherenull_emb_disturbanceobs= emb_disturbanceobs is null
## soilobs

upd_soilobs_embargo=update soilobs set emb_soilobs = (select emb_observation from observation where observation.observation_id=soilobs.observation_id) 
upd_wherenull_emb_soilobs= emb_soilobs is null
## commclass

upd_commclass_embargo=update commclass set emb_commclass = (select emb_observation from observation where observation.observation_id=commclass.observation_id) 
upd_wherenull_emb_commclass= emb_commclass is null
## -classcontributor

upd_classcontributor_embargo=update classcontributor set emb_classcontributor= (select emb_commclass from commclass where commclass.commclass_id=classcontributor.commclass_id) 
upd_wherenull_emb_classcontributor= emb_classcontributor is null
## -comminterpretation

upd_comminterpretation_embargo=update comminterpretation set emb_comminterpretation= (select emb_commclass from commclass where commclass.commclass_id=comminterpretation.commclass_id) 
upd_wherenull_emb_comminterpretation= emb_comminterpretation is null
## taxonobservation

upd_taxonobservation_embargo=update taxonobservation set emb_taxonobservation = (select emb_observation from observation where observation.observation_id=taxonobservation.observation_id) 
upd_wherenull_emb_taxonobservation= emb_taxonobservation is null
## -taxonimportance

upd_taxonimportance_embargo=update taxonimportance set emb_taxonimportance = (select emb_taxonobservation from taxonobservation where taxonimportance.taxonobservation_id =taxonobservation.taxonobservation_id) 
upd_wherenull_emb_taxonimportance= emb_taxonimportance is null
## ## stemcount

upd_stemcount_embargo=update stemcount set emb_stemcount = (select emb_taxonimportance from taxonimportance where stemcount.taxonimportance_id =taxonimportance.taxonimportance_id) 
upd_wherenull_emb_stemcount= emb_stemcount is null
## ## -stemlocation

upd_stemlocation_embargo=update stemlocation set emb_stemlocation = (select emb_stemcount from stemcount where stemlocation.stemcount_id =stemcount.stemcount_id) 
upd_wherenull_emb_stemlocation= emb_stemlocation is null
## -taxoninterpretation

upd_taxoninterpretation_embargo=update taxoninterpretation set emb_taxoninterpretation = (select emb_taxonobservation from taxonobservation where taxoninterpretation.taxonobservation_id =taxonobservation.taxonobservation_id) 
upd_wherenull_emb_taxoninterpretation= emb_taxoninterpretation is null
## ## taxonalt

upd_taxonalt_embargo=update taxonalt set emb_taxonalt = (select emb_taxoninterpretation from taxoninterpretation where taxonalt.taxoninterpretation_id =taxoninterpretation.taxoninterpretation_id) 
upd_wherenull_emb_taxonalt= emb_taxonalt is null
## count of obs

upd_plantconcept_obscount=update plantconcept set d_obscount = (select count(1) from (select observation_id from taxoninterpretation, view_notemb_taxonobservation as taxonobservation where taxonobservation.taxonobservation_id=taxoninterpretation.taxonobservation_id and plantconcept.plantconcept_id=taxoninterpretation.plantconcept_id group by observation_id ) as foo) 
upd_wherenull_obscount= d_obscount is null

upd_commconcept_obscount=update commconcept set d_obscount = (select count(1) from (select observation_id from comminterpretation, view_notemb_commclass as commclass where commclass.commclass_id=comminterpretation.commclass_id and commconcept.commconcept_id=comminterpretation.commconcept_id group by observation_id) as foo) 

upd_project_obscount=update project set d_obscount=(select count(1) from view_notemb_observation as observation where observation.project_id=project.project_id) 

upd_party_obscount=update party set d_obscount=(select countallcontrib from view_browseparty_all_count where view_browseparty_all_count.party_id=party.party_id) 

upd_namedplace_obscount=update namedplace set d_obscount=(select count(1) from place where namedplace.namedplace_id = place.namedplace_id) 


##  match exact:
upd_taximp_covercode_exact=update taxonimportance set covercode=(select coverindex.covercode from coverindex, observation, taxonobservation where ((coverpercent = taxonimportance.cover ) and (coverindex.covermethod_id=observation.covermethod_id and observation.observation_id=taxonobservation.observation_id and taxonimportance.taxonobservation_id=taxonobservation.taxonobservation_id)) limit 1) 
upd_wherenull_covercode= taxonimportance.covercode is null 

## match range:
upd_taximp_covercode_range=update taxonimportance set covercode=(select min(coverindex.covercode) from coverindex, observation, taxonobservation where ((lowerlimit<=taxonimportance.cover and upperlimit>=taxonimportance.cover ) and (coverindex.covermethod_id=observation.covermethod_id and observation.observation_id=taxonobservation.observation_id and taxonimportance.taxonobservation_id=taxonobservation.taxonobservation_id)) limit 1)

upd_taxobs_origpcid=update taxonobservation set int_origplantconcept_id = (select min(plantconcept_id) from taxoninterpretation where originalinterpretation=true and taxonobservation.taxonobservation_id = taxoninterpretation.taxonobservation_id) 
upd_wherenull_origpcid= int_origplantconcept_id is null 

upd_taxonobs_origsna=update taxonobservation set int_origplantsciname = (select sciname from temptbl_std_plantnames as newnames where taxonobservation.int_origplantconcept_id = newnames.plantconcept_id) 
upd_wherenull_origsna= int_origplantsciname is null 

upd_taxonobs_origsn=update taxonobservation set int_origplantscinamenoauth = (select scinamenoauth from temptbl_std_plantnames as newnames where taxonobservation.int_origplantconcept_id = newnames.plantconcept_id) 
upd_wherenull_origsn= int_origplantscinamenoauth is null 

upd_taxonobs_origcode=update taxonobservation set int_origplantcode = (select code from temptbl_std_plantnames as newnames where taxonobservation.int_origplantconcept_id = newnames.plantconcept_id) 
upd_wherenull_origcode= int_origplantcode is null 

upd_taxonobs_origcommon=update taxonobservation set int_origplantcommon = (select common from temptbl_std_plantnames as newnames where taxonobservation.int_origplantconcept_id = newnames.plantconcept_id) 
upd_wherenull_origcommon= int_origplantcommon is null 

upd_taxobs_currpcid=update taxonobservation set int_currplantconcept_id = (select min(plantconcept_id) from taxoninterpretation where originalinterpretation=true and taxonobservation.taxonobservation_id = taxoninterpretation.taxonobservation_id) 
upd_wherenull_currpcid= int_currplantconcept_id is null 

upd_taxobs_currsna=update taxonobservation set int_currplantsciname = (select sciname from temptbl_std_plantnames as newnames where taxonobservation.int_currplantconcept_id = newnames.plantconcept_id) 
upd_wherenull_currsna= int_currplantsciname is null 

upd_taxobs_currsn=update taxonobservation set int_currplantscinamenoauth = (select scinamenoauth from temptbl_std_plantnames as newnames where taxonobservation.int_currplantconcept_id = newnames.plantconcept_id) 
upd_wherenull_currsn= int_currplantscinamenoauth is null 

upd_taxobs_currcode=update taxonobservation set int_currplantcode = (select code from temptbl_std_plantnames as newnames where taxonobservation.int_currplantconcept_id = newnames.plantconcept_id) 
upd_wherenull_currcode= int_currplantcode is null 

upd_taxobs_currcommon=update taxonobservation set int_currplantcommon = (select common from temptbl_std_plantnames as newnames where taxonobservation.int_currplantconcept_id = newnames.plantconcept_id) 
upd_wherenull_currcommon= int_currplantcommon is null 
## update denorm community fields on observation: 

upd_obs_commint_1=update observation set interp_orig_ci_id = (select comminterpretation_id from comminterpretation, commclass where commclass.observation_id = observation.observation_id and commclass.commclass_id = comminterpretation.commclass_id order by classstartdate limit 1) 
upd_wherenull_1= interp_orig_ci_id is null

upd_obs_commint_2=update observation set interp_orig_cc_id = (select commconcept_id from comminterpretation where comminterpretation_id=interp_orig_ci_id) 
upd_wherenull_2= interp_orig_cc_id is null

upd_obs_commint_3=update observation set interp_orig_sciname = (select sciname from temptbl_std_commnames where interp_orig_cc_id=temptbl_std_commnames.commconcept_id) 
upd_wherenull_3= interp_orig_sciname is null

upd_obs_commint_4=update observation set interp_orig_code = (select code from temptbl_std_commnames where interp_orig_cc_id=temptbl_std_commnames.commconcept_id) 
upd_wherenull_4= interp_orig_code is null

upd_obs_commint_5=update observation set interp_orig_party_id = (select party_id from classcontributor, comminterpretation where comminterpretation.commclass_id = classcontributor.commclass_id and comminterpretation.comminterpretation_id= observation.interp_orig_ci_id limit 1) 
upd_wherenull_5= interp_orig_party_id is null

upd_obs_commint_6=update observation set interp_orig_partyname = (select party_id_transl from view_party_transl where view_party_transl.party_id = observation.interp_orig_party_id) 
upd_wherenull_6= interp_orig_partyname is null

upd_obs_commint_7=update observation set interp_current_ci_id = (select comminterpretation_id from comminterpretation, commclass where commclass.observation_id = observation.observation_id and commclass.commclass_id = comminterpretation.commclass_id order by classstartdate desc limit 1) 
upd_wherenull_7= interp_current_ci_id is null

## cheat and set fields equal to other fields if current interp is same as orig:
upd_obs_commint_8=update observation set interp_current_cc_id = interp_orig_cc_id , interp_current_sciname = interp_orig_sciname , interp_current_code = interp_orig_code , interp_current_party_id = interp_orig_party_id , interp_current_partyname = interp_orig_partyname where interp_current_ci_id = interp_orig_ci_id

##  now get any where the current is different from original:
upd_obs_commint_9=update observation set interp_current_cc_id = (select commconcept_id from comminterpretation where comminterpretation_id=interp_current_ci_id) 
upd_wherenull_9= interp_current_cc_id is null

upd_obs_commint_10=update observation set interp_current_sciname = (select sciname from temptbl_std_commnames where interp_current_cc_id=temptbl_std_commnames.commconcept_id) 
upd_wherenull_10= interp_current_sciname is null

upd_obs_commint_11=update observation set interp_current_code = (select code from temptbl_std_commnames where interp_current_cc_id=temptbl_std_commnames.commconcept_id) 
upd_wherenull_11= interp_current_code is null

upd_obs_commint_12=update observation set interp_current_party_id = (select party_id from classcontributor, comminterpretation where comminterpretation.commclass_id = classcontributor.commclass_id and comminterpretation.comminterpretation_id= observation.interp_current_ci_id limit 1) 
upd_wherenull_12= interp_current_party_id is null

upd_obs_commint_13=update observation set interp_current_partyname = (select party_id_transl from view_party_transl where view_party_transl.party_id = observation.interp_current_party_id) 
upd_wherenull_13= interp_current_partyname is null

upd_obs_commint_14=update observation set interp_bestfit_ci_id = (select comminterpretation_id from view_comminterp_more where view_comminterp_more.observation_id = observation.observation_id order by classfitnum, classconfidencenum desc limit 1) 
upd_wherenull_14= interp_bestfit_ci_id is null

## cheat again and fill in any bestfit that is same as orig or recent:
upd_obs_commint_15=update observation set interp_bestfit_cc_id = interp_orig_cc_id , interp_bestfit_sciname = interp_orig_sciname , interp_bestfit_code = interp_orig_code , interp_bestfit_party_id = interp_orig_party_id , interp_bestfit_partyname = interp_orig_partyname where interp_bestfit_ci_id = interp_orig_ci_id 

## most recent:
upd_obs_commint_16=update observation set interp_bestfit_cc_id = interp_current_cc_id , interp_bestfit_sciname = interp_current_sciname , interp_bestfit_code = interp_current_code , interp_bestfit_party_id = interp_current_party_id , interp_bestfit_partyname = interp_current_partyname where interp_bestfit_ci_id = interp_current_ci_id 

## get anything that is different 
upd_obs_commint_17=update observation set interp_bestfit_cc_id = (select commconcept_id from comminterpretation where comminterpretation_id=interp_bestfit_ci_id) 
upd_wherenull_17= interp_bestfit_cc_id is null

upd_obs_commint_18=update observation set interp_bestfit_sciname = (select sciname from temptbl_std_commnames where interp_bestfit_cc_id=temptbl_std_commnames.commconcept_id) 
upd_wherenull_18= interp_bestfit_sciname is null

upd_obs_commint_19=update observation set interp_bestfit_code = (select code from temptbl_std_commnames where interp_bestfit_cc_id=temptbl_std_commnames.commconcept_id) 
upd_wherenull_19= interp_bestfit_code is null

upd_obs_commint_20=update observation set interp_bestfit_party_id = (select party_id from classcontributor, comminterpretation where comminterpretation.commclass_id = classcontributor.commclass_id and comminterpretation.comminterpretation_id= observation.interp_bestfit_ci_id limit 1) 
upd_wherenull_20= interp_bestfit_party_id is null

upd_obs_commint_21=update observation set interp_bestfit_partyname = (select party_id_transl from view_party_transl where view_party_transl.party_id = observation.interp_bestfit_party_id) 
upd_wherenull_21= interp_bestfit_partyname is null




#########################################
#### COOKIES AND CONFIGURABLE VIEWS 
#########################################

dba_cookie=SELECT cookiename, (select dba_cookielabels.description from dba_cookielabels where viewOrCookie=dba_cookie.cookiename) AS cookienamelabel, \
  viewname, (select dba_cookielabels.description from dba_cookielabels where viewOrCookie=dba_cookie.viewname) AS viewnamelabel, \
  cookie_id, defaultvalue, examplepk, description, (coalesce(viewname,'') || cookiename) as fullcookiename, startgroup, prefixhtml,suffixhtml FROM dba_cookie WHERE true
## get a particular view and also get the global ones
where_cookie_view=viewname=''{0}'' OR viewname=''global''
orderby_cookie=viewname, sortorder

#########################################
#### SQL For Business Rules: prefix br_
#########################################

br_confidentialityreason=SELECT plot_id, authorplotcode, accessioncode, confidentialitystatus \
   FROM plot where confidentialitystatus>0 and confidentialityreason is null

br_count_confidentialityreason=SELECT count(1) as howmany  \
   FROM plot where confidentialitystatus>0 and confidentialityreason is null

br_plotswithoutarea=SELECT project_id, projectname, plotcount \
   from view_busRule_plotsizeshape
   
br_count_plotswithoutarea=SELECT (count(1)) as howmany \
   from view_busRule_plotsizeshape 

br_covermethod=SELECT observation_id, accessioncode, authorobscode from observation where covermethod_id is null AND \
  (select count(1) FROM taxonimportance INNER JOIN taxonobservation ON taxonimportance.taxonobservation_id=taxonobservation.taxonobservation_id \
  where observation.observation_ID = taxonobservation.observation_id AND taxonimportance.cover is not null)>0

br_count_covermethod=SELECT count(1) as howmany from observation where covermethod_id is null AND \
  (select count(1) FROM taxonimportance INNER JOIN taxonobservation ON taxonimportance.taxonobservation_id=taxonobservation.taxonobservation_id \
  where observation.observation_ID = taxonobservation.observation_id AND taxonimportance.cover is not null)>0

br_stratummethod=SELECT observation_id, accessioncode, authorobscode  \
  from observation where stratummethod_id is null AND \
  (select count(1) FROM stratum where observation.observation_ID = stratum.observation_id)>0

br_count_stratummethod=SELECT count(1) as howmany \
  from observation where stratummethod_id is null AND \
  (select count(1) FROM stratum where observation.observation_ID = stratum.observation_id)>0

br_count_taxonimportancestratum=SELECT count(1) as howmany FROM (taxonimportance INNER JOIN taxonobservation ON taxonimportance.taxonobservation_id=taxonobservation.taxonobservation_id) INNER JOIN stratum ON stratum.stratum_id=taxonimportance.stratum_id \
  WHERE taxonobservation.observation_id  <> stratum.observation_id  

br_taxonimportancestratum=SELECT taxonimportance_id, \
  (taxonobservation.observation_id) as taxobs_obsid, \
  (stratum.observation_id) as stratum_obsid \
  FROM (taxonimportance INNER JOIN taxonobservation ON taxonimportance.taxonobservation_id=taxonobservation.taxonobservation_id) INNER JOIN stratum ON stratum.stratum_id=taxonimportance.stratum_id \
  WHERE taxonobservation.observation_id  <> stratum.observation_id 
  
br_count_classcontributor=SELECT count(1) as howmany FROM classcontributor RIGHT JOIN commclass ON classcontributor.commclass_id=commclass.commclass_id WHERE classcontributor.commclass_id IS NULL
br_classcontributor=SELECT (commclass.commclass_id) as commclass_id, accessioncode FROM classcontributor RIGHT JOIN commclass ON classcontributor.commclass_id=commclass.commclass_id WHERE classcontributor.commclass_id IS NULL

br_count_comminterpretation=SELECT count(1) as howmany FROM comminterpretation RIGHT JOIN commclass ON comminterpretation.commclass_id=commclass.commclass_id WHERE comminterpretation.commclass_id IS NULL
br_comminterpretation=SELECT (commclass.commclass_id) as commclass_id, accessioncode FROM comminterpretation RIGHT JOIN commclass ON comminterpretation.commclass_id=commclass.commclass_id WHERE comminterpretation.commclass_id IS NULL

br_count_plotsnoobs=SELECT count(1) as howmany FROM plot LEFT JOIN observation ON plot.plot_id=observation.plot_id where observation.plot_id is null
br_plotsnoobs=SELECT plot.plot_id as plot_id, authorplotcode, plot.accessioncode as accessioncode FROM plot LEFT JOIN observation ON plot.plot_id=observation.plot_id where observation.plot_id is null

br_count_stratumtypedupl=SELECT count(1) as howmany FROM view_busRule_duplStratumType
br_stratumtypedupl=SELECT count , stratummethod_id , stratumindex FROM view_busRule_duplStratumType

br_count_covercodedupl=SELECT count(1) as howmany FROM view_busRule_duplcovercode
br_covercodedupl=SELECT count , covermethod_id , covercode FROM view_busRule_duplcovercode

br_count_commusagereqdflds=SELECT count(1) as howmany FROM commusage where commconcept_id IS NULL or party_id IS NULL or commstatus_id IS NULL
br_commusagereqdflds=SELECT commusage_id, commstatus_id, commconcept_id, party_id FROM commusage where commconcept_id IS NULL or party_id IS NULL or commstatus_id IS NULL

br_count_plantusagereqdflds=SELECT count(1) as howmany FROM plantusage where plantconcept_id IS NULL or party_id IS NULL or plantstatus_id IS NULL
br_plantusagereqdflds=SELECT plantusage_id, plantstatus_id, plantconcept_id, party_id FROM plantusage where plantconcept_id IS NULL or party_id IS NULL or plantstatus_id IS NULL

br_count_plotdateentered=SELECT count(1) as howmany FROM plot WHERE dateentered IS NULL 
br_plotdateentered=SELECT authorplotcode, plot_id, accessioncode FROM plot WHERE dateentered IS NULL 

br_count_observationdateentered=SELECT count(1) as howmany FROM observation WHERE dateentered IS NULL 
br_observationdateentered=SELECT authorobscode, observation_id, accessioncode FROM observation WHERE dateentered IS NULL 

#########################################################################
#########CHECK ACCESSIONCODES to make sure they are filled in############
#########################################################################
br_count_commconceptacccode=SELECT count(1) as howmany FROM commconcept WHERE accessioncode IS NULL
br_commconceptacccode=SELECT commconcept_id, accessioncode FROM commconcept WHERE  accessioncode IS NULL

br_count_partyacccode=SELECT count(1) as howmany FROM party WHERE accessioncode IS NULL
br_partyacccode=SELECT party_id, accessioncode FROM party WHERE  accessioncode IS NULL

br_count_plantconceptacccode=SELECT count(1) as howmany FROM plantconcept WHERE accessioncode IS NULL
br_plantconceptacccode=SELECT plantconcept_id, accessioncode FROM plantconcept WHERE  accessioncode IS NULL

br_count_referenceacccode=SELECT count(1) as howmany FROM reference WHERE accessioncode IS NULL
br_referenceacccode=SELECT reference_id, accessioncode FROM reference WHERE  accessioncode IS NULL

br_count_commclassacccode=SELECT count(1) as howmany FROM commclass WHERE accessioncode IS NULL
br_commclassacccode=SELECT commclass_id, accessioncode FROM commclass WHERE  accessioncode IS NULL

br_count_covermethodacccode=SELECT count(1) as howmany FROM covermethod WHERE accessioncode IS NULL
br_covermethodacccode=SELECT covermethod_id, accessioncode FROM covermethod WHERE  accessioncode IS NULL

br_count_namedplaceacccode=SELECT count(1) as howmany FROM namedplace WHERE accessioncode IS NULL
br_namedplaceacccode=SELECT namedplace_id, accessioncode FROM namedplace WHERE  accessioncode IS NULL

br_count_observationacccode=SELECT count(1) as howmany FROM observation WHERE accessioncode IS NULL
br_observationacccode=SELECT observation_id, accessioncode FROM observation WHERE  accessioncode IS NULL

br_count_projectacccode=SELECT count(1) as howmany FROM project WHERE accessioncode IS NULL
br_projectacccode=SELECT project_id, accessioncode FROM project WHERE  accessioncode IS NULL

br_count_plotacccode=SELECT count(1) as howmany FROM plot WHERE accessioncode IS NULL
br_plotacccode=SELECT plot_id, accessioncode FROM plot WHERE  accessioncode IS NULL

br_count_referencejournalacccode=SELECT count(1) as howmany FROM referencejournal WHERE accessioncode IS NULL
br_referencejournalacccode=SELECT referencejournal_id, accessioncode FROM referencejournal WHERE  accessioncode IS NULL

br_count_soiltaxonacccode=SELECT count(1) as howmany FROM soiltaxon WHERE accessioncode IS NULL
br_soiltaxonacccode=SELECT soiltaxon_id, accessioncode FROM soiltaxon WHERE  accessioncode IS NULL

br_count_stratummethodacccode=SELECT count(1) as howmany FROM stratummethod WHERE accessioncode IS NULL
br_stratummethodacccode=SELECT stratummethod_id, accessioncode FROM stratummethod WHERE  accessioncode IS NULL

br_count_referencepartyacccode=SELECT count(1) as howmany FROM referenceparty WHERE accessioncode IS NULL
br_referencepartyacccode=SELECT referenceparty_id, accessioncode FROM referenceparty WHERE  accessioncode IS NULL

br_count_taxonobservationacccode=SELECT count(1) as howmany FROM taxonobservation WHERE accessioncode IS NULL
br_taxonobservationacccode=SELECT taxonobservation_id, accessioncode FROM taxonobservation WHERE  accessioncode IS NULL

br_count_userdefinedacccode=SELECT count(1) as howmany FROM userdefined WHERE accessioncode IS NULL
br_userdefinedacccode=SELECT userdefined_id, accessioncode FROM userdefined WHERE  accessioncode IS NULL

br_count_auxroleacccode=SELECT count(1) as howmany FROM aux_role WHERE accessioncode IS NULL
br_auxroleacccode=SELECT role_id, accessioncode FROM aux_role WHERE  accessioncode IS NULL

#########################################
#### END OF  Business Rules SQL: prefix br_
#########################################


######namedPlaceCorrelation:
namedplacecorrelation=SELECT childplace_id, (SELECT placename || ' (' || placeSystem || ')' from namedplace as np where np.namedplace_id=childplace_id) AS childplace_id_transl, \
   parentplace_id, (SELECT placename || ' (' || placeSystem || ')' from namedplace as np2 where np2.namedplace_id=parentplace_id) AS parentplace_id_transl, \
   placeconvergence FROM  namedPlaceCorrelation 
where_childplace=childplace_id IN ({0})
where_parentplace=parentplace_id IN ({0})

datacart_acs=SELECT itemaccessioncode FROM userdatasetitem
where_datacart_acs_in=userdataset_id=''{0}'' AND itemaccessioncode IN ({1})

where_datacart_obs_hasplants=observation_id in (select observation_ID from view_taxonInterp_more where pc_accessioncode IN \
   (select itemaccessioncode from userdatasetitem where userdataset_ID = {0}))
   
where_datacart_obs_hascomms=observation_id in (select observation_ID from view_comminterp_more where commconcept_ID IN \
   (select itemrecord from userdatasetitem where userdataset_ID = {0} and itemdatabase=''vegbank'' AND itemtable=''commconcept'') )

definedvalue_distinctud=SELECT DISTINCT true, userdefinedname, (userdefined.userdefined_id) as userdefined_id, \
   (lower(tablename)) AS lowertablename, userdefinedtype \
  FROM definedvalue, userdefined WHERE userdefined.userdefined_ID=definedvalue.userdefined_ID 
   
definedvalue=SELECT definedvalue_id, \
      (userdefined.userdefined_id) as userdefined_id, (userdefined.userdefinedname) AS userdefined_id_transl, \
      tablerecord_id, \
      definedvalue, \
      tablename, \
      (lower(tablename)) AS lowertablename, \
      userdefinedname, \
      userdefinedtype \
   FROM definedvalue, userdefined WHERE userdefined.userdefined_ID=definedvalue.userdefined_ID 
where_userdefined_pk=userdefined_id IN ({0})

where_definedvalue_table_recs=lower(tablename)=lower(''{0}'') AND tablerecord_id IN ({1})

where_definedvalue_table_recs_udlist=lower(tablename)=lower(''{0}'') AND tablerecord_id IN ({1}) AND userdefined_id IN ({$2})

where_definedvalue_obstaxonimportance=lower(tablename)=''taxonimportance'' \
   AND tablerecord_id IN \
     (select taxonimportance_id from taxonimportance,taxonobservation where \
     taxonimportance.taxonobservation_id = taxonobservation.taxonobservation_id \
     AND taxonobservation.observation_ID IN ({0}))

where_definedvalue_obstaxonimportance_udlist=lower(tablename)=''taxonimportance'' \
   AND tablerecord_id IN \
     (select taxonimportance_id from taxonimportance,taxonobservation where \
     taxonimportance.taxonobservation_id = taxonobservation.taxonobservation_id \
     AND taxonobservation.observation_ID IN ({0})) AND userdefined_id IN ({$1})

userdefined=SELECT userdefined_id, \
      userdefinedname, \
      userdefinedmetadata, \
      userdefinedcategory, \
      userdefinedtype, \
      tablename, \
      accessioncode \
        FROM  userdefined  WHERE true
where_userdefined_pk=userdefined_id IN ({0})


#for checking the existence of records:

plot_recordid=SELECT plot_id as record_id, plot_id FROM plot
observation_recordid=SELECT observation_id as record_id, observation_id FROM observation
plantconcept_recordid=SELECT plantconcept_id as record_id, plantconcept_id FROM plantconcept
commconcept_recordid=SELECT commconcept_id as record_id, commconcept_id FROM commconcept
party_recordid=SELECT party_id as record_id, party_id FROM party
reference_recordid=SELECT reference_id as record_id, reference_id FROM reference
referencejournal_recordid=SELECT referencejournal_id as record_id, referencejournal_id FROM referencejournal
stratummethod_recordid=SELECT stratummethod_id as record_id, stratummethod_id FROM stratummethod
covermethod_recordid=SELECT covermethod_id as record_id, covermethod_id FROM covermethod
namedplace_recordid=SELECT namedplace_id as record_id, namedplace_id FROM namedplace
project_recordid=SELECT project_id as record_id, project_id FROM project
soiltaxon_recordid=SELECT soiltaxon_id as record_id, soiltaxon_id FROM soiltaxon
userdefined_recordid=SELECT userdefined_id as record_id, userdefined_id FROM userdefined
taxonobservation_recordid=SELECT taxonobservation_id as record_id, taxonobservation_id FROM taxonobservation
commclass_recordid=SELECT commclass_id as record_id, commclass_id FROM commclass
referenceparty_recordid=SELECT referenceparty_id as record_id, referenceparty_id FROM referenceparty
aux_role_recordid=SELECT role_id as record_id, role_id FROM aux_role
userdataset_recordid=SELECT userdataset_id as record_id, userdataset_id FROM userdataset