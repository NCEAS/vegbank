Option Compare Database
Option Explicit


Public Function getAccessionCode(strTbl As String, lngID As Long, Optional blnAddIfNull As Boolean) As String
 ''gets the accession code, given a PK, if there is one
 Dim strTemp As String
 strTemp = getvalFrmSQL("SELECT accessionCode from " & strTbl & " where [" & WhatIsPKOf(strTbl) & "]=" & lngID & ";")
 If strTemp = "" And blnAddIfNull Then
   strTemp = FillInMissingAccCodesInVBModl(strTbl, lngID)
   strTemp = getvalFrmSQL("SELECT accessionCode from " & strTbl & " where [" & WhatIsPKOf(strTbl) & "]=" & lngID & ";")
 End If
 getAccessionCode = strTemp
End Function

Public Function accessionCodeValid(ByVal strCode As String, Optional ByRef strTblReturn As String) As Boolean
  'returns true if accessionCode format is valid, false otherwise
  'assume false unless true:
  accessionCodeValid = False
  Dim colCode As New Collection
  Set colCode = csv_parseCSVstring(strCode, ".")
  'must have DB.Tbl.PK#.Confim.Date format = 3-5 items
  If colCode.Count >= 3 And colCode.Count <= 5 Then
    If colCode.Count < 4 Then colCode.Add "OKTEXT"
    If colCode.Count < 5 Then colCode.Add "1/1/2004"
    strTblReturn = colCode(2)
    '1 must be Alpha only, ditto for 2, 3 numeric, 4 is alphanum, 5 is date
      accessionCodeValid = isAlpha(colCode(1)) * isAlpha(colCode(2)) * IsNumeric(colCode(3)) * isAlphaNumeric(colCode(4)) * IsDate(colCode(5))
  End If
End Function

Public Function getPKfromAccessionCode(strAccession As String, Optional strTbl As String) As Long
 Dim inttemp As Integer, strTemp As String, intStart As Integer, lngRet As Long
 'no accesion code
 If Trim(strAccession) = " " Or Trim(strAccession) = "" Then GoTo exitThisOK
 'invalid accCode
 If Not accessionCodeValid(strAccession) Then GoTo exitThisOK
 
 On Error GoTo exitErr
 'get second phrase separated by .
 intStart = 0
 If strTbl = "" Then
   For inttemp = 1 To Len(strAccession)
     If Mid(strAccession, inttemp, 1) = "." Then
       If intStart > 0 Then Exit For
       intStart = inttemp + 1
     End If
   Next inttemp
   strTbl = Mid(strAccession, intStart, (inttemp) - (intStart))
 End If
 'if in translation table, use that value:
 Dim strRealTbl As String
 strRealTbl = getAccessionInfo("table", strTbl)
 If strRealTbl <> "" Then strTbl = strRealTbl
 
 
'get PK of table
 strTemp = getvalFrmSQL("SELECT [" & WhatIsPKOf(strTbl) & "] from " & strTbl & " where accessionCode=""" & strAccession & """;")
 If IsNumeric(strTemp) And strTemp <> "" Then
  lngRet = strTemp
 End If
exitThisOK:
 If lngRet = 0 Then
   getPKfromAccessionCode = -1
 Else
  getPKfromAccessionCode = lngRet
 End If
 Exit Function
exitErr:
 Debug.Print "getPKFromAccessionCode>> err: " & Err.Description
 Resume exitThisOK
End Function

Public Function getAccessionInfo(strType As String, strAbbrv As String, Optional blnInvert As Boolean) As String
 'function   looks in x_accessionInfo and fetches any info found on abbrev
 'if blnINvert, then get abbrev from fulltext
 Dim strTemp As String
 
 If blnInvert Then
 strTemp = getvalFrmSQL("select abbrev from x_accessionInfo where infoType=""" & strType & """ and fulltext= """ & strAbbrv & """;")
  Else
strTemp = getvalFrmSQL("select fulltext from x_accessionInfo where infoType=""" & strType & """ and abbrev= """ & strAbbrv & """;")
 End If

getAccessionInfo = strTemp
End Function

Public Function writeNewAccCode(strTable As String, lngID As Long) As String
  'function returns a new AccessionCode, given table and ID in table.  Assumes vegbranch database and generates a 15Char random string for confirm code
  Dim strTemp As String, inttemp As Integer
  strTemp = getAccessionInfo("table", strTable, True)
  Dim strRdm As String
  strRdm = DateDiff("s", #1/1/2001#, Now())             'number of seconds this millineum
  For inttemp = 1 To 7 'hardCODE  confirm code length, after datechk
    strRdm = strRdm & getRandomChar()
  Next inttemp
  writeNewAccCode = "VBrTEMP." & strTemp & "." & lngID & "." & strRdm 'HARDcODE  db : hardcoded b/c this function will be accessed a lot: dont want manual lookup
End Function


Public Function FillInMissingAccCodesInVBModl(Optional strTblOnly As String, Optional lngPKOnly As Long)
  'function looks in vegbank module for any accessionCodes that are null and writes new ones
  'MTL 10-Jan-2004
  
  
  Dim rstFlds As New ADODB.Recordset
  rstFlds.Open "select * from Z_FieldDescription where [module]=""vegbank"" and [fieldName]=""accessionCode""" _
    & IIf(strTblOnly <> "", " and tableName=" & SQLizeTxt(strTblOnly), "") & ";", _
    CurrentProject.Connection, adOpenForwardOnly, adLockReadOnly, adCmdText
  With rstFlds
  Do Until .EOF
    'have table, write SQL to update any null accessionCodes
    Dim strSQL As String
    Dim strWhatToUpdate As String
    If lngPKOnly <= 0 Then
      strWhatToUpdate = " accessionCode is null"
    Else
      strWhatToUpdate = "[" & WhatIsPKOf(!TableName) & "] =" & lngPKOnly
    End If
    strSQL = "UPDATE [" & !TableName & "] SET AccessionCode= " _
      & " writeNewAccCode(""" & !TableName & """,[" & WhatIsPKOf(!TableName) & "])  WHERE " & strWhatToUpdate & ";"
    DoCmd.RunSQL strSQL
  .MoveNext
  Loop
  End With
End Function

Public Function getRandomChar() As String
  Dim lngTemp As Integer
  lngTemp = Int(Rnd() * 36) + 1
  'now have something between 1 and 36
  'if 1-26 then A-Z
  Dim strTemp As String
  If lngTemp <= 26 Then
    strTemp = Chr(lngTemp + 64) 'A-Z from 1-26
  Else
    strTemp = lngTemp - 27 '0-9
  End If
   getRandomChar = strTemp
   
End Function


Public Function processAccCodeReceipt(strFile As String, Optional blnNoImport As Boolean)
  'this functin processes a receipt from vegbank with accessionCode info: the old AccCodes here are mapped to new ones in VegBank
  Dim strTbl As String, strStdErr As String
  strStdErr = "  Please make sure that your receipt file wasn't edited after download from VegBank and try again."
  strTbl = "x_accessionCode_receipt"
  'import to table
  If Not blnNoImport Then importCSV2table_new strTbl, strFile, False, True
  'validate:
  
  Dim rstValid As New ADODB.Recordset
  rstValid.Open "select * from [" & strTbl & "]", CurrentProject.Connection, adOpenForwardOnly, adLockReadOnly, adCmdText
  With rstValid
  If .EOF Then
    'nothing to process
    msgBox "No records were imported from the receipt file." & strStdErr
    GoTo exitthis
  End If
  Do Until .EOF
    'something to process
    Dim strValidationErrs As String
    strValidationErrs = validateAccCodeUpdate(Nz(!yourAccessionCode), Nz(!VegBankAccessionCode))
    If strValidationErrs = "" Then
      'ok, keep going
    Else
      msgBox "The accessionCodes in your receipt file were not valid:" & Chr(13) & strValidationErrs & strStdErr
      GoTo exitthis
    End If
    
  .MoveNext
  Loop
  End With
  rstValid.Close
  Set rstValid = Nothing
  'ok the file is valid, do the updates
  Dim rstUpdate As New ADODB.Recordset
  rstUpdate.Open "select * from [" & strTbl & "]", CurrentProject.Connection, adOpenForwardOnly, adLockReadOnly, adCmdText
  With rstUpdate
  Do Until .EOF
    'update one AccCode:
    Dim strOld As String, strNew As String
    strOld = !yourAccessionCode
    strNew = !VegBankAccessionCode
    Dim strAbbrevTbl As String, strFullTbl As String
    strAbbrevTbl = ""
    'get table to update, 2 letters:
    Call accessionCodeValid(strOld, strAbbrevTbl)
    strFullTbl = getAccessionInfo("table", strAbbrevTbl)
    'have table to update, do so
    If globaldebug > 0 Then Debug.Print "running:" & "UPDATE [" & strFullTbl & "] set accessionCode='" & strNew & "' WHERE accessionCode='" & strOld & "';"
    DoCmd.RunSQL "UPDATE [" & strFullTbl & "] set accessionCode='" & strNew & "' WHERE accessionCode='" & strOld & "';"
    
    'update any loading module tables, too
    Dim strErrsLoadMod As String
    strErrsLoadMod = ""
    If updateLoadingModAccCodes(strOld, strNew, strErrsLoadMod, False) = False Then
      'error getting loading module updates
      msgBox "there was an error updating codes in your loading module, some accessionCodes may be left not-updated." & Chr(13) & strErrsLoadMod
    End If
  .MoveNext
  Loop
  End With
  rstUpdate.Close
  Set rstUpdate = Nothing
exitthis:
  Exit Function
  
End Function

Public Function validateAccCodeUpdate(strOld As String, strNew As String) As String
  'returns string message reporting error in accessionCodes if there is one, else ""
    'must have all records for YourAccCode and VegBankAccCode, and values must be valid
    Dim strYourTbl As String, strVBTbl As String, strRep As String
    strYourTbl = ""
    strVBTbl = ""
    If accessionCodeValid(Nz(strOld), strYourTbl) And accessionCodeValid(Nz(strNew), strVBTbl) Then
       'ok, now check that both from same table
       If strYourTbl = strVBTbl And strYourTbl <> "" Then
         'ok
       Else
         'NOT ok, must match accCode table type
         strRep = strOld & " and " & strNew & " are both valid accessionCodes in your data, but they are not linked to the same table.  "
           
         GoTo exitthis
       End If
      Else
       'not ok, report error and quit
       strRep = "You have invalid or null accessionCodes."
       GoTo exitthis
    End If
exitthis:
    validateAccCodeUpdate = strRep
End Function

Public Function updateLoadingModAccCodes(strOld As String, strNew As String, ByVal strRetErrs As String, Optional blnValidate As Boolean) As Boolean
  'function updates any accessinCodes in loading module from old to new
  If blnValidate Then
    strRetErrs = "" 'init return var
    Dim strNotValid As String
    strNotValid = validateAccCodeUpdate(strOld, strNew)
    If strNotValid <> "" Then
      'errors, return false
      strRetErrs = strNotValid
      GoTo exitthis
    End If
  End If
  Dim rstToUpdate As New ADODB.Recordset
  rstToUpdate.Open "select * from x_accessionCode_maintain", CurrentProject.Connection, adOpenForwardOnly, adLockReadOnly, adCmdText
  With rstToUpdate
    Do Until .EOF
    'have something to update, do it
    If globaldebug > 0 Then Debug.Print "running:" & "update [" & !Table & "] set [" & !accField & "]='" & strNew & "' WHERE [" & !accField & "]='" & strOld & "';"
    DoCmd.RunSQL "update [" & !Table & "] set [" & !accField & "]='" & strNew & "' WHERE [" & !accField & "]='" & strOld & "';"
    .MoveNext
    Loop
  End With
  updateLoadingModAccCodes = True
exitthis:
  
  Exit Function
End Function
