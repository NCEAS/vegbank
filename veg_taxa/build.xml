<?xml version="1.0"?>
<!-- 
  * build.xml
  *
  *	Authors: John Harris
  *	Copyright: 2000 Regents of the University of California and the
  *	National Center for Ecological Analysis and Synthesis
  *	Build file for the Ant cross-platform build system for metacat
  *	See http://jakarta.apache.org for details on Ant  
  *  
  * This build file will build the plant taxonomy database
  * software and insert a small test data set into the 
  * resulting database.  The test data set is stems from the 
  * 1996 and 2000 usda plants list and the test dataset 
  * (at this point contains data for the Juglandacea, Pineacea
  * and the Aster Genre) 
  *
  * usage: ant [compile|jar|install|jdoc]
--> 
<project name="plants_dev" default="jar" basedir=".">


	<property file="build.properties" />

<target name="init">
	<tstamp/>

  
	<property name="top.dir" value="${basedir}/.." />
	<property name="top.lib.dir" value="${top.dir}/lib" />
	<property name="top.build.dir" value="${top.dir}/build" />
	<property name="db_prop_file" value="./lib/database.properties" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="build_bin" value="${build.dir}/bin" />
	<property name="build_sql" value="${build.dir}/sql" />
	<property name="build.lib.dir" value="${build.dir}/lib" />
	<property name="build_src" value="${build.dir}/src" />
	<property name="build_data" value="${build.dir}/data" />
	<property name="release" value="development"/>
	
	<property name="data" value="./taxaData"/>
	<property name="src" value="./src"/>
	<property name="bin" value="./bin"/>
	<property name="sql" value="./sql"/>
	<property name="lib" value="./lib"/>
	<property name="xmlFiles" value="./xmlfiles"/>
	<property name="xml_dir" value="./xmlfiles"/>
	<property name="servlet_lib" value="/usr/local/devtools/jakarta-tomcat/webapps/framework/WEB-INF/lib/"/>
	
	<property name="toolsdir" value="/usr/local/devtools" />

  <property name="build.test.dir" value="${build.dir}/test"/>
  <property name="reports.dir" value="${top.build.dir}/reports"/>
  <property name="reports.test.dir" value="${reports.dir}/testreports"/>
  <property name="test.dir" value="${basedir}/test" />
  <property name="test.unit.src.dir" value="${test.dir}/unit"/>

  
  <!-- FIXME: Move into higher level -->
  <property name="torque.home" value="../common/datamodel/torque-3.0" />	
  <property name="torque.contextProperties" value="${build.dir}/torque-build.properties"/>
 
  
	<property name="xmljars" value="${top.lib.dir}/xalan_1_2_2.jar:${top.lib.dir}/xerces_1_3_1.jar"/> <!--:${top.lib.dir}/xml-apis.jar"/>-->
  <property name="vegclass.common.jar" value="${top.lib.dir}/vegclass_common.jar"/>
  <property name="utils.jar" value="${top.lib.dir}/utils.jar"/>
	<property name="cpath" value="${build.dir}:${xmljars}:${vegclass.common.jar}:${utils.jar}"/>			
	<property name="cpath.test" value="${cpath}:${build.lib.dir}/planttaxonomy.jar"/>			

	<filter token="version" value="development"/>
	<filter token="dist" value="dist"/>
	<filter token="ant.project.name" value="${ant.project.name}"/>
	<filter token="database.hostname" value="${hostname}"/>
		
	
</target>




<target name="prepare" depends="init" description="==> prepares the build system">
	<mkdir dir="${build.dir}" />
	<mkdir dir="${build_bin}" />
	<mkdir dir="${build_sql}" />
	<mkdir dir="${build_src}" />
	<mkdir dir="${build.lib.dir}" />
	<mkdir dir="${build_data}" />
		
	<!-- copy the sql scripts required to
			run the software 
		-->
	<copy todir="${build_sql}" filtering="yes">
    <fileset dir="${sql}" includes="**/*.sql"/>
  </copy>
	
	<!-- copy the java src code 
	-->
  <copy todir="${build_src}" filtering="yes">
    <fileset dir="${src}" includes="**/*.java"/>
  </copy>
   
  <copy todir="${build_src}" filtering="yes">
    <fileset dir="${xmlFiles}" includes="**/*.dtd **/*.xsl **/*.xml"/>
  </copy>
         
<!--										
	<copy file="${db_prop_file}" 
		todir="${build_src}"/>
-->	

  <copy todir="${build_bin}" filtering="yes">
    <fileset dir="${bin}" includes="**/*.sh **/*.bat"/>
  </copy>

  <copy todir="${build_data}" filtering="yes">
    <fileset dir="${data}" includes="plantlst1996.bin.gz plantlst2000.bin.gz"/>
  </copy>

  <copy todir="${build.lib.dir}" filtering="yes">
    <fileset dir="${sql}" includes="**/*sql"/>
  </copy>
 
  <copy todir="${build.lib.dir}" filtering="yes">
    <fileset dir="${xmlFiles}" includes="**/*xsl"/>
  </copy>
       	
	<chmod dir="${build_bin}"
		perm="a+x"
		includes="**/*.sh"
	/>
</target>	



	
<target name="compile" depends="prepare" description="==> compiles the data loaders ">
  <echo>${cpath}</echo>
	<javac srcdir="${build_src}" 
		classpath="${cpath}"
		includes="PlantTaxaLoader.java USDAPlantsToXml.java USDAPlantsLoader.java USDAPlantsLoader2000.java" 
		destdir="${build_src}"
  >
    <include name="org/vegbank/plants/**/*java"/>
  </javac>
</target>	

	
<target name="jar" depends="compile" description="==> creates a jar file and sticks it in the lib directory">

	<jar jarfile ="${build.lib.dir}/planttaxonomy.jar"
		basedir="${build_src}"
		includes="${build_src}/ **.class **.dtd **.xsl  **.properties
    org/vegbank/plants/**/*class"
	/>
	<!-- COPY THE JAR ARCHIVE BACK TO THE LIB DIRECTORY -->
	<copy todir="${lib}"> 
    <fileset dir="${build.lib.dir}"/>
  </copy>	
  
</target>		

<target name="deploy" depends="jar"
        description="==> deploys all the project resources">
</target>

  <target name="clean" depends="init" description="==> Remove all generated files">
      <delete dir="${build.dir}"/>
  </target>

  <!-- ================================================================ -->
  <!-- TEST RELATED TARGETS                                             -->
  <!-- ================================================================ -->
  <!-- Compiling, running and generating reports for tests              -->
  <!-- ================================================================ -->

  <target name="test-prepare" depends="prepare">

    <property name="build.test.classes.dir" value="${build.test.dir}/classes"/>
    <mkdir dir="${build.test.dir}"/>
    <mkdir dir="${reports.test.dir}"/>
    <mkdir dir="${build.test.classes.dir}"/>
    <mkdir dir="${build.test.dir}/src"/>

  </target>

  <target name="test" depends="test-prepare"
          description="=> Run all the junit tests">

    <!-- copy and compile the tests into a jar file -->
    <copy todir="${build.test.dir}/src">
      <fileset dir="${test.unit.src.dir}">
        <include name="**/*java"/>
      </fileset>
    </copy>
    
    <echo>${cpath.test}</echo>
    
    <javac srcdir="${test.unit.src.dir}"
           destdir="${build.test.classes.dir}"
           classpath="${cpath.test}"
           includes="**/*.java" />

    <jar jarfile="${build.lib.dir}/${ant.project.name}-junittests.jar"
         basedir="${build.test.classes.dir}"
         includes="**/*.class" />

    <!-- use the ant "junit" task to run JUnit tests. -->
    <junit printsummary="yes" haltonfailure="no" fork="no"
           haltonerror="no">
      <classpath>
        <pathelement path="${cpath}"/>
        <fileset dir="${build.lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <formatter type="xml" />

      <batchtest fork="yes" todir="${reports.test.dir}">
        <fileset dir="${build.test.classes.dir}">
          <include name="**/*.class" />
        </fileset>
      </batchtest>
    </junit>

  </target>


</project>
