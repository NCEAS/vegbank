<?xml version="1.0"?>
<!-- 
  * build.xml
  *
  * Global build script for vegclass. This simply allows running all the sub 
  * scripts from one place.
  *
  *     '$Author: farrell $'
  *     '$Date: 2003-11-25 19:50:38 $'
  *     '$Revision: 1.30 $'
--> 
<project name="Vegbank" default="jar" basedir=".">

	
  <target name="prepare">
    <property environment="env" />
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.src.dir" value="${build.dir}/src"/>
    <property name="build.sql.src.dir" value="${build.src.dir}/sql"/>
    <property name="build.java.src.dir" value="${build.src.dir}/java"/>   
    <property name="build.script.src.dir" value="${build.src.dir}/scripts"/>   
    <property name="build.javadatamodel.src.dir" value="${build.java.src.dir}/org/vegbank/common/model"/>  
    <property name="build.javadatamodel.utility.src.dir" value="${build.javadatamodel.src.dir}/utility"/>  
    <property name="build.classes.dir" value="${build.dir}/classes"/>   
    <property name="build.reports.dir" value="${build.dir}/reports"/>
    <property name="build.reports.test.dir" value="${build.reports.dir}/testreports"/>
    <property name="build.docs.dir" value="${build.dir}/docs"/>
    <property name="build.docs.api.dir" value="${build.docs.dir}/javadoc"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="docs.dir" value="${basedir}/docs"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="rmi.dist.dir" value="${dist.dir}/RMIServer"/>
    <property name="bin.dir" value="${basedir}/bin"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="java.src.dir" location="${src.dir}/java" />
    <property name="xsl.src.dir" value="${src.dir}/xsl"/>
    <property name="sql.src.dir" value="${src.dir}/sql"/>
    <property name="ant.style.dir" location="${env.ANT_HOME}/etc" />

    <condition property="webapp" value="vegbank">
    	<not><isset	property="webapp"/></not>
	</condition>
	<echo>init webapp '${webapp}'</echo>
    <property name="web.context" location="${env.TOMCAT_HOME}/webapps/${webapp}" />
    <property name="web.inf" location="${web.context}/WEB-INF" /> 
    <property name="web.lib.dir" location="${web.inf}/lib" /> 
    
    <property name="vegbank.home.dir" location="/usr/vegbank"/>
    
    <property name="db.name" value="vegbank" />
    
    <mkdir dir="${build.src.dir}"/>
    <mkdir dir="${build.sql.src.dir}"/>
    <mkdir dir="${build.java.src.dir}"/>  
    <mkdir dir="${build.script.src.dir}"/>  
    <mkdir dir="${build.reports.dir}"/>
    <mkdir dir="${build.reports.test.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${build.javadatamodel.src.dir}"/>
    <mkdir dir="${build.javadatamodel.utility.src.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${rmi.dist.dir}"/>
    <mkdir dir="${build.docs.dir}"/>
    <mkdir dir="${build.docs.api.dir}"/>

    <!-- Classpaths -->
    <path id="classpath.compilation">
      <pathelement path="veg_taxa/build/lib/planttaxonomy.jar"/>
      <pathelement path="veg_community/build/lib/vegcommunity.jar"/>
      <fileset dir="${lib.dir}">
        <include name="**/*jar"/>
      </fileset>
    </path>
  </target>
    
  <target name="jar" depends="compile"
          description="==> Generates all jars in vegbank">
    
    <jar destfile="${lib.dir}/vegbank_datamodel.jar">
   		<fileset dir="${build.classes.dir}" casesensitive="yes">
        	<include name="org/vegbank/**/*.class"/>
      </fileset>
    </jar> 
    
    <ant dir="common" target="jar" inheritAll="false"/>
    <ant dir="veg_community" target="jar" inheritAll="false"/>
    <ant dir="veg_taxa" target="jar" inheritAll="false"/>
    <ant dir="veg_plot" target="jar" inheritAll="false"/>
    
  </target>

  <target name="run-tests" description="==> Run all the tests availible">
    <ant dir="veg_plot" target="run-tests" inheritAll="false"/> 
    <ant dir="common" target="test" inheritAll="false"/>
    <ant dir="veg_taxa" target="test" inheritAll="false"/>
  </target>
  
  <target name="deploy" depends="jar,deploy-prepare"
          description="==> deploys vegclass module jars, html and other resources">
    
	<echo>---------DEPLOYING common---------------</echo>
    <ant dir="common" target="deploy" inheritAll="false"/>
	<echo>---------DEPLOYING veg_community---------------</echo>
    <ant dir="veg_community" target="deploy" inheritAll="false"/>
	<echo>---------DEPLOYING veg_taxa---------------</echo>
    <ant dir="veg_taxa" target="deploy" inheritAll="false"/>
	<echo>---------DEPLOYING veg_plot---------------</echo>
    <ant dir="veg_plot" target="deploy" inheritAll="false"/>
  
  </target>

  <target name="deploy-vegtest"
          description="==> deploys vegclass module jars, html and other resources to the vegtest instance">
  	<property name="webapp" value="vegtest"/>
	<antcall target="jar"/>
	<antcall target="deploy-prepare"/>

    <ant dir="common" target="deploy-vegtest" inheritAll="false"/>
    <ant dir="veg_community" target="deploy" inheritAll="false"/>
    <ant dir="veg_taxa" target="deploy" inheritAll="false"/>
    <ant dir="veg_plot" target="deploy-vegtest" inheritAll="false"/>
  </target>

  <target name="deploy-prepare" depends="prepare">
    <mkdir dir="${web.context}"/>
    <mkdir dir="${web.inf}"/>
    <mkdir dir="${web.lib.dir}"/>
  </target>

  <target name="clean" depends="prepare" description="==> Remove all generated files">
    <delete dir="${build.dir}"/>
    <ant dir="common" target="clean" inheritAll="false"/>
    <ant dir="veg_plot" target="clean" inheritAll="false"/>
    <ant dir="veg_community" target="clean" inheritAll="false"/>
    <ant dir="veg_taxa" target="clean" inheritAll="false"/>
  </target>


  <target name="dist" depends="deploy, javadoc">
    <copy todir="${web.context}/dev">
      <fileset dir="${build.docs.dir}" casesensitive="yes"/>
    </copy>

    <ant dir="veg_plot/exp/vegbank_web" target="dist" inheritAll="false"/>
  </target>
  
  <target name="dist-vegtest" depends="deploy-vegtest">
    <ant dir="veg_plot/exp/vegbank_web" target="dist-vegtest" inheritAll="false"/>
  </target>
  
  <target name="dist-reports" 
          depends="prepare"
          description="==> Generate htmls from generated reports and distributes to web">

    <ant dir="common" target="dist-testreport" inheritAll="false"/>
    <!--<ant dir="veg_plot" target="run-tests" inheritAll="false"/>-->
    <ant dir="veg_community" target="clean" inheritAll="false"/>
    <ant dir="veg_taxa" target="test" inheritAll="false"/>
 
		<!-- Create a report from the junit output -->
		<junitreport todir="${build.reports.test.dir}">
	  		<fileset dir="${build.reports.test.dir}">
	  			<include name="TEST-*.xml"/>
			</fileset>
	  		<report format="frames"
				        todir="${web.context}/dev/reports/junit"
	              styledir="${ant.style.dir}"/>
	  	</junitreport>
	
	</target>


  <target name="generate_java_datamodel"
          description="==> Generate the java datamodel"
          depends="prepare">
         
	<!-- Generate the regular VBModelBeans -->
	<java classname="org.apache.xalan.xslt.Process"
		fork="true">
		<arg line="-IN ${docs.dir}/xml/db_model_vegbank.xml -XSL ${xsl.src.dir}/VegBankModel2Java.xsl -OUT ${build.java.src.dir}/generate_java_datamodel-HAS_BEEN_RUN_FLAG -PARAM outdir ${build.javadatamodel.src.dir}/"/>
		<jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
	</java>

	<!-- Generate the Utility javabeans e.g. state -->
	<java classname="org.apache.xalan.xslt.Process"
		fork="true">
		<arg line="-IN ${docs.dir}/xml/utility/UtilityBeans.xml -XSL ${xsl.src.dir}/UtilityXMLToJavaBeans.xsl -OUT ${build.java.src.dir}/generate_java_datamodel_utility-HAS_BEEN_RUN_FLAG -PARAM outdir ${build.javadatamodel.utility.src.dir}/"/>
		<jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
	</java>


  </target>
  
  <target name="compile"
          depends="generate_java_datamodel"
          description="==> Compile the java code">

    <echo>${java.src.dir} to ${build.java.src.dir}</echo>
    <copy todir="${build.java.src.dir}">
      <fileset dir="${java.src.dir}">
        <include name="org/**/*java"/>
      </fileset>
    </copy>

    <javac srcdir="${build.java.src.dir}"
      includes="**/*.java"
      destdir="${build.classes.dir}">			
      <classpath refid="classpath.compilation"/>
   </javac>
  
  </target>
 
  <target name="install"
          depends="deploy"
          description="==> Install the application">
    <mkdir dir="${vegbank.home.dir}/lib"/>
    <mkdir dir="${vegbank.home.dir}/bin"/>
    <mkdir dir="${vegbank.home.dir}/originalDataStore"/>
    
    <copy todir="${vegbank.home.dir}/lib">
      <fileset dir="${lib.dir}">
         <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${docs.dir}/xml/dataxml">
	<include name="**/*.xsd"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/lib">
      <fileset dir="veg_plot/build/lib">
         <include name="**/*.jar"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/bin">
      <fileset dir="${bin.dir}">
         <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/bin">
      <fileset dir="${build.script.src.dir}">
         <include name="**/*"/>
      </fileset>
    </copy>


    <chmod perm="a+x">
      <fileset dir="${vegbank.home.dir}/bin">
         <include name="**/*"/>
      </fileset>
    </chmod>
  </target> 

  <!-- ================================================================= -->
  <!-- Generate Javadoc                                                  -->
  <!-- ================================================================= -->
  <target name="javadoc"
          depends="prepare"
          description="==> Generate projects javadoc">
 
    <javadoc 
      destdir="${build.docs.api.dir}"
      author="true"
      version="true"
      use="true"
      source="1.4"
      nodeprecated="false"
      private="true"
      
      windowtitle="${ant.project.name} API">

      <classpath refid="classpath.compilation"/>

      <packageset dir="src" defaultexcludes="yes">
        <include name="org/**" />
      </packageset>

      <packageset dir="common/src" defaultexcludes="yes">
        <include name="org/**" />
      </packageset>

      <packageset dir="veg_plot/src" defaultexcludes="yes">
        <include name="org/vegbank/**" />
      </packageset>

      <packageset dir="veg_taxa/src" defaultexcludes="yes">
        <include name="org/vegbank/**" />
      </packageset>

      <packageset dir="veg_community/src" defaultexcludes="yes">
        <include name="org/vegbank/**" />
      </packageset>

      <packageset dir="${build.java.src.dir}" defaultexcludes="yes">
        <include name="org/vegbank/**" />
      </packageset>
      
      <doctitle><![CDATA[<h1>${ant.project.name}</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2001-2003 vegbank.org. All Rights Reserved.</i>]]></bottom>
      <tag name="TODO" scope="all" description="To do:" />
      <tag name="FIXME" scope="all" description="Fix me:" />
      <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
      <link href="http://java.sun.com/j2se/1.4.1/docs/api"/>
      <link href="http://jakarta.apache.org/struts/api"/>
    </javadoc>

  </target>

          
  <!-- ================================================================= -->
  <!-- Database related targets                                          -->
  <!-- ================================================================= -->

  <target name="db_generate_sql"
          description="==> Generate the sql build scripts"
          depends="prepare">
          
	    <xslt in="${docs.dir}/xml/db_model_vegbank.xml" 
	          out="${build.sql.src.dir}/vegbank.sql" 
	          style="${xsl.src.dir}/VegBankModel2SQL.xsl">
	    </xslt>
  </target>

  <!-- A simple checker between the model and the database, NOT definative -->
  <target name="db_generate_verify_script"
          description="==> Generate the database verify script"
          depends="prepare">
          
	    <xslt in="${docs.dir}/xml/db_model_vegbank.xml" 
	          out="${build.script.src.dir}/VerifyDatabase.pl" 
	          style="${xsl.src.dir}/VerifyDatabaseGen.xsl">
	    </xslt>
  </target>

  <target name="db_generate_archive_triggersql"
          description="==> Generate the archive trigger sql scripts"
          depends="prepare">
          
	    <xslt in="${docs.dir}/xml/db_model_vegbank.xml" 
	          out="${build.sql.src.dir}/trigger.sql" 
	          style="${xsl.src.dir}/VegbankModel2RevisionTriggersSQL.xsl">
	    </xslt>
  </target>


  <target name="db_rebuild_empty_vegbank"
          description="==> Rebuild the vegbank Database"
          depends="db_generate_sql">
    
    <input message="Please enter the database name you wish to recreate: " addproperty="inputDBName" />
  
    <condition property="noDBName">
      <equals arg1="" arg2="${inputDBName}" />
    </condition>
  
    <fail if="noDBName">You did not enter a database name.</fail>

    <!-- DROP and CREATE Database -->
    <exec executable="${bin.dir}/rebuilddb.sh">
      <arg value="${inputDBName}"/>
      <arg value="${build.sql.src.dir}/vegbank.sql"/>
    </exec>

    <antcall target="grant_db_privilages"/>
  </target>
  
  <target name="db_pre_load"
          description="==> Preload data into database"
          depends="prepare">
    <exec executable="${bin.dir}/run_sql.sh">
      <arg value="${db.name}"/>
      <arg value="${sql.src.dir}/insert_preload_ANSI.sql"/>
    </exec>
  </target>

  <target name="grant_db_privilages"
          description="==> Grant privilages to qa user"
          depends="prepare">
    <!-- Grant privilages -->
    <exec executable="bin/qa_user/grantQAPrivil.pl"/>
  </target>

</project>
