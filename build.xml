<?xml version="1.0"?>
<!-- 
  * build.xml
  *
  * Global build script for vegbank.
  * The build.context must be entered for all task, to avoid this hassle you 
  * can call ant like this:
  *  % echo "[build.context]" | ant [target]
  *
  *     '$Author: anderson $'
  *     '$Date: 2004-12-03 19:46:30 $'
  *     '$Revision: 1.54 $'
-->
<project name="Vegbank" default="jar" basedir=".">
  <!-- ================================================================= -->
  <!-- Initialize simple properties, no context handling                 -->
  <!-- ================================================================= -->
  <target name="init">
    <tstamp>
      <format property="currentTime" pattern="MM/dd/yyyy hh:mm:ss aa"/>
    </tstamp>
    <property environment="env"/>

    <!-- can set this to false in command line using -DfailOnModelDiff=false to override the failure of deploy-all when the model is different from db_model.xml -->
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.src.dir" value="${build.dir}/src"/>
    <property name="build.status.dir" value="${build.dir}/verify"/>
    <property name="build.status.dir" value="${build.dir}/status"/>
    <property name="build.lib.dir" value="${build.dir}/lib"/>
    <property name="build.sql.src.dir" value="${build.src.dir}/sql"/>
    <property name="build.java.src.dir" value="${build.src.dir}/java"/>
    <property name="build.jsp.src.dir" value="${build.src.dir}/jsp"/>
    <property name="build.script.src.dir" value="${build.src.dir}/scripts"/>
    <property name="build.javadatamodel.src.dir" value="${build.java.src.dir}/org/vegbank/common/model"/>
    <property name="build.javadatamodel.utility.src.dir" value="${build.javadatamodel.src.dir}/utility"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.reports.dir" value="${build.dir}/reports"/>
    <property name="build.reports.test.dir" value="${build.reports.dir}/testreports"/>
    <property name="build.docs.dir" value="${build.dir}/docs"/>
    <property name="build.docs.api.dir" value="${build.docs.dir}/javadoc"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="docs.dir" value="${basedir}/docs"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="rmi.dist.dir" value="${dist.dir}/RMIServer"/>
    <property name="bin.dir" value="${basedir}/bin"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="java.src.dir" location="${src.dir}/java"/>
    <property name="xsl.src.dir" value="${src.dir}/xsl"/>
    <property name="sql.src.dir" value="${src.dir}/sql"/>
    <property name="ant.style.dir" location="${env.ANT_HOME}/etc"/>
    <property name="model.generated.flag" value="${build.java.src.dir}/generate_java_datamodel-HAS_BEEN_RUN_FLAG"/>
    <property name="vegbankVersion" value="1.0.2"/>
    <filter token="subst_lt" value="&lt;"/>
    <filter token="subst_gt" value="&gt;"/>
  </target>
  <!-- ================================================================= -->
  <!-- Read properties file, Setup filters, etc.                         -->
  <!-- ================================================================= -->
  <target name="prepare" depends="init,getContextName">
    <echo>Vegbank build.xml:  init for building context ${build.context}</echo>
    <!-- Load volatile properties from a file -->
    <!-- Load vegbank properties -->
    <condition property="build.props.file" value="${basedir}/build.properties">
      <equals arg1="${build.context}" arg2="vegbank"/>
    </condition>
    <!-- Else, load other webapp properties -->
    <condition property="build.props.file" value="${basedir}/build.${build.context}.properties">
      <not>
        <equals arg1="${build.context}" arg2="vegbank"/>
      </not>
    </condition>
    <echo>Loading props file: ${build.props.file}</echo>
    <property file="${build.props.file}"/>

    <antcall target="props_verify" description="check to see that all important build properties exist in build.properties"/>

    <!-- End conditional logic for picking up correct properties file -->
    <condition property="vegbankSchemaName" value="vegbank-data-ver${vegbankVersion}.xsd">
      <not>
        <isset property="vegbankSchemaName"/>
      </not>
    </condition>
    <echo>init webapp '${build.context}'</echo>
    <property name="web.context" location="${env.TOMCAT_HOME}/webapps/${build.context}"/>
    <property name="web.inf" location="${web.context}/WEB-INF"/>
    <property name="web.lib.dir" location="${web.inf}/lib"/>
    <property name="web.classes.dir" location="${web.inf}/classes"/>
    <!-- set the apache doc root -->
    <condition property="apache.document.root" value="/usr/www/${build.context}/htdocs">
      <not>
        <isset property="apache.document.root"/>
      </not>
    </condition>
    <property name="web.status.dir" value="${apache.document.root}/status"/>
    <!--
      * The following filters expect the database connection properties
      * be set in the user custom build.properties file. There is an example 
      * of this file in cvs.
    -->
    <filter token="databaseType" value="${databaseType}"/>
    <filter token="databaseUser" value="${databaseUser}"/>
    <filter token="databaseUserPassword" value="${databaseUserPassword}"/>
    <filter token="databasePort" value="${databasePort}"/>
    <filter token="hostname" value="${hostname}"/>
    <filter token="databaseDriverType" value="${databaseDriverType}"/>
    <filter token="databaseDriverClass" value="${databaseDriverClass}"/>
    <filter token="databaseConnectString" value="${databaseConnectString}"/>
    <filter token="databaseName" value="${databaseName}"/>
    <filter token="vegbankVersion" value="${vegbankVersion}"/>
    <filter token="vegbank.data.dir" value="${vegbank.data.dir}/"/>
    <filter token="vegbank.home.dir" value="${vegbank.home.dir}/"/>
    <filter token="schemaLocation" value="${apache.document.root}/vegdocs/xml/"/>
    <filter token="vegbankSchemaName" value="${vegbankSchemaName}"/>
    <!-- End filters created from build.${context}.properties -->
    <!-- Copied these straight from the veg_plot build.xml, are they relevant ? -->
    <!-- Servlet specific -->
    <filter token="mailHost" value="hyperion.nceas.ucsb.edu"/>
    <filter token="systemEmail" value="dba@vegbank.org"/>
    <filter token="genericForm" value="${web.context}/forms/generic_form.html"/>
    <filter token="genericTemplate" value="${web.context}/forms/tmp.html"/>
    <filter token="rmiserver" value="${rmiserver}"/>
    <filter token="uploadDir" value="${web.lib.dir}"/>
    <filter token="servlet_lib_dir" value="${web.lib.dir}/"/>
    <filter token="servlet_context" value="${web.context}/"/>
    <!--
      * Make all the build directories
    -->
    <mkdir dir="${build.src.dir}"/>
    <mkdir dir="${build.lib.dir}"/>

    <mkdir dir="${build.sql.src.dir}"/>
    <mkdir dir="${build.java.src.dir}"/>
    <mkdir dir="${build.jsp.src.dir}"/>
    <mkdir dir="${build.script.src.dir}"/>
    <mkdir dir="${build.reports.dir}"/>
    <mkdir dir="${build.reports.test.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${build.javadatamodel.src.dir}"/>
    <mkdir dir="${build.javadatamodel.utility.src.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${rmi.dist.dir}"/>
    <mkdir dir="${build.docs.dir}"/>
    <mkdir dir="${build.docs.api.dir}"/>
    <mkdir dir="${build.status.dir}"/>
    <!-- Classpaths -->
    <path id="classpath.compilation">
      <pathelement path="${build.classes.dir}"/>
      <pathelement path="${build.java.src.dir}"/>
      <!-- Pick up non java resources -->
      <fileset dir="${lib.dir}">
        <include name="**/*jar"/>
      </fileset>
    </path>
    <uptodate property="modelBeanGenerate.notRequired" targetfile="${model.generated.flag}">
      <srcfiles dir="${xsl.src.dir}" includes="**/*.xsl"/>
      <srcfiles dir="${docs.dir}" includes="**/*.xml"/>
    </uptodate>
    <!-- <echo> ${modelBeanGenerate.notRequired} </echo> -->
  </target>
  <!-- ================================================================= -->
  <!-- Make the jars                                                     -->
  <!-- ================================================================= -->
  <target name="jar" depends="compile" description="==> Generates all jars in vegbank">
    <!-- 
			The whole project in a single jar, maybe a good idea to split it
			up, but I cannot think of any advantages right now 
		-->
    <jar destfile="${build.lib.dir}/vegbank.jar">
      <fileset dir="${build.classes.dir}" casesensitive="yes">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="**/*.java"/>
        <include name="**/*.properties"/>
      </fileset>
      <fileset dir="web/includes" casesensitive="yes">
        <include name="*.properties"/>
      </fileset>
      <fileset dir="${src.dir}/xsl" casesensitive="yes">
        <include name="**/*.xsl"/>
      </fileset>
      <fileset dir="${docs.dir}/xml" casesensitive="yes">
        <include name="csvtools.xsl"/>
      </fileset>
    </jar>
    <!--
			Copy all support jars into the build dir
			before being deployed 
		-->
    <copy todir="${build.lib.dir}">
      <fileset dir="${lib.dir}" includes="*jar"/>
    </copy>
  </target>
  <!-- ================================================================= -->
  <!-- Run the unit tests                                                -->
  <!-- ================================================================= -->
  <target name="run-tests" depends="compile" description="==> Run all the tests availible">
    <!-- use the ant "junit" task to run JUnit tests. -->
    <junit printsummary="yes" haltonfailure="no" fork="no" haltonerror="no">
      <classpath refid="classpath.compilation"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${build.reports.test.dir}">
        <fileset dir="${build.classes.dir}">
          <include name="**/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
  <target name="set-deploy.target" depends="init">
    <!-- Given build.context, set deploy.target -->
    <!-- set the proper deploy target -->
    <condition property="deploy.target" value="deploy">
      <equals arg1="${build.context}" arg2="vegbank"/>
    </condition>
    <!-- else, set other webapp deployment -->
    <condition property="deploy.target" value="deploy-${build.context}">
      <not>
        <equals arg1="${build.context}" arg2="vegbank"/>
      </not>
    </condition>
    <echo>***** set-deploy.target: ${deploy.target} , ${build.context} ****************</echo>
  </target>
  <!-- ================================================================= -->
  <!-- Deploy files to webserver                                         -->
  <!-- ================================================================= -->
  <target name="deploy" depends="deploy-jars" description="==> deploys vegbank module jars, html and other resources">
    <ant target="deploy-web" inheritAll="true"/>
    <echo>db connect: ${databaseConnectString}</echo>
    <mkdir dir="${web.context}/GenJSP"/>
    <copy todir="${web.context}/GenJSP">
      <fileset dir="${build.jsp.src.dir}" includes="*jsp"/>
    </copy>
    <echo>copying ${build.java.src.dir}/velocity.properties to web context base</echo>
    <copy todir="${web.context}">
      <fileset dir="${build.java.src.dir}" includes="velocity.properties"/>
    </copy>
    <copy todir="${web.context}/xsl">
      <fileset dir="${xsl.src.dir}" includes="**/*.xsl"/>
      <fileset dir="${docs.dir}/xml" includes="csvtools.xsl"/>
    </copy>
  </target>
  <target name="check-all" description="==> collection of tasks that check to see if everything is correct">
    <antcall target="props_verify" description="check to see that all important build properties exist in build.properties"/>
    <antcall target="db_verify" description="check to see that model is implemented correctly"/>
  </target>
  <target name="deploy-all" depends="deploy-jars" description="==> deploys vegbank module jars, html and other resources">
    <antcall target="db_verify_andfail" description="check to see that model is implemented correctly"/>
    <antcall target="deploy-web-all" inheritAll="true"/>
    <echo>db connect: ${databaseConnectString}</echo>
    <mkdir dir="${web.context}/GenJSP"/>
    <copy todir="${web.context}/GenJSP">
      <fileset dir="${build.jsp.src.dir}" includes="*jsp"/>
    </copy>
    <echo>copying ${build.java.src.dir}/velocity.properties to web context base</echo>
    <copy todir="${web.context}">
      <fileset dir="${build.java.src.dir}" includes="velocity.properties"/>
    </copy>
  </target>
  <!-- ================================================================= -->
  <!-- Development deploy files to webserver (subset of total deploy)    -->
  <!-- ================================================================= -->
  <target name="dev-deploy" depends="compile,deploy-prepare" description="==> Deploys subset of resources need in dev cycle">
    <!-- Remove vegbank jar if existsi, to avoid conflicts -->
    <delete file="${web.lib.dir}/vegbank.jar"/>
    <!-- Copy files into the classes dir -->
    <copy todir="${web.classes.dir}">
      <fileset dir="${build.classes.dir}"/>
    </copy>
    <copy todir="${web.classes.dir}">
      <fileset dir="${build.java.src.dir}" casesensitive="yes">
        <include name="**/*.properties"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>
    <!-- insert actions here like deploy forms, WEB-INF etc. -->
  </target>
  <target name="deploy-jars" depends="jar,deploy-prepare,deploy-props" description="==> deploys vegbank module jars and deletes WEB-INF/classes">
    <echo message="Distr all of jars in ${ant.project.name}"/>
    <echo>deploying jars to ${web.lib.dir}</echo>
    <copy todir="${web.lib.dir}">
      <fileset dir="${build.lib.dir}" includes="*jar" excludes="servlet.jar"/>
    </copy>
    <!--echo>deleting ${web.classes.dir}</echo>
    <delete dir="${web.classes.dir}"/-->
  </target>
  <target name="deploy-props" depends="jar,deploy-prepare" description="==> deploys properties files to WEB-INF/classes">
    <echo message="Distr all properties files in ${build.lib.dir}/vegbank.jar to ${web.classes.dir}"/>
    <echo>deploying properties files to ${web.classes.dir}</echo>
    <unjar src="${build.lib.dir}/vegbank.jar" dest="${web.classes.dir}">
      <patternset>
        <include name="**.properties"/>
      </patternset>
    </unjar>
    <echo>copying ${build.java.src.dir}/velocity.properties to web context base</echo>
    <copy todir="${web.context}">
      <fileset dir="${build.java.src.dir}" includes="velocity.properties"/>
    </copy>
    <echo file="${build.status.dir}/deploy-props.txt">
      -----------------DEPLOY PROPS STATUS------------------------@subst_lt@br/@subst_gt@
      Properties last deployed at time: ${currentTime} @subst_lt@br/@subst_gt@
      Connection to database Name: ${databaseName} @subst_lt@br/@subst_gt@
      Deployed from : ${basedir} @subst_lt@br/@subst_gt@
      vegbank version: ${vegbankVersion} @subst_lt@br/@subst_gt@
      ---------------------------------------------------------------------@subst_lt@br/@subst_gt@
      </echo>

    <!-- check the model, but don't fail on errors! -->
    <antcall target="db_verify" />
    <!-- copy status files to the file to server -->
    <copy todir="${web.status.dir}"  filtering="yes" overwrite="yes">
      <fileset dir="${build.status.dir}" includes="*.*" />
    </copy>

  </target>
  <!-- ================================================================= -->
  <!-- Deploy only web resources                                         -->
  <!-- ================================================================= -->
  <target name="deploy-web" depends="deploy-prepare, set-deploy.target">
    <echo>*********After set-deploy.target: ${deploy.target}, ${build.context}, ${hostname}</echo>
    <ant dir="web" target="${deploy.target}" inheritAll="false">
      <property name="hostname" value="${hostname}"/>
    </ant>
  </target>
  <target name="deploy-web-all" depends="deploy-prepare, set-deploy.target">
    <echo>*********After set-deploy.target: ${deploy.target}-all, ${build.context}, ${hostname}</echo>
    <ant dir="web" target="${deploy.target}-all" inheritAll="false">
      <property name="hostname" value="${hostname}"/>
    </ant>
  </target>
  <!-- ================================================================= -->
  <!-- Pave the way for a deployment                                     -->
  <!-- ================================================================= -->
  <target name="deploy-prepare" depends="prepare">
    <mkdir dir="${web.context}"/>
    <mkdir dir="${web.inf}"/>
    <mkdir dir="${web.lib.dir}"/>
    <mkdir dir="${web.classes.dir}"/>
  </target>
  <!-- ================================================================= -->
  <!-- Remove all Generated files                                        -->
  <!-- ================================================================= -->
  <target name="clean" depends="init" description="==> Remove all generated files">
    <delete dir="${build.dir}"/>
  </target>
  <target name="dist" depends="deploy, javadoc">
    <copy todir="${web.context}/dev">
      <fileset dir="${build.docs.dir}" casesensitive="yes"/>
    </copy>
    <ant dir="exp/vegbank_web" target="dist" inheritAll="false"/>
  </target>
  <target name="dist-reports" depends="prepare, run-tests" description="==> Generate htmls from generated reports and distributes to web">
    <!-- Create a report from the junit output -->
    <junitreport todir="${build.reports.test.dir}">
      <fileset dir="${build.reports.test.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${web.context}/dev/reports/junit" styledir="${ant.style.dir}"/>
    </junitreport>
    <echo>
	**************************************************
	Reports distributed to ${build.context}/dev/reports on tomcat
	**************************************************	
    </echo>
  </target>
  <!-- ================================================================= -->
  <!-- Generate model beans, XML Digester rules, XML schema and JSP from -->
  <!-- the datamodel XML and generate utility                            -->
  <!-- javabeans                                                         -->
  <!-- ================================================================= -->
  <target name="generate_java_datamodel" description="==> Generate the java datamodel -- beans, utility classes, schema, Generic display JSP and Digester rules" depends="prepare" unless="modelBeanGenerate.notRequired">
    <!-- DOES NOT PICKUP CORRECT XSLT PROCCESOR FOR ME -->
    <xslt in="${docs.dir}/xml/db_model_vegbank.xml" style="${xsl.src.dir}/VegBankModel2Java.xsl" out="${build.java.src.dir}/generate_java_datamodel-HAS_BEEN_RUN_FLAG">
      <param name="outdir" expression="${build.javadatamodel.src.dir}/"/>
      <classpath refid="classpath.compilation"/>
    </xslt>
    <echo>Generating the regular VBModelBeans into ... ${build.javadatamodel.src.dir}/</echo>
    <java classname="org.apache.xalan.xslt.Process" fork="true">
      <arg line="-IN ${docs.dir}/xml/db_model_vegbank.xml -XSL ${xsl.src.dir}/VegBankModel2Java.xsl -OUT ${model.generated.flag} -PARAM outdir ${build.javadatamodel.src.dir}/"/>
      <jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
    </java>
    <echo>Generate the Utility javabeans e.g. state into ... ${build.javadatamodel.utility.src.dir}/ </echo>
    <java classname="org.apache.xalan.xslt.Process" fork="true">
      <arg line="-IN ${docs.dir}/xml/utility/UtilityBeans.xml -XSL ${xsl.src.dir}/UtilityXMLToJavaBeans.xsl -OUT ${model.generated.flag} -PARAM outdir ${build.javadatamodel.utility.src.dir}/"/>
      <jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
    </java>
    <echo>Generate the jsp for displaying entities into ... ${build.jsp.src.dir}/ </echo>
    <java classname="org.apache.xalan.xslt.Process" fork="true">
      <arg line="-IN ${docs.dir}/xml/db_model_vegbank.xml -XSL ${xsl.src.dir}/VegBankModel2JSP.xsl -OUT ${model.generated.flag} -PARAM outdir ${build.jsp.src.dir}/"/>
      <jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
    </java>
    <!-- 
	Ugly solution for ugly problem, XSL transform insists on putting xmlns:name="name"
	attribute in its output of tags like <bean:define ... />, this strips em out.
	-->
    <replaceregexp match='xmlns:[^=]*="dummy"' replace="" flags="gs" byline="true">
      <fileset dir="${build.jsp.src.dir}" includes="**/*.jsp"/>
    </replaceregexp>
    <echo>Generate the vegbank schema xsd file ... ${build.lib.dir}/${vegbankSchemaName}</echo>
    <java classname="org.apache.xalan.xslt.Process" fork="true">
      <arg line="-IN ${docs.dir}/xml/db_model_vegbank.xml -XSL ${docs.dir}/xml/dbmodel-to-schema.xsl -OUT ${build.lib.dir}/${vegbankSchemaName}"/>
      <jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
    </java>
    <!-- NOT USED YET, ALLOWS USE OF THE BEANLOADER CODE FOR UPLOADING XML
		generate a digester rules.xml so xml can be read into a VBModelBean Tree 
	<echo>Generate the Digester Rules ( for reading XML into Beans ) ... ${build.java.src.dir}/</echo>
	<java classname="org.apache.xalan.xslt.Process"
		fork="true">
		<arg line="-IN ${docs.dir}/xml/db_model_vegbank.xml -XSL ${xsl.src.dir}/GenDigesterRules.xsl -OUT ${build.java.src.dir}/DigesterRules.xml "/>
		<jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
	</java>
	-->
    <!-- generate the ForeignTables property  file   
		THIS FILE MUST BE HAND EDITED AS I CANNOT FIGURE OUT GENERATION LOGIC ( order in which to visit child tables )
		This is useful for creating the properties file initially, and then hand edit  
	<echo>Generate the ForeignTables.properties into ${build.java.src.dir}</echo>
	<java classname="org.apache.xalan.xslt.Process"
		fork="true">
		<arg line="-IN ${docs.dir}/xml/db_model_vegbank.xml -XSL ${xsl.src.dir}/GenForeignTableProps.xsl -OUT ${build.java.src.dir}/ForeignTables.properties "/>
		<jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
	</java>
	-->
  </target>
  <!-- ================================================================= -->
  <!-- Compile the java code                                             -->
  <!-- ================================================================= -->
  <target name="compile" depends="generate_java_datamodel, cleanprops, prepare" description="==> Compile the java code">
    <echo>${java.src.dir} to ${build.java.src.dir}</echo>
    <copy todir="${build.java.src.dir}">
      <fileset dir="${java.src.dir}">
        <include name="**/*java"/>
        <include name="**/*xml"/>
        <include name="**/*xsl"/>
      </fileset>
    </copy>
    <!-- Copy files that need filtering -->
    <!-- First clean out the props -->
    <delete>
      <fileset dir="${build.java.src.dir}">
        <include name="**/*properties"/>
      </fileset>
    </delete>
    <echo>Copying .properties to ${build.java.src.dir} - Schema name: ${vegbankSchemaName}</echo>
    <copy todir="${build.java.src.dir}" filtering="true">
      <fileset dir="${java.src.dir}">
        <include name="**/*properties"/>
      </fileset>
    </copy>
    <javac srcdir="${build.java.src.dir}" includes="**/*.java" destdir="${build.classes.dir}" debug="on">
      <classpath refid="classpath.compilation"/>
    </javac>
  </target>
  <!--
   * Some property files have values that are filtered by ant, delete these so 
   * ant can filter them again.
  -->
  <target name="cleanprops" depends="prepare" description="==> Remove generated properties files">
    <echo>cleanprops: removing old generated properties files</echo>
    <delete>
      <fileset dir="${build.classes.dir}" includes="**/*.properties"/>
    </delete>
  </target>
  <!-- ================================================================= -->
  <!-- Install Vegbank on the local system                               -->
  <!-- ================================================================= -->
  <target name="install" depends="deploy-all" description="==> Install the application">
    <delete dir="${vegbank.home.dir}/lib"/>
    <delete dir="${vegbank.home.dir}/bin"/>
    <echo>making vegbank home: ${vegbank.home.dir}</echo>
    <mkdir dir="${vegbank.home.dir}"/>
    <mkdir dir="${vegbank.home.dir}/lib"/>
    <mkdir dir="${vegbank.home.dir}/bin"/>
    <mkdir dir="${vegbank.data.dir}"/>
    <mkdir dir="${vegbank.home.dir}/cache"/>
    <mkdir dir="${vegbank.home.dir}/logs"/>
    <copy todir="${vegbank.home.dir}/lib">
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/lib">
      <fileset dir="${build.lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/bin" filtering="on">
      <fileset dir="${bin.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/bin">
      <fileset dir="${build.script.src.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/lib">
      <fileset dir="${build.lib.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <!-- Make the scripts executable -->
    <chmod perm="a+x">
      <fileset dir="${vegbank.home.dir}/bin">
        <include name="**/*"/>
      </fileset>
    </chmod>
    <!-- For sanity preservation 
	#### NEED TO BE OWNER TO CHANGE THESE, NEED TO FIND OUT HOW TO GET ANT TO RUN AS TOMCAT USER!!
   <exec executable="chmod" >
     <arg line="-R g+wr ${vegbank.home.dir} ${env.TOMCAT_HOME}/webapps"/>
   </exec>
   <exec executable="chown" >
     <arg line="-R :vegbank ${vegbank.home.dir} ${env.TOMCAT_HOME}/webapps"/>
   </exec>
   -->
    <!-- Need to do the apache dir too -->
    <!-- The following are only supported by apache ant 1.6.0 and higher, comment out for now
   <chgrp group="vegbank"> 
     <fileset dir="${vegbank.home.dir}">
        <include name="**/*"/>
     </fileset>
     <fileset dir="${env.TOMCAT_HOME}/">
        <include name="**/*"/>
     </fileset>
   </chgrp>

  <chmod perm="g+rw">
     <fileset dir="${vegbank.home.dir}">
        <include name="**/*"/>
     </fileset>
     <fileset dir="${env.TOMCAT_HOME}/">
        <include name="**/*"/>
     </fileset>
   </chmod>
   -->
  </target>
  <!-- ================================================================= -->
  <!-- Generate Javadoc                                                  -->
  <!-- ================================================================= -->
  <target name="javadoc" depends="prepare" description="==> Generate projects javadoc">
    <javadoc destdir="${build.docs.api.dir}" author="true" version="true" use="true" private="false" additionalparam="-quiet" source="1.4" nodeprecated="false" windowtitle="${ant.project.name} API">
      <!--
      	ant 1.6 supports breakiterator="yes", which reduces the volume of messages from javadoc 
	-->
      <classpath refid="classpath.compilation"/>
      <packageset dir="src" defaultexcludes="yes">
        <include name="org/**"/>
      </packageset>
      <packageset dir="${build.java.src.dir}" defaultexcludes="yes">
        <include name="org/vegbank/**"/>
      </packageset>
      <doctitle><![CDATA[<h1>${ant.project.name}</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2001-2003 vegbank.org. All Rights Reserved.</i>]]></bottom>
      <tag name="TODO" scope="all" description="To do:"/>
      <tag name="FIXME" scope="all" description="Fix me:"/>
      <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
      <link href="http://java.sun.com/j2se/1.4.1/docs/api"/>
      <link href="http://jakarta.apache.org/struts/api"/>
    </javadoc>
  </target>
  <!-- ================================================================= -->
  <!-- Database related targets                                          -->
  <!-- ================================================================= -->
  <target name="db_generate_sql" description="==> Generate the sql build scripts" depends="prepare">
    <xslt in="${docs.dir}/xml/db_model_vegbank.xml" out="${build.sql.src.dir}/vegbank-GF.sql" style="${xsl.src.dir}/VegBankModel2SQL.xsl"/>
    <!-- Alternate XSL for genrating Vegbank.sql -->
    <xslt in="${docs.dir}/xml/db_model_vegbank.xml" out="${build.sql.src.dir}/vegbank-ML.sql" style="${docs.dir}/xml/dbmodel-to-sql.xsl"/>
  </target>
  <!-- A simple checker between the model and the database, NOT definative -->
  <target name="db_generate_verify_script" description="==> Generate the database verify script" depends="prepare">
    <xslt in="${docs.dir}/xml/db_model_vegbank.xml" out="${build.script.src.dir}/VerifyDatabase.pl" style="${xsl.src.dir}/VerifyDatabaseGen.xsl"/>
  </target>
  <target name="db_verify_andfail" description="==> Michael's method of checking db to match model xml and fails build if diffs" >
   <property name="failOnModelDiff" value="true"/>
    <antcall target="db_verify" />
<!-- just do the diff -->
    <!--<exec dir="${build.status.dir}" executable="diff" output="${build.status.dir}/modeldiffs.txt" resultproperty="diffResult" failonerror="${failOnModelDiff}">
      <arg line=" -ibwB ./logicalmodel.txt ./actualmodel.txt  "/>
    </exec>-->  </target>
  <target name="db_verify" description="==> Michael's new method of checking the database to match model xml" depends="prepare">
 
    <!-- set to not fail unless already set -->
 
    <condition property="failOnModelDiff" value="false">
      <not>
        <isset property="failOnModelDiff"/>
      </not>
    </condition>
   
    <!-- get ideal model output -->    
    <xslt in="${docs.dir}/xml/db_model_vegbank.xml" out="${build.status.dir}/logicalmodel.txt" style="${docs.dir}/xml/checkModelAgainstDB.xsl" force="true"/>
    <!-- get acutal model output -->
    <echo>Checking model with databaseUser = ${databaseUser} for database = ${databaseName}</echo>
    <exec dir="${sql.src.dir}" executable="psql">
      <arg line="-U ${databaseUser} ${databaseName} -f verifyActualModel.sql -o ${build.status.dir}/actualmodel.txt -At "/>
    </exec>
    <!-- compare ideal logical model to acutal model -->
    <property name="verify_readme" value="
   differences are checked for between the actual database model (as implemented in postgresql) and the model specified in docs/xml/db_model_vegbank.xml.
     The diff file will show fields different or missing from one of the model xml file and the actual database.  The database fields are followed by 'dil' and the model fields by the same, but with one of the letters capitalized, symbolizing that it is either a Denormalized field, Implementation field or Logical field.  " />
<echo> If the next line does not have 'Diff results: 0', and the build failed, this is because ${verify_readme}  The diff file is located here:</echo>
<echo file="${build.status.dir}/verify.readme" >${verify_readme}  The Diff file is displayed on screen unless there are no differences.</echo>

 <echo>------</echo>
 <echo>${build.status.dir}/modeldiffs.txt</echo>
 <echo>------</echo>
   
    <exec dir="${build.status.dir}" executable="diff" output="${build.status.dir}/modeldiffs.txt" resultproperty="diffResult" failonerror="${failOnModelDiff}">
      <arg line=" -ibwB ./logicalmodel.txt ./actualmodel.txt  "/>
    </exec>
    <echo>Diff results: ${diffResult}</echo>
  </target>

  <target name="props_verify" description="==> checks build.properties to make sure all the properties are there " depends="init">
    <echo>Checking build.properties for missing properties...</echo>
	<exec dir="." executable="bin/test_props.sh" failonerror="true"/>
  </target>

  <target name="db_generate_archive_triggersql" description="==> Generate the archive trigger sql scripts" depends="prepare">
    <xslt in="${docs.dir}/xml/db_model_vegbank.xml" out="${build.sql.src.dir}/trigger.sql" style="${xsl.src.dir}/VegbankModel2RevisionTriggersSQL.xsl"/>
  </target>
  <target name="db_rebuild_empty_vegbank" description="==> Rebuild the vegbank Database" depends="db_generate_sql">
    <!-- DROP and CREATE Database -->
    <exec executable="${bin.dir}/rebuilddb.sh">
      <arg value="${build.context}"/>
      <arg value="${build.sql.src.dir}/vegbank.sql"/>
    </exec>
    <antcall target="grant_db_privilages"/>
  </target>
  <target name="db_pre_load" description="==> Preload data into database" depends="prepare">
    <exec executable="${bin.dir}/run_sql.sh">
      <arg value="${build.context}"/>
      <arg value="${sql.src.dir}/insert_preload_ANSI.sql"/>
    </exec>
  </target>
  <target name="grant_db_privilages" description="==> Grant privilages to qa user" depends="prepare">
    <!-- Grant privilages -->
    <exec executable="bin/qa_user/grantQAPrivil.pl"/>
  </target>
  <!-- ================================================================= -->
  <!-- Utility targets for internal build file consumption               -->
  <!-- ================================================================= -->
  <target name="getContextName">
    <input message="Please enter the context you are acting on (e.g. vegbank, vegtest ) : " addproperty="build.context"/>
    <condition property="noContextName">
      <equals arg1="" arg2="${build.context}"/>
    </condition>
    <condition property="invalidContextName">
      <and>
        <not>
          <equals arg1="vegbank" arg2="${build.context}"/>
        </not>
        <not>
          <equals arg1="vegtest" arg2="${build.context}"/>
        </not>
      </and>
    </condition>
    <fail if="noContextName">
*******************************************************************************
ERROR: You did not enter a context name.
*******************************************************************************
    </fail>
    <fail if="invalidContextName">
*******************************************************************************
ERROR: An invalid context name entered: '${build.context}' 
	Only vegbank and vegtest contexts currently supported.
*******************************************************************************
    </fail>
  </target>
</project>
