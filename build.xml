<?xml version="1.0"?>
<!-- 
  * build.xml
  *
  * Global build script for vegbank.
  * The build.context must be entered for all task, to avoid this hassle you 
  * can call ant like this:
  *  % echo "[build.context]" | ant [target]
  *
  *     '$Author: anderson $'
  *     '$Date: 2004-01-05 23:38:52 $'
  *     '$Revision: 1.34 $'
--> 
<project name="Vegbank" default="jar" basedir=".">

  <!-- ================================================================= -->
  <!-- Initialize simple properties, no context handling                 -->
  <!-- ================================================================= -->
  <target name="init">
    <tstamp/>
    
    <property environment="env" />
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.src.dir" value="${build.dir}/src"/>
    <property name="build.lib.dir" value="${build.dir}/lib"/>
    <property name="build.sql.src.dir" value="${build.src.dir}/sql"/>
    <property name="build.java.src.dir" value="${build.src.dir}/java"/>   
    <property name="build.jsp.src.dir" value="${build.src.dir}/jsp"/>   
    <property name="build.script.src.dir" value="${build.src.dir}/scripts"/>   
    <property name="build.javadatamodel.src.dir" value="${build.java.src.dir}/org/vegbank/common/model"/>  
    <property name="build.javadatamodel.utility.src.dir" value="${build.javadatamodel.src.dir}/utility"/>  
    <property name="build.classes.dir" value="${build.dir}/classes"/>   
    <property name="build.reports.dir" value="${build.dir}/reports"/>
    <property name="build.reports.test.dir" value="${build.reports.dir}/testreports"/>
    <property name="build.docs.dir" value="${build.dir}/docs"/>
    <property name="build.docs.api.dir" value="${build.docs.dir}/javadoc"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="docs.dir" value="${basedir}/docs"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="rmi.dist.dir" value="${dist.dir}/RMIServer"/>
    <property name="bin.dir" value="${basedir}/bin"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="java.src.dir" location="${src.dir}/java" />
    <property name="xsl.src.dir" value="${src.dir}/xsl"/>
    <property name="sql.src.dir" value="${src.dir}/sql"/>
    <property name="ant.style.dir" location="${env.ANT_HOME}/etc" />

    <property name="model.generated.flag" value="${build.java.src.dir}/generate_java_datamodel-HAS_BEEN_RUN_FLAG" />
  </target>
	
  <!-- ================================================================= -->
  <!-- Read properties file, Setup filters, etc.                         -->
  <!-- ================================================================= -->
  <target name="prepare" depends="init,getContextName">
    <echo>Vegbank build.xml:  init for building context ${build.context}</echo>

    <!-- Load volatile properties from a file -->
    <!-- Load vegbank properties -->
    <condition property="build.props.file" value="${basedir}/build.properties">
      <equals arg1="${build.context}" arg2="vegbank"/>
    </condition>

    <!-- Else, load other webapp properties -->
    <condition property="build.props.file" value="${basedir}/build.${build.context}.properties">
      <not><equals arg1="${build.context}" arg2="vegbank"/></not>
    </condition>

    <property file="${build.props.file}"/>
    <echo>Loading props file: ${build.props.file}</echo>
    <!-- End conditional logic for picking up correct properties file -->

    <echo>init webapp '${build.context}'</echo>
    <property name="web.context" location="${env.TOMCAT_HOME}/webapps/${build.context}" />
    <property name="web.inf" location="${web.context}/WEB-INF" /> 
    <property name="web.lib.dir" location="${web.inf}/lib" /> 
   

    <!--
      * The following filters expect the database connection properties
      * be set in the user custom build.properties file. There is an example 
      * of this file in cvs.
    -->
    <filter token="authenticationServletHost" value="${authenticationServletHost}" />
    <filter token="communityRequestServletHost" value="${communityRequestServletHost}" />
    <filter token="plantRequestServletHost" value="${plantRequestServletHost}" />
    <filter token="geoCoordRequestServletHost" value="${geoCoordRequestServletHost}" />
    <filter token="databaseType" value="${databaseType}" />
    <filter token="databaseUser" value="${databaseUser}" />
    <filter token="databaseUserPassword" value="${databaseUserPassword}" />
    <filter token="databasePort" value="${databasePort}" />
    <filter token="hostname" value="${hostname}"/>
    <filter token="databaseDriverType" value="${databaseDriverType}" />
    <filter token="databaseDriverClass" value="${databaseDriverClass}" />
    <filter token="databaseConnectString" value="${databaseConnectString}"/>
    <filter token="databaseName" value="${databaseName}" />
    <filter token="insert.minConnections" value="${insert.minConnections}" />
    <filter token="insert.maxConnections" value="${insert.maxConnections}" />
    <filter token="query.minConnections" value="${query.minConnections}" />
    <filter token="query.maxConnections" value="${query.maxConnections}" />
    <filter token="maxConnectionUses" value="${maxConnectionUsers}" />
    <filter token="resetTime" value="${resetTime}" />
    <filter token="logFile" value="${logFile}" />
    <filter token="vegbankSchemaName" value="${vegbankSchemaName}" />
    <filter token="vegbank.home.dir" value="${vegbank.home.dir}/" />
    <filter token="originalDataStore" value="${vegbank.home.dir}/originalDataStore"/>
    <filter token="schemaLocation" value="${vegbank.home.dir}/lib"/>
    <!-- End filters created from build.${context}.properties -->

    <!-- Copied these straight from the veg_plot build.xml, are they relevant ? -->
    <!-- Servlet specific -->
    <filter token="mailHost" value="hyperion.nceas.ucsb.edu"/>
    <filter token="systemEmail" value="dba@vegbank.org"/>
    <filter token="genericForm" value="${web.context}/forms/generic_form.html"/>
    <filter token="genericTemplate" value="${web.context}/forms/tmp.html"/>
    <filter token="rmiserver"  value="${rmiserver}"/>
    <filter token="uploadDir" value="${web.lib.dir}"/>
    <filter token="servlet_lib_dir" value="${web.lib.dir}/" />

    <!--
      * Make all the build directories
    --> 
    <mkdir dir="${build.src.dir}"/>
    <mkdir dir="${build.lib.dir}"/>
    <mkdir dir="${build.sql.src.dir}"/>
    <mkdir dir="${build.java.src.dir}"/>  
    <mkdir dir="${build.jsp.src.dir}"/>  
    <mkdir dir="${build.script.src.dir}"/>  
    <mkdir dir="${build.reports.dir}"/>
    <mkdir dir="${build.reports.test.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${build.javadatamodel.src.dir}"/>
    <mkdir dir="${build.javadatamodel.utility.src.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${rmi.dist.dir}"/>
    <mkdir dir="${build.docs.dir}"/>
    <mkdir dir="${build.docs.api.dir}"/>

    <!-- Classpaths -->
    <path id="classpath.compilation">
      <fileset dir="${lib.dir}">
        <include name="**/*jar"/>
      </fileset>
    </path>

    <uptodate property="modelBeanGenerate.notRequired" targetfile="${model.generated.flag}" >
      <srcfiles dir= "${xsl.src.dir}" includes="**/*.xsl"/>
      <srcfiles dir="${docs.dir}" includes="**/*.xml"/>
    </uptodate>

    <!-- <echo> ${modelBeanGenerate.notRequired} </echo> -->

  </target>
    
  <target name="jar" depends="compile"
          description="==> Generates all jars in vegbank">
   		
		<!-- 
			The whole project in a single jar, maybe a good idea to split it
			up, but I cannot think of any advantages right now 
		--> 
		<jar destfile="${build.lib.dir}/vegbank.jar">
			<fileset dir="${build.classes.dir}" casesensitive="yes">
				<include name="org/vegbank/**/*.class"/>
				<include name="**/*.properties"/>
      			</fileset>
			<fileset dir="${build.java.src.dir}" casesensitive="yes">
				<include name="org/vegbank/**/*.java"/>
      			</fileset>
    	</jar> 

		<!--
			Copy all support jars into the build dir
			before being deployed 
		-->
		<copy todir="${build.lib.dir}">
			<fileset dir="${lib.dir}" includes="*jar"/>
		</copy> 
	
  </target>

  <target name="run-tests" description="==> Run all the tests availible">
    <ant dir="veg_plot" target="run-tests" inheritAll="false"/> 
    <ant dir="common" target="test" inheritAll="false"/>
    <ant dir="veg_taxa" target="test" inheritAll="false"/>
  </target>
  
  <target name="deploy" depends="jar,deploy-prepare"
          description="==> deploys vegclass module jars, html and other resources">
    
	<echo>---------DEPLOYING common---------------</echo>
	<!-- Not need for regular source, need to do something for tests -->
	<echo>---------DEPLOYING veg_community---------------</echo>
	<!-- Not needed anymore ? -->
	<echo>---------DEPLOYING veg_taxa---------------</echo>
	<!-- Not needed anymore ? -->
	<echo>---------DEPLOYING veg_plot---------------</echo>
	<!-- Not needed for java code, need to do something for tests -->
		
	<echo message="Distr all of jars in ${ant.project.name}"/>


	<!-- set the proper deploy target -->
	<condition property="deploy.target" value="deploy">
		<equals arg1="${build.context}" arg2="vegbank"/>
	</condition>

	<!-- else, set other webapp deployment -->
	<condition property="deploy.target" value="deploy-${build.context}">
		<not><equals arg1="${build.context}" arg2="vegbank"/></not>
	</condition>
	
	<echo>************ ${deploy.target} , ${build.context} ****************</echo>
	<ant dir="web" target="${deploy.target}" inheritAll="false">
		<property name="hostname" value="${hostname}"/>
	</ant>

	<echo>deploying jars to ${web.lib.dir}</echo>
	<echo>db connect: ${databaseConnectString}</echo>
	<copy todir="${web.lib.dir}">
		<fileset dir="${build.lib.dir}" includes="*jar"/>
	</copy> 
	
	<mkdir dir="${web.context}/GenJSP"/>
	<copy todir="${web.context}/GenJSP">
		<fileset dir="${build.jsp.src.dir}" includes="*jsp"/>
 	</copy>
  </target>

  <target name="deploy-prepare" depends="prepare">
    <mkdir dir="${web.context}"/>
    <mkdir dir="${web.inf}"/>
    <mkdir dir="${web.lib.dir}"/>
  </target>

  <!-- ================================================================= -->
  <!-- Remove all Generated files                                        -->
  <!-- ================================================================= -->
  <target name="clean" depends="init" description="==> Remove all generated files">
    <delete dir="${build.dir}"/>
  </target>


  <target name="dist" depends="deploy, javadoc">
    <copy todir="${web.context}/dev">
      <fileset dir="${build.docs.dir}" casesensitive="yes"/>
    </copy>

    <ant dir="exp/vegbank_web" target="dist" inheritAll="false"/>
  </target>
  
  <target name="dist-reports" 
          depends="prepare"
          description="==> Generate htmls from generated reports and distributes to web">

    <ant dir="common" target="dist-testreport" inheritAll="false"/>
    <!--<ant dir="veg_plot" target="run-tests" inheritAll="false"/>-->
    <ant dir="veg_community" target="clean" inheritAll="false"/>
    <ant dir="veg_taxa" target="test" inheritAll="false"/>
 
		<!-- Create a report from the junit output -->
		<junitreport todir="${build.reports.test.dir}">
	  		<fileset dir="${build.reports.test.dir}">
	  			<include name="TEST-*.xml"/>
			</fileset>
	  		<report format="frames"
				        todir="${web.context}/dev/reports/junit"
	              styledir="${ant.style.dir}"/>
	  	</junitreport>
	
	</target>


  <!-- ================================================================= -->
  <!-- Generate model beans from the datamodel XML and generate utility  -->
  <!-- javabeans                                                         -->
  <!-- ================================================================= -->
  <target name="generate_java_datamodel"
          description="==> Generate the java datamodel"
          depends="prepare"
          unless="modelBeanGenerate.notRequired">
         
	<!-- DOES NOT PICKUP CORRECT XSLT PROCCESOR FOR ME 
	<xslt in="${docs.dir}/xml/db_model_vegbank.xml" style="${xsl.src.dir}/VegBankModel2Java.xsl" 
		out="${build.java.src.dir}/generate_java_datamodel-HAS_BEEN_RUN_FLAG">
		<param name="outdir" expression="${build.javadatamodel.src.dir}"/>
		<classpath refid="classpath.compilation"/>
	</xslt>
	-->

	<!-- Generate the regular VBModelBeans --> 
	<java classname="org.apache.xalan.xslt.Process"
		fork="true">
		<arg line="-IN ${docs.dir}/xml/db_model_vegbank.xml -XSL ${xsl.src.dir}/VegBankModel2Java.xsl -OUT ${model.generated.flag} -PARAM outdir ${build.javadatamodel.src.dir}/"/>
		<jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
	</java>
	

	<!-- Generate the Utility javabeans e.g. state --> 
	<java classname="org.apache.xalan.xslt.Process"
		fork="true">
		<arg line="-IN ${docs.dir}/xml/utility/UtilityBeans.xml -XSL ${xsl.src.dir}/UtilityXMLToJavaBeans.xsl -OUT ${model.generated.flag} -PARAM outdir ${build.javadatamodel.utility.src.dir}/"/>
		<jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
	</java>
	

	<!-- Generate the jsp for displaying entities -->
	<java classname="org.apache.xalan.xslt.Process"
		fork="true">
		<arg line="-IN ${docs.dir}/xml/db_model_vegbank.xml -XSL ${xsl.src.dir}/VegBankModel2JSP.xsl -OUT ${model.generated.flag} -PARAM outdir ${build.jsp.src.dir}/"/>
		<jvmarg value="-Xbootclasspath/p:lib/xalan.jar:lib/xercesImpl.jar:lib/xml-apis.jar"/>
	</java>

	<!-- 
	Ugly solution for ugly problem, XSL transform insists on putting xmlns:name="name"
	attribute in its output of tags like <bean:define ... />, this strips em out.
	-->
	<replaceregexp match='xmlns:[^=]*="dummy"' replace="" flags="gs" byline="true">
    		<fileset dir="${build.jsp.src.dir}" includes="**/*.jsp" />
	</replaceregexp>
  </target>
  
  <target name="compile"
          depends="generate_java_datamodel, cleanprops, prepare"
          description="==> Compile the java code">

    <echo>${java.src.dir} to ${build.java.src.dir}</echo>
    <copy todir="${build.java.src.dir}">
      <fileset dir="${java.src.dir}">
        <include name="org/**/*java"/>
      </fileset>
    </copy>

    <!-- Copy property files -->
    <copy todir="${build.classes.dir}" filtering="true">
      <fileset dir="${java.src.dir}">
        <include name="**/*properties"/>
      </fileset>
    </copy>

    <javac srcdir="${build.java.src.dir}"
      includes="**/*.java"
      destdir="${build.classes.dir}">			
      <classpath refid="classpath.compilation"/>
   </javac>
  
  </target>

  <!--
   * Some property files have values that are filtered by ant, delete these so 
   * ant can filter them again.
  -->
  <target name="cleanprops" depends="prepare" 
    description="==> Remove generated properties files">
    <echo>cleanprops: removing old generated properties files</echo>
    <delete>
      <fileset dir="${build.classes.dir}" includes="**/*.properties"/>
    </delete>
  </target>
 
  <target name="install"
          depends="deploy"
          description="==> Install the application">

    <delete dir="${vegbank.home.dir}/lib"/>
    <delete dir="${vegbank.home.dir}/bin"/>

    <mkdir dir="${vegbank.home.dir}"/>
    <mkdir dir="${vegbank.home.dir}/lib"/>
    <mkdir dir="${vegbank.home.dir}/bin"/>
    <mkdir dir="${vegbank.home.dir}/originalDataStore"/>
    
    <copy todir="${vegbank.home.dir}/lib">
      <fileset dir="${lib.dir}">
         <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${docs.dir}/xml/dataxml">
	<include name="**/*.xsd"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/lib">
      <fileset dir="${build.lib.dir}">
         <include name="**/*.jar"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/bin" filtering="on">
      <fileset dir="${bin.dir}">
         <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/bin">
      <fileset dir="${build.script.src.dir}">
         <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${vegbank.home.dir}/lib">
      <fileset dir="${build.lib.dir}">
         <include name="**/*"/>
      </fileset>
    </copy>


    <chmod perm="a+x">
      <fileset dir="${vegbank.home.dir}/bin">
         <include name="**/*"/>
      </fileset>
    </chmod>
  </target> 

  <!-- ================================================================= -->
  <!-- Generate Javadoc                                                  -->
  <!-- ================================================================= -->
  <target name="javadoc"
          depends="prepare"
          description="==> Generate projects javadoc">
 
    <javadoc 
      destdir="${build.docs.api.dir}"
      author="true"
      version="true"
      use="true"
      source="1.4"
      nodeprecated="false"
      
      windowtitle="${ant.project.name} API">

      <classpath refid="classpath.compilation"/>

      <packageset dir="src" defaultexcludes="yes">
        <include name="org/**" />
      </packageset>

      <packageset dir="${build.java.src.dir}" defaultexcludes="yes">
        <include name="org/vegbank/**" />
      </packageset>
      
      <doctitle><![CDATA[<h1>${ant.project.name}</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2001-2003 vegbank.org. All Rights Reserved.</i>]]></bottom>
      <tag name="TODO" scope="all" description="To do:" />
      <tag name="FIXME" scope="all" description="Fix me:" />
      <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
      <link href="http://java.sun.com/j2se/1.4.1/docs/api"/>
      <link href="http://jakarta.apache.org/struts/api"/>
    </javadoc>

  </target>

          
  <!-- ================================================================= -->
  <!-- Database related targets                                          -->
  <!-- ================================================================= -->

  <target name="db_generate_sql"
          description="==> Generate the sql build scripts"
          depends="prepare">

          
            <xslt in="${docs.dir}/xml/db_model_vegbank.xml" 
                  out="${build.sql.src.dir}/vegbank.sql" 
                  style="${xsl.src.dir}/VegBankModel2SQL.xsl">
            </xslt>
  </target>

  <!-- A simple checker between the model and the database, NOT definative -->
  <target name="db_generate_verify_script"
          description="==> Generate the database verify script"
          depends="prepare">
          
            <xslt in="${docs.dir}/xml/db_model_vegbank.xml" 
                  out="${build.script.src.dir}/VerifyDatabase.pl" 
                  style="${xsl.src.dir}/VerifyDatabaseGen.xsl">
            </xslt>
  </target>

  <target name="db_generate_archive_triggersql"
          description="==> Generate the archive trigger sql scripts"
          depends="prepare">
          
            <xslt in="${docs.dir}/xml/db_model_vegbank.xml" 
                  out="${build.sql.src.dir}/trigger.sql" 
                  style="${xsl.src.dir}/VegbankModel2RevisionTriggersSQL.xsl">
            </xslt>
  </target>


  <target name="db_rebuild_empty_vegbank"
          description="==> Rebuild the vegbank Database"
          depends="db_generate_sql">
    
    <!-- DROP and CREATE Database -->
    <exec executable="${bin.dir}/rebuilddb.sh">
      <arg value="${build.context}"/>
      <arg value="${build.sql.src.dir}/vegbank.sql"/>
    </exec>

    <antcall target="grant_db_privilages"/>
  </target>
  
  <target name="db_pre_load"
          description="==> Preload data into database"
          depends="prepare">
    <exec executable="${bin.dir}/run_sql.sh">
      <arg value="${build.context}"/>
      <arg value="${sql.src.dir}/insert_preload_ANSI.sql"/>
    </exec>
  </target>

  <target name="grant_db_privilages"
          description="==> Grant privilages to qa user"
          depends="prepare">
    <!-- Grant privilages -->
    <exec executable="bin/qa_user/grantQAPrivil.pl"/>
  </target>

  <!-- ================================================================= -->
  <!-- Utility targets for internal build file consumption               -->
  <!-- ================================================================= -->

  <target name="getContextName">
    <input message="Please enter the context you are acting on (e.g. vegbank, vegtest ) : " addproperty="build.context" />
  
    <condition property="noContextName">
      <equals arg1="" arg2="${build.context}"/>
    </condition>

    <condition property="invalidContextName">
      <and>
        <not><equals arg1="vegbank" arg2="${build.context}"/></not>
        <not><equals arg1="vegtest" arg2="${build.context}"/></not>
      </and>
    </condition>

    <fail if="noContextName">
*******************************************************************************
ERROR: You did not enter a context name.
*******************************************************************************
    </fail>
    <fail if="invalidContextName">
*******************************************************************************
ERROR: An invalid context name entered: '${build.context}' 
	Only vegbank and vegtest contexts currently supported.
*******************************************************************************
    </fail>
  </target>


</project> 
